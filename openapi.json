{
  "openapi": "3.0.1",
  "info": {
    "title": "Rev REST APIs",
    "description": "Rev API is the primary means for developers to access, create and modify resources in Rev. Apps can read and write to the resources and mirror some of the most popular features available in Rev Web Portal such as uploading and editing videos, creating, editing, and starting webcasts, adding and removing users and groups, viewing reports and much more using the Rev API. Depending on your app’s use case, you can choose from our various APIs and implement the features accordingly.</br>All Rev APIs are based on REST architecture and are accessed via HTTPS. The complete URL is based on your Rev tenant URL and varies depending on the endpoint of the resource being accessed. For instance, you can access a user based on Rev User ID vai a a GET request to this URL: https://YOUR_REV_TENANT_URL/api/v2/users/userId.</br>Please make sure that you are familiar with the authentication and authorization approaches for Rev APIs.",
    "version": "2.0.0"
  },
  "x-explorer-enabled": false,
  "x-samples-languages": [
    "curl",
    "node",
    "java",
    "csharp",
    "ruby",
    "python"
  ],
  "security": [],
  "servers": [
    {
      "url": "https://YOUR_REV_TENANT_URL"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication tagging description."
    },
    {
      "name": "Videos",
      "description": "Videos"
    },
    {
      "name": "Playlists",
      "description": "Playlists"
    },
    {
      "name": "Webcasts",
      "description": "Webcasts"
    },
    {
      "name": "Users & Groups",
      "description": "User & Groups"
    },
    {
      "name": "Channels",
      "description": "Channels"
    },
    {
      "name": "Administration",
      "description": "Administration"
    },
    {
      "name": "Devices",
      "description": "Devices"
    },
    {
      "name": "Audit",
      "description": "Audit Details"
    }
  ],
  "paths": {
    "/api/v2/authenticate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User Login API Key",
        "description": "This authentication API endpoint is used to authenticate individual user using user’s pre-generated API Key and Secret. Use the token that is returned in the response as the Authorization to run other public APIs. Once a session is established using this endpoint, subsequent API calls that uses the token returned from this endpoint will be limited according to the role and privileges of this particular user. Using this method, the user via API will have the same privileges and roles that user has when they login to Rev UI. This authentication mechanism can be used to automate Rev workflows using role and privileges of a given user.</br></br>Account Admins can generate user’s API Key and Secret combination. Secret is only visible at the time of generation. API Key and Secret combination can be regenerated and deleted. The key will not work for suspended users. Also authenticating a user using this method will consume a user license if the user is unlicensed",
        "operationId": "authenticateUser",
        "x-sdk-method-name": "loginApiKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loginApiKeyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "credentials"
      }
    },
    "/api/v2/tokens/{apiKey}": {
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Revoke API Key Session",
        "description": "This endpoint revokes the current user API key session.",
        "operationId": "revokeToken",
        "x-sdk-method-name": "logoffApiKey",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "apiKey",
            "in": "path",
            "description": "ApiKey of the user revoking the token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/user/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User Login",
        "description": "Establish session via Username login.",
        "operationId": "loginUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loginUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "credentials"
      }
    },
    "/api/v2/user/logoff": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User Logoff",
        "description": "This endpoint ends the login session. The userId value (provided in the login endpoint response) identifies the user who is logging out.",
        "operationId": "logOff",
        "x-sdk-method-name": "logoffUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userIdPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "logoffRequest"
      }
    },
    "/api/v2/user/extend-session": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Extend Login Session for All Authentication Methods",
        "description": "Extends the current user login session regardless of the authentication method used. This includes preventing user API key sessions and JWT authentication sessions from timing out. Successful completion returns a new expiration date and time which then expires the session at that new date and time.",
        "operationId": "extendUserSession",
        "x-sdk-method-name": "extendSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/extendSessionTimeoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/auth/extend-session-timeout/{apiKey}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "deprecated": true,
        "summary": "Extend API Key Session (Deprecated)",
        "description": "This is a deprecated endpoint. Use <a href='/reference/extendusersession'>Extend Login Session for All Authentication Methods</a> instead. This endpoint extends the current user API key session by preventing it from timing out. Successful completion returns a new expiration date and time which then expires the session at that new date and time.",
        "operationId": "extendApikeySessionTimeout",
        "x-sdk-ignore": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "apiKey",
            "in": "path",
            "description": "ApiKey of the user extending the session timeout",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/extendSessionTimeoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/user/extend-session-timeout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "deprecated": true,
        "summary": "Extend User Login Session (Deprecated)",
        "description": "This is a deprecated endpoint. Use <a href='/reference/extendusersession'>Extend Login Session for All Authentication Methods</a> instead. This endpoint extends the current session by preventing it from timing out. Successful completion returns a new expiration date and time which expires the session at that new date and time.",
        "operationId": "extendSessionTimeout",
        "x-sdk-ignore": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userIdPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/extendSessionTimeoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "extendRequest"
      }
    },
    "/api/v2/oauth/authorization": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "deprecated": true,
        "summary": "OAuth Authorization (Deprecated)",
        "description": "This is a deprecated endpoint. Use <a href='/reference/authorize'>OAuth2 Authorization</a> instead. Successful invocation of this API results in the user being redirected to the URL specified in the redirect_uri parameter.",
        "operationId": "authorization",
        "x-sdk-method-name": "legacyOAuthAuthorizationFlow",
        "x-sdk-ignore": true,
        "parameters": [
          {
            "name": "apiKey",
            "in": "query",
            "description": "ApiKey obtained after registering the app in Rev",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "signature",
            "in": "query",
            "description": "This is a base 64 encoded string computed from the hash generated by signing verifier (below) using HMAC SHA 256 algorithm. It uses ApiKey secret as the key for signing. This is to make sure that the API sending the request has the right secret key and it has not been compromised.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "This is required and value <em>must</em> be set to <code>code</code>. Note this is also case sensitive.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "This determines where to send the response",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "This is any state that the consumer wants to reflect back to it after approval. This is optional and the value must be url encoded.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verifier",
            "in": "query",
            "description": "This is a combination of Apikey and current timestamp in UTC (<code>Apikey::Timestamp</code>) that is used for verifying the authorization request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response<p>After validating the ApiKey and signature, user is redirected back to login page with a reference to the redirect Uri. Once the user provides credentials, user is asked to grant access permissions to the client application.</p><p>If the user accepts, user is redirected back to the redirect URl provided along with an authorization code as a query parameter.</p><p>If the user denies access to the application, user is redirected to the URL but with an error query parameter.</p>",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/oauth/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "deprecated": true,
        "summary": "OAuth Access Token (Deprecated)",
        "description": "This is a deprecated endpoint. Use <a href='/reference/oauth2token'>OAuth2 Access Token</a> instead. Obtains the access token that identifies the Rev user that granted access to the client.",
        "operationId": "token",
        "x-sdk-method-name": "legacyGetOAuthToken",
        "x-sdk-ignore": true,
        "requestBody": {
          "description": "This contains the details required to generate accessToken",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessTokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "legacyOauthAccessTokenRequest"
      }
    },
    "/api/v2/oauth2/authorize": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "OAuth2 Authorization",
        "description": "Successful invocation of this API results in the user being redirected to the URL specified in the redirect_uri parameter.",
        "operationId": "authorize",
        "x-sdk-method-name": "authorizeOAuth2",
        "x-sdk-ignore": true,
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "client_id (ApiKey) obtained after registering the app in Rev",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge",
            "in": "query",
            "description": "This is a base 64 encoded string computed from the hash generated by signing a code_verifier string using SHA 256 algorithm. Computation: BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "This is required and value <em>must</em> be set to <code>code</code>. Note this is also case sensitive.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "This determines where to send the response. It should match the registered redirect uri with rev.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "This is any state that the consumer wants to reflect back to it after approval. This is optional and the value must be url encoded.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response<p>After validating the client_id and redirect_uri, user will be prompted to login using the authentication mechanism configured in Rev. Once the user is successful logged into Rev, user is redirected back to the redirect uri provided along with an authorization code as a query parameter.</p>",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/oauth2/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "OAuth2 Access Token",
        "description": "Obtains the access token that identifies the Rev user that granted access to the client.",
        "operationId": "oauth2token",
        "x-sdk-method-name": "getOauthToken",
        "requestBody": {
          "description": "This contains the details required to generate accessToken",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessTokenRequestOauth2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessTokenResponseOauth2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "accessTokenRequestOauth2"
      }
    },
    "/api/v2/oauth2/.well-known/oauth-authorization-server": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get oAuth Authorization Server Metadata",
        "description": "Returns a set of claims about the authorization server's configuration, including all necessary endpoints. Claims that return multiple values are represented as JSON arrays. ",
        "operationId": "oauth-authorization-server",
        "x-sdk-method-name": "getOauthMetadata",
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorizationServerResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/user/session": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Checks User Session",
        "description": "Checks user session health for the provided authorization header.",
        "operationId": "getUserSession",
        "x-sdk-method-name": "verifySession",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/jwtauthenticate": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "JWT Authentication",
        "description": "This authentication API endpoint is used to authenticate individual user using a JWT token. Use the token that is returned in the response as the Authorization to run other public APIs. Once a session is established using this endpoint, subsequent API calls that uses the token returned from this endpoint will be limited according to the role and privileges of this particular user. Using this method, the user via API will have the same privileges and roles that user has when they login to Rev UI. This authentication mechanism can be used to automate Rev workflows using role and privileges of a given user.</br></br>Account Admins can generate user’s API Key and Secret combination. Secret is only visible at the time of generation. API Key and Secret combination can be regenerated and deleted. The key will not work for suspended users. Also authenticating a user using this method will consume a user license if the user is unlicensed",
        "operationId": "jwtauthenticate",
        "x-sdk-method-name": "loginJWT",
        "parameters": [
          {
            "name": "jwt_token",
            "in": "query",
            "description": "JWT token that is generated using the configured tenant JWT Signing and Encryption keys. Upon validation of the token, vbrick access token is returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loginJWTResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jwtErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/videos": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video",
        "description": "Uploads a supported video format. A full list of <a href=/docs/supported-video-and-audio-formats>supported video formats</a> can be found in the Technical Requirements guide.",
        "operationId": "uploadVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "Content-Range",
            "in": "header",
            "description": "Content-Range when uploading in multiple chunks.  Format is bytes {start byte}-{end byte}/{total file size in bytes}. The videoId is returned after the first chunk is uploaded and is required in the requestBody for subsequent chunks.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "bytes 0000000-9999999/32723891"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Video",
                  "VideoFile"
                ],
                "properties": {
                  "Video": {
                    "description": "Video metadata object. Field name is video.",
                    "$ref": "#/components/schemas/videoMetadata"
                  },
                  "VideoFile": {
                    "type": "string",
                    "description": "Video file to upload.<p>Video file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#video.</p><p>Please provide Content-Type header for the uploaded video file.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoUploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request</br></br>Incorrect value for videoAccessControl",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error<p>uploader not specified or username does not exist in Rev</p><p>categoryIds incorrect or do not exist in Rev</p><p>customField does not exist in Rev or picklist values incorrect</p><p>publishDate format incorrect. Must be YYYY-MM-DD</p>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/videos/{videoId}": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Update Video Details/Metadata",
        "description": "This endpoint is used to set or modify all metadata fields for a specific video. Note that if you are only changing one field (categories for example) <em>all</em> other metadata fields must also be submitted with this API call. Otherwise, those values that are not set are reset to defaults or nullified entirely.<p>To edit specific fields instead of all fields, use the <a href=/reference/editvideopatch>Patch Video Details/Metadata</a> endpoint instead.</p>",
        "operationId": "updateVideo",
        "x-sdk-method-name": "editVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Videos details to update. customFields note: If custom metadata field is marked required, it must be provided in API call, otherwise it is optional.If it is required and not provided, the upload is rejected.Picklist types must be valid.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editVideoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "video"
      },
      "patch": {
        "tags": [
          "Videos"
        ],
        "summary": "Patch Video Details/Metadata",
        "description": "Partially edits the metadata details of a video. You do not need to provide the fields that are not changing.<p>Operations supported: add,remove,copy,replace,test,move.</p><p>Keep in mind that Access Controls are strictly dictated by <a href=/docs/roles-and-permissions>Roles and Permissions.</a></p><p>Please refer to http://jsonpatch.com/ for the format of the request body.</p><strong>Examples:</strong><p>using categories: [{'op': 'add', 'path': '/Categories/0', 'value': '03846100-96ac-4628-bbe3-b23a0df1081d' }]</p><p>using accessControlEntities: [{ 'op': 'replace', 'path': '/accessControlEntities/0/CanEdit', 'value': 'false' }]</p><p>Non-Editable fields [Id,ApprovalStatus,UploadedBy,WhenUploaded,LastViewed] are ignored.</p></p>",
        "operationId": "editVideoPatch",
        "x-sdk-method-name": "patchVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Videos details to update. Please refer to http://jsonpatch.com/ for the format of the request body.Patch operations on Video Non-Editable fields [Id,ApprovalStatus,UploadedBy,WhenUploaded,LastViewed] will be ignored.Operations supported: add,remove,copy,replace,test,move.Add operation:  {\"op\": \"add\", \"path\": \"/Categories/0\", \"value\": \"03846100-96ac-4628-bbe3-b23a0df1081d\" }.Replace operation:{ \"op\": \"replace\", \"path\": \"/accessControlEntities/0/CanEdit\", \"value\": \"false\" }",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "409": {
            "description": "Conflict error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "operations"
      },
      "delete": {
        "tags": [
          "Videos"
        ],
        "summary": "Delete Video",
        "description": "This endpoint deletes a video asset from Rev. This includes videos stored on a DME.",
        "operationId": "deleteVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/access-control": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Update Video Access Control",
        "description": "This endpoint edits the Access Control permissions on a specific video.<p>Allows Access Control entities to be set for all four types. Note that if set to <b>Public</b>, the Public setting must first be enabled on the Rev account and a password may then be set if desired. If set to <b>Channels</b>, there should be one valid Channel in the account, otherwise the request is rejected. The default setting is <b>Private</b>.</p>",
        "operationId": "editVideoAccessControl",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to modify access to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video Access Control Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessControlEntitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "accessControlSettings"
      }
    },
    "/api/v2/videos/{videoId}/edit": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Edit a Video",
        "description": "This endpoint allows you to edit and replace a specified video based on a list of supplied clips. Each clip is defined by the start and end parameters and applied to the videoId you specify. Multiple clips can be defined.<br><br>Be aware that this is a destructive process and you may wish to create a copy of the original video <em>before</em> applying changes with this endpoint. Meaning, the end result is a <em>new</em> video with the same videoId combined from all the concatenated video clips from the original video. Any video not acessible is ignored in the concatenation process.<br><br>Note that if you edit a video that has transcripts, those trascripts may be out of sync with the video and will need to be regenerated.<br><br>This endpoint replaces the <a href=/reference/trimvideo>trim video</a> API which is now deprecated as a result.</br>",
        "operationId": "editVideo",
        "x-sdk-method-name": "editVideoClips",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "edit video request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/videoEditRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/trim": {
      "post": {
        "tags": [
          "Videos"
        ],
        "deprecated": true,
        "summary": "Trim a Video (Deprecated)",
        "description": "This endpoint allows you to trim videos that are hosted in Rev. This endpoint is deprecated. Use the <a href=/reference/editvideo>edit a video</a> API instead.",
        "operationId": "trimVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to trim",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "trim video request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/videoTrimRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/details": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Details/Metadata",
        "description": "Retrieves video details and metadata of a given video.",
        "operationId": "getVideosDetails",
        "x-sdk-method-name": "getVideoDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to get details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Status",
        "description": "This endpoint retrieves the current status of a specific video during upload and when upload is complete. To know whether a video is fully processed, including transcoding, use the field <b>isProcessing</b> along with with <b>status</b> state that is returned in the response. <p>For example, if the value of <b>isProcessing</b> is FALSE and the status is <b>Ready</b>, then the video has been fully processed. If the value of <b>isProcessing</b> is TRUE and status is <b>Ready</b>, then it means the video is available for playback but the transcoding process is still in progress.</p><p>The progress of the overall processing of the video can be tracked using the field <b>overallProgress</b> whose value ranges from 0.0 to 1.0 where 1.0 means that the processing is 100% completed.</p><p>Possible status states during upload: [NotUploaded, Uploading, UploadingFinished, Ingesting, Processing]</p><p>Possible final status states once upload is complete: [Canceled, UploadFailed, ProcessingFailed, Ready, ReadyButProcessingFailed]</p>",
        "operationId": "getVideoStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to retrieve status state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoProcessingStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/playback-url": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Embed Summary",
        "description": "This endpoint retrieves basic details , embed playback URL and thumbnail URL for a given video.",
        "operationId": "getVideoPlaybackUrl",
        "x-sdk-method-name": "getVideoEmbedSummary",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoEmbedSummary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/playback-urls": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Playback URLs",
        "description": "Retrieve a list of all playback urls for a given video Id.  This endpoint also accounts for Zone logic.",
        "operationId": "getVideoPlaybackUrls",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "Device user agent. This is used for determining the stream to deliver",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.0.0 Safari/537.36"
            }
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to get urls",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP addresses of user/client with comma separated values (Example: <code>127.0.0.0</code>, <code>10.0.10.124</code>). This is used for <a href=/docs/manage-and-add-zones>Zoning rules</a> in determining the streams to return.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackUrlsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/summary-statistics": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Summary Statistics",
        "description": "Retrieves the summary statistics of a given video and most often relates to viewing statistics such as total views, completion rate, unique views and so forth. You can specify a before and after date range or return the entire summary by leaving before and after dates blank.",
        "operationId": "getVideoSummary",
        "x-sdk-method-name": "getVideoSummaryStatistics",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video for summary retrieval",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "If an after date is supplied, summary statistics are calculated based on views from <em>after</em> this date. If <em>no</em> dates are specified, summary statistics for <em>all</em> time is returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "If a before date is supplied, summary statistics are calculated based on views <em>before</em> this date. If <em>no</em> dates are specified, summary statistics for <em>all</em> time will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoSummaryStats"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/thumbnail-config": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Thumbnail Configuration",
        "description": "The <a href=/reference/downloadthumbnailsheet>Get Video Thumbnail Sheet</a> is returned as a grid view when using this endpoint. Each thumbnail is indexed from left to right, then top to bottom.",
        "operationId": "getVideoThumbnailConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video for thumbnail configuration retrieval",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoThumbnailConfiguration"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/videos/{videoId}": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Replace Video",
        "description": "This endpoint replaces a given video with one that you upload.",
        "operationId": "replaceVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to replace OR id of video when uploading multiple chunks after the first chunk",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video file to upload.<p>Video file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#video</p><p>Please provide Content-Type header for the uploaded video file.</p>",
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "VideoFile"
                ],
                "properties": {
                  "VideoFile": {
                    "type": "string",
                    "description": "Video file to upload. <p>Video file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#video.</p><p>Please provide Content-Type header for the uploaded video file.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "videoFile"
      }
    },
    "/api/v2/uploads/images/{videoId}": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video Thumbnail",
        "description": "Uploads an alternate image to be used as a thumbnail for a specified video. Rev auto-generates a default thumbnail if you do not upload one of your choice. Note that if you replace Rev’s auto-generated thumbnail with one that you upload it will be deleted and may <em>not</em> be recovered.",
        "operationId": "uploadThumbnailFiles",
        "x-sdk-method-name": "uploadThumbnail",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to upload image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ThumbnailFile"
                ],
                "properties": {
                  "ThumbnailFile": {
                    "type": "string",
                    "description": "Thumbnail image file.<p>Accepted file types: [.jpg, .png, .gif]</p><p>Please provide Content-Type header for the uploaded files.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/media/videos/thumbnails/{key}": {
      "head": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Thumbnail",
        "description": "Get the video thumbnail file header info. The <strong>HEAD</strong> method is a pre-flight query that returns the size and mime-type to be added to the response Headers.",
        "operationId": "headVideoThumbnailFile",
        "x-sdk-ignore": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "key",
            "in": "path",
            "description": "File key of the video thumbnail to download.<p>Obtained via the <a href=/reference/getvideosdetails>Get Video Metadata</a> endpoint and the <b>thumbnailKey</b> property that is returned.</p>",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Download Video Thumbnail",
        "description": "Downloads the video thumbnail image file without authorization if Private Metadata Sharing is enabled. If Private Metadata Sharing is not enabled, access to the thumbnail is determined by the video view rights.",
        "operationId": "downloadVideoThumbnailFile",
        "x-sdk-method-name": "downloadThumbnailFileByKey",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "key",
            "in": "path",
            "description": "File key of the video thumbnail to download.<p>Obtained via the <a href=/reference/getvideosdetails>Get Video Metadata</a> endpoint and the <b>thumbnailKey</b> property that is returned.</p>",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/thumbnail": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Thumbnail By ID",
        "description": "Gets the video thumbnail image for a given video.",
        "operationId": "downloadThumbnailFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to get thumbnail image.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
     "/api/v2/videos/{videoId}/thumbnail-sheets/{sheetIndex}": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Thumbnail Sheet",
        "description": "This endpoint is returned when using the <a href=/reference/getvideothumbnailconfig>Get Video Thumbnail Configuration</a> endpoint. It is not intended to be used by itself. ",
        "operationId": "downloadThumbnailSheet",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sheetIndex",
            "in": "path",
            "description": "Index of the thumbnail sheet starting with 1.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }

        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/generate-metadata": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Generate Video Metadata",
        "description": "Creates AI-generated metadata for a given video based on the type specified. You must specify the field type you want to generate (description/title/tags/chapters) or specify <strong>all</strong> to generate all of the fields for the video. This feature requires English transcription and must also be enabled for your Rev account.",
        "operationId": "generateVideoMetadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of fields for which to generate metadata, valid options are description, title, tags, and chapters. Use All to generate all fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aiGeneratedMetadataFieldsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/metadata-generation-status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Metadata Generation Status",
        "description": "Returns the status of AI metadata generation for a specified video.",
        "operationId": "getMetadataGenerationStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to get status of.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aiMetadataGenerationStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/uploads/chapters/{videoId}": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video Chapters",
        "description": "This endpoint uploads a chapter(s) for a specified video. Posting chapters replaces <em>all</em> existing chapters a video contains. There can be multiple chapter titles and start times. The endpoint requires the user have edit rights to the video.",
        "operationId": "uploadvideoChapters",
        "x-sdk-method-name": "uploadVideoChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to upload chapters to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Chapters",
                  "File"
                ],
                "properties": {
                  "Chapters": {
                    "$ref": "#/components/schemas/videoChaptersMetadata"
                  },
                  "File": {
                    "description": "Video chapter image file(s) to upload. <p>Video chapter image file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#image.</p><p>Please provide Content-Type and Content-Disposition headers for the uploaded image file(s). The filename(s) should match the <code>imageFile</code>s specified in the Chapters json payload</p>",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Update Video Chapters",
        "description": "This endpoint uploads and edits a chapter(s) for a specified video. Using the <strong>PUT</strong> method (editing) chapters <em>replaces</em> an existing chapter if it is a duplicate timestamp. <p>New chapters are created if the chapter does not exist at the specified timestamp. There can be multiple chapter titles and start times.</p><p>The endpoint requires the user have edit rights to the video.</p>",
        "operationId": "uploadVideoChaptersUpdate",
        "x-sdk-method-name": "editVideoChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to upload chapters to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Chapters",
                  "File"
                ],
                "properties": {
                  "Chapters": {
                    "$ref": "#/components/schemas/videoChaptersMetadata"
                  },
                  "File": {
                    "type": "string",
                    "description": "Video chapter image file to upload. <p>Video Chapter image file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#image.</p><p>Please provide Content-Type and Content-Disposition headers for the uploaded image file(s). The filename(s) should match the <code>imageFile</code>s specified in the Chapters json payload</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/chapters": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Chapters",
        "description": "Returns all video chapters that have been uploaded for a given video.",
        "operationId": "getVideosChapters",
        "x-sdk-method-name": "getVideoChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to get chapters",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoChaptersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request</br>video id does not exist"
          },
          "401": {
            "description": "Unauthorized error</br>user does not have view rights</br>user not a system user"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Videos"
        ],
        "summary": "Delete Video Chapters",
        "description": "Deletes all (or specified) video chapters that have been uploaded for a given video.",
        "operationId": "deleteVideoChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "List of video chapter start time(s) (comma delimited) to delete. An empty value means to delete <em>all</em> chapters associated to the video.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/supplemental-files/{videoId}": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video Supplemental Files",
        "description": "This endpoint uploads one or more supplemental files to associate with a specified video. Typical file types include PowerPoint and PDF documents that provide a viewer with additional information.",
        "operationId": "upload-supplemental-files",
        "x-sdk-method-name": "uploadSupplementalFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to upload supplemental files",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Files",
                  "SupplementalFiles"
                ],
                "properties": {
                  "Files": {
                    "type": "array",
                    "description": "Supported <a href=/docs/supported-file-types>Supplemental File</a> types you may upload are found in the Technical Requirements guides.<p>Please provide Content-Type header for each file you upload.</p>",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "SupplementalFiles": {
                    "description": "Supplemental files metadata object.  Field name is SupplementalFiles.",
                    "$ref": "#/components/schemas/supplementalFilesMetadata"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "<p>Internal server error</p><p>Errors may include:</p><p>MalformedRequest = Bad request format. Please check your request</p><p>FileNotSupported = Sorry! Cannot upload this file type.</p><p>FileNotSent = The video file was not uploaded.</p><p>UserNotProvided = Unable to upload video. Please ensure that video is associated to a valid user.</p><p>UserDoesNotExist = Unable to upload video. Please ensure that video is associated to a valid user.</p><p>InternalServerError = Unable to process request at this time. Please try again later.</p>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/supplemental-files": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Supplemental Files",
        "description": "Retrieve the supplemental files of a video. This endpoint requires view access and returns a blank array if there are no supplemental files associated to the video.",
        "operationId": "getVideoSupplementalFiles",
        "x-sdk-method-name": "getSupplementalFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get the supplemental files",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplementalFilesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Videos"
        ],
        "summary": "Delete Video Supplemental Files",
        "description": "Deletes all or specific supplemental files for a given video.",
        "operationId": "deleteVideoSupplementalFiles",
        "x-sdk-method-name": "deleteSupplementalFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileIds",
            "in": "query",
            "description": "Provide fileIds separated by a ',' to delete specific supplemental files. If fileIds not provided, then <em>all</em> supplemental files associated to that video will be deleted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/supplemental-files/{fileId}": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Download Video Supplemental File",
        "description": "Downloads a supplemental file based on the video and file Id provided. This endpoint requires view rights for the video.",
        "operationId": "downloadVideoSupplementalFile",
        "x-sdk-method-name": "downloadSupplementalFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "File Id of the video's supplemental file to download",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error <p>Returned if videoId not valid</p>"
          },
          "404": {
            "description": "Resource not found <p>Returned if videoId or fileId not provided</p><p>Returned if no fileId with that name</p>"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/uploads/transcription-files/{videoId}": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video Transcriptions (Closed Captions)",
        "description": "Upload transcriptions / subtitles for a video for hearing impaired viewers or subtitles in different language. Only .srt or .vtt files are supported.",
        "operationId": "uploadTranscriptionFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to set transcription files",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File",
                  "TranscriptionFiles"
                ],
                "properties": {
                  "File": {
                    "type": "array",
                    "description": "Transcription files. <p>Please provide Content-Type header for the uploaded files.</p><p>Accepted values are <code>text/plain</code> or <code>application/octetstream</code></p>",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "TranscriptionFiles": {
                    "$ref": "#/components/schemas/transcriptionFilesMetadata"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "transcriptionFiles"
      }
    },
    "/api/v2/uploads/video-presentations/{videoId}": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video Presentation Chapters",
        "description": "This endpoint uploads a PowerPoint presentation to create chapters for a specified video. <p>Posting chapters replaces <em>all</em> existing chapters a video contains. The first slide begins at 00:00:00 with the rest evenly distributed throughout the duration of the video. The slide titles are the names of the chapter titles. If there are slides without titles, the slide number is the title. The endpoint requires the user have edit rights to the video.</p>",
        "operationId": "uploadPresentationFile",
        "x-sdk-method-name": "uploadVideoPresentationFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to set presentation chapters",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "PresentationFile"
                ],
                "properties": {
                  "PresentationFile": {
                    "type": "string",
                    "description": "Presentation File. <p>Please provide Content-Type header for the uploaded files. Accepted values are text/plain or application/octetstream</p>",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/webcast-branding/{eventId}": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Upload Webcast Branding",
        "description": "This endpoint uploads and updates a webcast branding settings for a specified webcast. <p>The endpoint requires the user have edit rights to the webcast.</p>",
        "operationId": "uploadWebcastBranding",
        "x-sdk-method-name": "uploadEventBranding",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to set the branding",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "LogoImageFile",
                  "BackgroundImageFile",
                  "Branding"
                ],
                "properties": {
                  "LogoImageFile": {
                    "type": "string",
                    "description": "Logo Image File. <p>Logo image file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#image.</p><p>Please provide Content-Type header for the uploaded image file.</p>",
                    "format": "binary"
                  },
                  "BackgroundImageFile": {
                    "type": "string",
                    "description": "Background Image File. <p>Background image image file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#image.</p><p>Please provide Content-Type header for the uploaded image file.</p>",
                    "format": "binary"
                  },
                  "Branding": {
                    "title": "eventBrandingMetadata",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/eventBrandingColors"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "logoImageFilename": {
                            "type": "string",
                            "description": "Logo Image Filename"
                          },
                          "backgroundImageFilename": {
                            "type": "string",
                            "description": "Background Image Filename"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/presentation-status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Presentation Chapter Status",
        "description": "Retrieves the status of all presentation file chapters that have been uploaded for a specified video.<p>Status return values can be [Initialized, InProgress, Completed, Error]</p>",
        "operationId": "getVideoPresentationStatus",
        "x-sdk-method-name": "getVideoPresentationFileStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get the presentation chapter status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoPresentationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/rating": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Update Video Rating",
        "description": "This endpoint is used to submit a numerical rating on a specified video.",
        "operationId": "submitVideoRating",
        "x-sdk-method-name": "rateVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to set rating",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Rating of video. Example, rating=4.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/videoRatingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "rating"
      }
    },
    "/api/v2/videos/{videoId}/comment": {
      "put": {
        "tags": [
          "Videos"
        ],
        "deprecated": true,
        "summary": "Update Video Comments",
        "description": "This endpoint is used to submit a comment on a specified video. The username that submits the comment must exist in Rev.<p>This endpoint will be deprecated in favor of the <a href=/reference/addcomments>Add Video Comments</a> endpoint.</p>",
        "operationId": "submitComments",
        "x-sdk-ignore": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to submit comments for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body to be submitted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/commentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "comment"
      }
    },
    "/api/v2/videos/{videoId}/comments": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Comments",
        "description": "Returns list of comments for a given video.",
        "operationId": "getVideoComments",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get comments",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showAll",
            "in": "query",
            "description": "Default=false. If true, then admin accounts only can see un-redacted values of comments.</br></br>This includes the comment text, isRemoved (signifies a deleted comment), deletedBy (user name that deleted the comment), and deletedWhen (date and time it was deleted).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoCommentsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Videos"
        ],
        "summary": "Delete Video Comments",
        "description": "Delete all comments or specific comments for a given video.",
        "operationId": "deleteVideoComments",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to delete comments",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentIds",
            "in": "query",
            "description": "If commentIds are not provided, then <em>all</em> comments for that video will be deleted. To delete specific comments , provide comma-separated commentIds.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Resource not found error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Add Video Comment",
        "description": "This endpoint is used to add a comment on a specified video. The username that submits the comment must exist in Rev. If a valid commentId is specified in the request, a child comment will be created. If commentId is not specified, a parent comment will be created.",
        "operationId": "addComments",
        "x-sdk-method-name": "addVideoComment",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to submit comments for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body to be submitted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/videoCommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoCommentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Parent comment does not exist.",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "comment"
      }
    },
    "/api/v2/videos/{videoId}/external-access": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video External Access",
        "description": "This endpoint is used to search and paginate through external access entries via an optional query string.",
        "operationId": "getVideoExternalAccess",
        "x-sdk-method-name": "getVideoExternalAccess",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to submit emails for external access",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of video external access entities to get. (By default count is 50)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "If total > count, then provide the scrollId returned from the first request to get the next set of videos like (<code>scrollId=abc</code>)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchExternalAccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, no emails or video ids provided"
          },
          "401": {
            "description": "Unauthorized error.",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Add Video External Access",
        "description": "This endpoint grants external access to a specified video via email address. You can add more than one email address for access to the video.",
        "operationId": "addVideoExternalAccess",
        "x-sdk-method-name": "addVideoExternalAccess",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to submit emails for external access",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body to be submitted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addExternalAccessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request, no emails provided"
          },
          "401": {
            "description": "Unauthorized error.",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "addExternalAccessRequest"
      },
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Renew Video External Access",
        "description": "This endpoint immediately revokes the current access and generates a new access link and expiration date (if one is in effect). It then emails the user(s) with the new link.",
        "operationId": "renewVideoExternalAccess",
        "x-sdk-method-name": "renewVideoExternalAccess",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to submit emails for external access",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body to be submitted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/renewExternalAccessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/renewExternalAccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, no emails provided."
          },
          "401": {
            "description": "Unauthorized error. Parent comment does not exist.",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "renewExternalAccessRequest"
      },
      "delete": {
        "tags": [
          "Videos"
        ],
        "summary": "Delete Video External Access",
        "description": "Revokes all email access to the specified video and also <em>deletes</em> all details in the database. This means you may not renew the external access at a later date. To leave details in place for potential renewal, consider using the <a href=/reference/revokevideoexternalaccess>Revoke Video External Access</a> endpoint instead.",
        "operationId": "deleteVideoExternalAccess",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to delete external access from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body to be submitted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/removeExternalAccessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad request, no emails provided."
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Resource not found error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/external-access/revoke": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Revoke Video External Access",
        "description": "Immediately revokes all email access to the specified video but leaves details in place in the database in the event you want to renew them. To delete all details from the database as well, use <a href=/reference/deletevideoexternalaccess>Delete Video External Access</a>.",
        "operationId": "revokeVideoExternalAccess",
        "x-sdk-method-name": "revokeVideoExternalAccess",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to submit emails for external access",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body to be submitted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/revokeExternalAccessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request, no emails provided."
          },
          "401": {
            "description": "Unauthorized error. Parent comment does not exist.",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "revokeExternalAccessRequest"
      }
    },
    "/api/v2/videos/{videoId}/transcode-on-demand": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Transcode Video",
        "description": "Transcode video on-demand with new presets. This endpoint bypasses the need to upload the video again.",
        "operationId": "transcodeVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to transcode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/convert-dual-streams-to-switched-stream": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Convert Dual Stream to Switched (Single) Stream",
        "description": "Converts a dual-stream video to a switched-stream (single) video. This endpoint only works for dual stream videos. <p>When you run this API, the MP4 switched-stream version is marked as the original and the HLS switched-stream version remains.</p><p>The HLS dual-stream version is deleted.</p><p>The <strong>hasDualStreams</strong> and <strong>isConvertedToSwitched</strong> parameters are updated accordingly in the <a href=/reference/getvideosdetails>Get Video Details/Metadata</a> and <a href=/reference/searchvideo>Search Video</a> endpoints.</p>",
        "operationId": "convertDualStreamToSwitchedStream",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to convert",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/search": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Search Videos",
        "description": "This endpoint mimics the search control in the Rev portal. All results are based on the authenticated user making the API request.",
        "operationId": "searchVideo",
        "x-sdk-method-name": "searchVideos",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the results based on the channels and categories the Principal is subscribed OR apply the recommendation logic which boosts search results based on recent viewing history using up to the last 10 videos viewed by a user.",
            "schema": {
              "type": "string",
              "enum": [
                "mySubscriptions",
                "myRecommendations"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of video (Live/Vod)",
            "schema": {
              "type": "string",
              "enum": [
                "live",
                "vod"
              ]
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "List of Category Ids to specify searching videos only in those categories.<p>Example: <code>Categories=a0e5cbf6-95cb-46e7-8600-4c07bc31f80b, b1f5cbf6-95cb-46e7-8600-4c07bc31g9pc.</code></p><p> Pass a blank entry to return uncategorized videos. Example: <code>Categories=</code></p>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploaders",
            "in": "query",
            "description": "Use the first and last name of the uploader or an exact match of the uploader's username. Note that partial matches may still be returned. For example, uploaders=\"john doe\" will retrieve all videos uploaded by a user with the first and last name \"john doe\". To return an exact match, you must use the uploaderIds query string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploaderIds",
            "in": "query",
            "description": "Uploader GUIDs to get specific videos uploaded by these users. Example: <code>UploaderIds=abc, xyz</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owners",
            "in": "query",
            "description": "Retrieve videos owned by users by searching with the username as the search criterion. Example: <code>owners=johndoe,janedoe</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ownerIds",
            "in": "query",
            "description": "Owner GUIDs to get specific videos owner by these users. Example: <code>ownerIds=abc, xyz</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of video (Active/Inactive)",
            "schema": {
              "$ref": "#/components/schemas/videoActiveStatus"
            }
          },
          {
            "name": "fromPublishedDate",
            "in": "query",
            "description": "Valid video published date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toPublishedDate",
            "in": "query",
            "description": "Valid video published date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromUploadDate",
            "in": "query",
            "description": "Valid video upload date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toUploadDate",
            "in": "query",
            "description": "Valid video upload date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromModifiedDate",
            "in": "query",
            "description": "Valid video modified date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toModifiedDate",
            "in": "query",
            "description": "Valid video modified date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of videos to get. (By default count is 50)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "If totalVideos > count, then provide the scrollId returned from the first request to get the next set of videos like (<code>scrollId=abc</code>)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exactMatch",
            "in": "query",
            "description": "If true, search is performed as exact match on title, tags, categories, custom field values and uploader.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "videoIds",
            "in": "query",
            "description": "Comma separated list of videoIds to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/videoSearchSortField"
          },
          {
            "$ref": "#/components/parameters/sortDirection"
          },
          {
            "name": "unlisted",
            "in": "query",
            "description": "If provided, the query string fetches the unlisted setting of the video. This can be listed only, unlisted only, or to return all. Default setting fetches the listed only videos.",
            "schema": {
              "type": "string",
              "enum": [
                "listed",
                "unlisted",
                "all"
              ]
            }
          },
          {
            "name": "searchField",
            "in": "query",
            "description": "If provided, the query results are fetched on the provided searchField only. If the exactMatch flag is also set along with searchField, then the results are fetched for an exact match on the provided searchField only.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "tags",
                "categories",
                "uploader"
              ]
            }
          },
          {
            "name": "includeTranscriptSnippets",
            "in": "query",
            "description": "If true, search results include inner hits from transcription files. Default is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "recommendedFor",
            "in": "query",
            "description": "Show recommended videos for the specified Username. Videos returned are based on the user’s last 10 viewed videos. Must be Account Admin or Media Admin to use this query. Sort order must be _score. User must exist.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hasHls",
            "in": "query",
            "description": "If true, only HLS videos are returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "If channelId provided, videos in that particular channel are returned. User should have rights to the channel.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessControl",
            "in": "query",
            "description": "If provided, videos will be filtered by access control.",
            "schema": {
              "$ref": "#/components/schemas/videoAccessControl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchVideosResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Public Videos",
        "description": "Returns a list of public videos by category, status, and related metadata.",
        "operationId": "getVideos",
        "x-sdk-method-name": "getPublicVideos",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "category",
            "in": "query",
            "description": "List of Category Ids to specify searching videos only in those categories.<p>Example: <code>Categories=a0e5cbf6-95cb-46e7-8600-4c07bc31f80b, b1f5cbf6-95cb-46e7-8600-4c07bc31g9pc.</code></p><p> Pass a blank entry to return uncategorized videos. Example: <code>Categories=</code></p>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicVideoListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Add Video Link",
        "description": "Creates a manually entered URL. Live and Stored video links are supported.",
        "operationId": "createVideoLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Video metadata object. For linkedUrl:Type=Live/VodIsMulticast= true/falseEncodingType= h264/hls/hds/h264ts /mpeg4/mpeg2/wm",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createLinkVideoMetadata"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoUploadResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "metadata"
      }
    },
    "/api/v2/videos/deleted": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Deleted Videos",
        "description": "Returns a list of videos which were deleted, made inactive, or made inaccessible to all users in the last 30 days.",
        "operationId": "getDeletedVideos",
        "x-sdk-method-name": "getDeletedVideos",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Date from which videos were deleted.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Date to which videos were deleted. Default to now.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by deleted video state.",
            "schema": {
              "type": "string",
              "enum": [
                "Deleted",
                "ChangedToPrivate",
                "ChangedToInactive"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchDeletedVideosResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/download": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Download Video",
        "description": "This endpoint downloads a video asset from Rev. The original file upload is downloaded.",
        "operationId": "downloadVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to download",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "video/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/oembed": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video oEmbed",
        "description": "Gets oEmbed JSON data for a given video for video embedding. This is typically used for integrations into other social systems with activity feeds so users can watch video inline of an activity feed. The Rev Shared URL is also an acceptable format as noted in the example(s) below.<p>This API does not require an authorization header.</p>",
        "operationId": "oembed",
        "x-sdk-method-name": "getOembed",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Rev URL of video to embed must be <code>URL (Percent) Encoded</code>. Please refer to https://en.wikipedia.org/wiki/Percent-encoding for details and example usage above.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Height of video to embed",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Width of video to embed",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "autoplay",
            "in": "query",
            "description": "Set if video autoplays on load",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoOembedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/transcription": {
      "post": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "RevIQ"
        ],
        "summary": "Transcribe Video",
        "description": "This endpoint selects a transcription integration and generates a transcription file for a specified video.",
        "operationId": "transcribeVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to transcribe",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video to transcribe using the language and service type in the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transcriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transcriptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "transcriptionRequest"
      }
    },
    "/api/v2/videos/{videoId}/transcriptions/{transcriptionId}/status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "RevIQ"
        ],
        "summary": "Get Video Transcription Status",
        "description": "Get the status of a video transcription.",
        "operationId": "getVideoTranscriptionStatus",
        "x-sdk-method-name": "getTranscriptionStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get status",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transcriptionId",
            "in": "path",
            "description": "Transcription Id of video to get status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transcriptionStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/transcription-files/{languageId}": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Download Video Transcription File",
        "description": "Downloads a video transcription file.",
        "operationId": "downloadVideoTranscriptionFile",
        "x-sdk-method-name": "downloadTranscriptionFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to download",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageId",
            "in": "path",
            "description": "Language Id of the video transcription to download",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/translations": {
      "post": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "RevIQ"
        ],
        "summary": "Translate Video",
        "description": "Translates a specified video. You must include both the source language and an array of target languages to translate the source language to. You must also have the <a href=/docs/roles-and-permissions#granular-roles-and-permissions>Rev IQ User</a> role to use this function.",
        "operationId": "translateVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to translate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video to translate using the source language and target languages in the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/translationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "translationRequest"
      }
    },
    "/api/v2/videos/{videoId}/translations/{language}/status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "RevIQ"
        ],
        "summary": "Get Video Translation Status",
        "description": "Get status of a video translation.",
        "operationId": "getVideoTranslationStatus",
        "x-sdk-method-name": "getTranslationStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get status",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "language Id of video to get status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translationStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/transcription-files": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Transcription Files",
        "description": "Get transcription files of a video.",
        "operationId": "getVideoTranscriptionFiles",
        "x-sdk-method-name": "getTranscriptionFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get the transcription files",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transcriptionFilesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Videos"
        ],
        "summary": "Delete Video Transcription Files",
        "description": "Deletes all or specific transcription files for a given video.",
        "operationId": "deleteTranscriptionFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Provide locales separated by a ',' to delete specific transcription files. If locale not provided, then <em>all</em> transcription files associated to that video are deleted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/user-tags": {
      "post": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "RevIQ"
        ],
        "summary": "Tag Users in Video",
        "description": "This endpoint sends a video for Facial Recognition and tags the user accounts recognized in the video. The Rev account must have <a href=/docs/facial-recognition>Facial Recognition</a> activated and the user account must be enabled for recognition (i.e., profile not opted out and have a recognizable profile picture uploaded). You must also have the <a href=/docs/roles-and-permissions#granular-roles-and-permissions>Rev IQ User</a> role to use this function.",
        "operationId": "tagUsersInVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to use in tagging users",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad request<p>This account has insufficient Rev IQ credits to complete the action.</p><p>Video is too large for user tagging.</p><p>Video codec or container is incorrect.</p>",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error<p>Rev IQ/Facial Recognition is not enabled for this account.</p><p>Insufficient rights to this video. You do not have edit rights.</p>",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/user-tags/status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "RevIQ"
        ],
        "summary": "Get User Tag Status in Video",
        "description": "Get tagging status of users in a video.<p>Possible status states include: [InProgress, Failed, Finished]",
        "operationId": "getVideoTaggingStatus",
        "x-sdk-method-name": "getVideoUserTaggingStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to use in tagging users",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoTaggingStatus"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/approval/templates": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Approval Processes List",
        "description": "Gets a list of previously created approval processes for a user. This endpoint is for the user that is authenticated to Rev making this API call.",
        "operationId": "getApprovalProcess",
        "x-sdk-method-name": "getUserApprovalProcesses",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/approvalTemplate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/approval/submitted/{templateId}": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Send Video for Approval",
        "description": "Submits a video for approval to an approver.",
        "operationId": "sendVideoApproval",
        "x-sdk-method-name": "requestApproval",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to approve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of approval process template used to approve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/approval/pending": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Videos Pending Approval",
        "description": "Get a list of videos pending approval from an approver.",
        "operationId": "getPendingApprovalVideos",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of videos to get. Should not exceed 250 for better performance (By default count is 50)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/videoPendingApprovalItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/approval/approved": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Approve Video",
        "description": "Approve a specified video.",
        "operationId": "approveVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to approve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/videoApprovalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/approval/rejected": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Reject Video",
        "description": "Reject a video approval.",
        "operationId": "rejectVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to reject",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/videoApprovalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/search/suggestions": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Search Suggestions for Videos",
        "description": "This endpoint allows you to enter a string of 2-15 characters to return video search suggestions (up to 10) based on that string (for autocomplete).  The suggestions returned all begin with the string entered and results directly mimic using the Rev UI search bar.",
        "operationId": "searchSuggestedVideos",
        "x-sdk-method-name": "getAutocompleteSuggestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search string with minimum length of 2 characters.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not found.",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/continue-watching": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get User Pending Completion Status By ID",
        "description": "This endpoint retrieves the timestamp of the authenticated user's last playback session for a given video. i.e. to allow the user to continue watching where they left off. If there is no previous partial playback session then this endpoint returns an empty response.",
        "operationId": "getContinueWatchingVideo",
        "x-sdk-method-name": "getContinueWatchingStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get watch progress.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userPendingCompletionStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/continue-watching": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get User Pending Completion Videos",
        "description": "This endpoint allows you to provide the ability to resume watching a video(s) for a user by retrieving the user's pending completion videos.  This endpoint retrieves a list of video details (up to an array of 18) that the user paused while watching.",
        "operationId": "getContinueWatchingVideos",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pausedVideoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/feature-settings": {
      "get": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "Videos",
          "Administration"
        ],
        "summary": "Get Video Feature Settings",
        "description": "Returns all the account-level video settings and features that are available and/or enabled for videos in your Rev portal, including any custom settings.  If you specify a video Id, it returns the features and settings that are applied for just that video.",
        "operationId": "getVideoFeatures",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "query",
            "description": "Id of video to get VOD features. It is optional.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/vc/start-recording": {
      "post": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "Recording"
        ],
        "summary": "Start Video Conference Recording",
        "description": "Video Conference endpoints allow you to record SIP-based video conference meetings and store/modify/search the resulting VOD videos in Rev. The VC endpoints are available only with a Rev-Cloud subscription.<p>Refer to <a href=/docs/video-conference-vc-integrations>Video Conference (VC)Integrations</a> for supported endpoints.</p><p>This endpoint starts a video conference recording. A SIP address and account access to the video conference recording integration is required.</p>",
        "operationId": "startRecording",
        "x-sdk-method-name": "startVcRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "This contains the details required to start VC recording",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/startVcRecordingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/startVCRecordingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startVcRecordingRequest"
      }
    },
    "/api/v2/vc/recording-status/{videoId}": {
      "get": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "Recording"
        ],
        "summary": "Get Video Conference Recording Status",
        "description": "Get status of video conference recording.",
        "operationId": "recordingStatus",
        "x-sdk-method-name": "getVcRecordingStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get status.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/vc/stop-recording": {
      "post": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "Recording"
        ],
        "summary": "Stop Video Conference Recording",
        "description": "Stop a video conference recording.",
        "operationId": "stopRecording",
        "x-sdk-method-name": "stopVcRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "This contains the details required to stop VC recording",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stopVCRecordingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stopVCRecordingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "stopVCRecordingRequest"
      }
    },
    "/api/v2/pp/start-recording": {
      "post": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "Recording"
        ],
        "summary": "Start/Schedule Presentation Profile Recording",
        "description": "This endpoint starts or schedules a Presentation Profile recording. It does <em>not</em> reserve the source device or the recording device. It assumes that the source device is live and a recording device is available when the recording is scheduled to start.",
        "operationId": "startScheduledRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "This contains the details required to start/schedule presentation profile recording",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/startScheduledRecordingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/startScheduledRecordingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startScheduledRecordingRequest"
      }
    },
    "/api/v2/pp/stop-recording": {
      "post": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "Recording"
        ],
        "summary": "Stop/Cancel Presentation Profile Recording",
        "description": "This endpoint stops or cancels (if it has not started) a Webcast recording from a Presentation Profile. It requires the scheduledRecordingId returned from the Start/Schedule Recording endpoint.",
        "operationId": "stopScheduledRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "This contains the details required to stop the presentation profile recording or cancel it if it's not started yet.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stopScheduledRecordingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stopScheduledRecordingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "scheduledRecording"
      }
    },
    "/api/v2/pp/recording-status/{scheduledRecordingId}": {
      "get": {
        "tags": [
          "Videos"
        ],
        "x-sdk-tags": [
          "Recording"
        ],
        "summary": "Get Presentation Profile Recording Status",
        "description": "Get the status of the presentation profile recording. Status responses include [Scheduled, Starting, Recording, Stopping, Failed, Cancelled].",
        "operationId": "scheduledRecordingStatus",
        "x-sdk-method-name": "getScheduledRecordingStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "scheduledRecordingId",
            "in": "path",
            "description": "Id of the scheduled recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduledRecordingStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/report": {
      "get": {
        "tags": [
          "Videos"
        ],
        "deprecated": true,
        "summary": "Get Video Report (Deprecated)",
        "description": "This is a deprecated endpoint. Use <a href=/reference/postvideoreport>Get Video Report</a> instead.",
        "operationId": "getVideoReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoIds",
            "in": "query",
            "description": "Id of video to return reporting data for. If no Ids are specified, data for all videos in the account are returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "If after date is used, only video views with a start date <em>after</em> the specified date (up to 31 days) are included in the response. If <em>both</em> dates are used, video views between the specified dates are returned, not exceeding 31 days. If <em>no</em> dates are specified, video views between the current date and 31 days in the past from the start date are returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "If before date is used, only video views with a start date <em>before</em> the specified date (up to 31 days) are included in the response. If <em>both</em> dates are used, video views between the specified dates are returned, not exceeding 31 days. If <em>no</em> dates are specified, video views between the current date and 31 days in the past from the start date are returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/videoViewReportEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Report",
        "description": "This endpoint returns detailed viewing information for one or more videos. The report includes individual video viewing sessions, along with information on whether each user completed the video.<p>If video Ids are not specified in the call, the response includes data for every video in your Rev account. Maximum duration for a reporting period is 31 days.",
        "operationId": "postVideoReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/videosReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/report": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Unique Sessions Report",
        "description": "This endpoint returns detailed viewing information for a video. It is limited to one session per user within a given time range. It reports the individual viewing session with the maximum viewing time for each user who watched the video, and whether or not each user completed the video. Up to 500 responses can be generated with supported scrolling. Guest user sessions are only reported for authenticated guests.",
        "operationId": "uniqueVideoSessionsReport",
        "x-sdk-method-name": "getUniqueSessionsReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get report for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/videoReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/users/{userId}/status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Watch Report",
        "description": "Get status on whether or not a specific user has completed watching a video.",
        "operationId": "userVideoCompletion",
        "x-sdk-method-name": "getUserWatchReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get status for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of user to get status for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userVideoCompletionStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/migration": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Migrate Video",
        "description": "This endpoint is used during migrations to Rev from another system. During video import, you may want to retain the original uploader, upload date, and publish date. As a result, this API allows you to set only these fields to do so.<p>You can also use this endpoint to edit only these fields for previously added videos in the system if needed. This avoids the requirement of setting all fields when using other video editing endpoints.</p>",
        "operationId": "migrateVideo",
        "x-sdk-method-name": "editVideoMigration",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to migrate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Migration request of video. uploadedBy is the user name to update.whenUploaded is the upload date and time to update.Example: 2015-02-26 15:53:12",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/videoMigrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/playlists": {
      "get": {
        "tags": [
          "Playlists"
        ],
        "summary": "Get Playlists",
        "description": "Get list of all playlists.",
        "operationId": "getPlaylists",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/accountFeaturedVideosAndPlaylists"
                    },
                    {
                      "$ref": "#/components/schemas/accountPlaylists"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Playlists"
        ],
        "summary": "Add Playlist",
        "description": "Create a new playlist.",
        "operationId": "createPlaylist",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/playlistRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createPlaylistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/playlists/{playlistId}": {
      "get": {
        "tags": [
          "Playlists"
        ],
        "summary": "Get Playlist Information with Video Details",
        "description": "Returns a specified playlist and includes all the videos that are part of the playlist. It also returns the playlist type (static or dynamic), the video count, playback URL, and details of the search query if it is a dynamic playlist. You must have access to the playlist or an error is returned.",
        "operationId": "getPlaylistDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "playlistId",
            "in": "path",
            "description": "Id of the playlist to get details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of videos to get. (By default count is 50)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "If totalVideos > count, then provide the scrollId returned from the first request to get the next set of videos like (<code>scrollId=abc</code>)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playlistDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Playlists"
        ],
        "summary": "Update Playlist",
        "description": "Edit videos in a playlist.",
        "operationId": "editPlaylist",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "playlistId",
            "in": "path",
            "description": "Id of Playlist to edit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video Ids to edit in the playlist and the action taken (add or remove).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editPlaylistRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "editPlaylistMembers"
      },
      "delete": {
        "tags": [
          "Playlists"
        ],
        "summary": "Delete Playlist",
        "description": "Deletes a playlist.",
        "operationId": "deletePlaylist",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "playlistId",
            "in": "path",
            "description": "Id of playlist to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/playlists/featured-playlist": {
      "put": {
        "tags": [
          "Playlists"
        ],
        "summary": "Update Featured Playlist",
        "description": "Edit the Rev Featured Playlist on the Home Page. You must have Account or Media Admin permissions.",
        "operationId": "editFeaturedPlaylist",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Video Ids to edit in the playlist and the action taken (add or remove).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editFeaturedPlaylistRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "editPlaylistMembers"
      }
    },
    "/api/v2/scheduled-events": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcasts By Time Range",
        "description": "Gets a list of webcasts for a given time duration.",
        "operationId": "getEventsList",
        "x-sdk-ignore": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "after",
            "in": "query",
            "description": "Events with an end date after specified date are included in the response. If date not included, this will by default be set to either 12 months prior to the before parameter, or the current date and time if before is not set.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Events with a start date on or before specified date are included in the response. If date not included, this will by default be set to either 12 months after the after parameter, or 12 months from the current date and time if after is not set.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "If provided, the query results are sorted based on field(startDate, title). Default is set to startDate.",
            "schema": {
              "type": "string",
              "enum": [
                "startDate",
                "title"
              ],
              "default": "startDate"
            }
          },
          {
            "$ref": "#/components/parameters/sortDirection"
          },
          {
            "name": "isFeatured",
            "in": "query",
            "description": "When the search term is provided, a value of true retrieves all events marked as featured, while a value of false retrieves all events that are not featured. If the search term is omitted, all events are returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/eventList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Create Webcast",
        "description": "Creates a new webcast.",
        "operationId": "createEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Event to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createEventResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "event"
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Webcasts By Custom Field or Date Range",
        "description": "This endpoint deletes all events for a given date range or custom field query. The response returns a jobId and a count of webcasts to be deleted. The jobId can be used to check the <a href=/reference/getdeletewebcastsjobstatus>status</a> of the deletion.",
        "operationId": "deleteEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Fields that are going to be used to search Webcasts that are to be deleted.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteEventsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteEventsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "event"
      }
    },
    "/api/v2/search/scheduled-events": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Search Webcasts By Custom Field or Date Range",
        "description": "This endpoint searches all events for a given date range or custom field query.",
        "operationId": "searchWebcasts",
        "x-sdk-method-name": "searchEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Search parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/searchEventsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchEventsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Details",
        "description": "Get webcast settings and metadata details for a specified webcast.",
        "operationId": "getEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Update Webcast",
        "description": "Edit an existing webcast.",
        "operationId": "editEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Event to update in the system.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "event"
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Webcast",
        "description": "Delete a webcast.",
        "operationId": "deleteEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Patch Webcast",
        "description": "Partially edits the details of a webcast. You do not need to provide the fields that you are not changing.<p>Webcast <strong>status</strong> determines which fields are modifiable and when. <p>If the webcast pre-production or main event is <strong>in progress</strong>, only fields available for inline editing may be patched/edited.</p><p>If the webcast main event has been run once, only fields available <strong>after</strong> the webcast has ended are available for editing. That includes <em>all</em> fields with the <em>exception</em> of start/end dates, lobbyTimeMinutes, preProduction, duration, userIds, and groupIds.</p><p>If the webcast <strong>end time</strong> has passed and is <strong>Completed</strong>, only edits to linkedVideoId and redirectVod are allowed.</p><p>Event Admins can be removed using their email addresses as path pointer for the fields 'EventAdminEmails' and 'EventAdmins', provided that all of the Event Admins associated with the webcast have email addresses. This is also applicable for the field 'Moderators'.</p><p>Keep in mind that Access Controls are strictly dictated by <a href=/docs/roles-and-permissions>Roles and Permissions.</a></p><p>Please refer to http://jsonpatch.com/ for the format of the request body.</p><strong>Examples:</strong><p>using EventAdmins: [{ 'op': 'remove', 'path': '/EventAdmins/Email', 'value': 'x1@test.com' }]</p><p>using EventAdminEmails: [{ 'op': 'remove', 'path': '/EventAdminEmails', 'value': 'x2@test.com' }]</p><p>using Moderators: [{ 'op': 'remove', 'path': '/Moderators/Email', 'value': 'x3@test.com' }]</p>",
        "operationId": "patchWebcast",
        "x-sdk-method-name": "patchEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Webcast details to update. Please refer to http://jsonpatch.com/ for the format of the request body.<p>Patch operations on Webcast details editable fields are similar to the Edit Webcast</p><p>Operations supported: add,remove,copy,replace,test,move.</p>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "409": {
            "description": "Conflict error"
          },
          "500": {
            "description": "Internal server error"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/access-control": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Update Webcast Access Control",
        "description": "Edits access control entities of an existing webcast.",
        "operationId": "editEventControlEntities",
        "x-sdk-method-name": "editEventAccessControl",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Access Control entities to update for event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eventAccessControlEntitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "eventAccessControl"
      }
    },
    "/api/v2/scheduled-events/{eventId}/is-public": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Public Webcast Status",
        "description": "Returns true if the webcast is Public or an unauthorized HTTP Status Code if it is Private for security reasons.",
        "operationId": "verifyEventPublic",
        "x-sdk-method-name": "verifyEventPublic",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webcastIsPublicResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/delete-status/{jobId}": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Delete Webcasts Job Status",
        "description": "Get the status of the <a href=/reference/deleteevents>Delete Webcasts By Custom Field or Date Range</a> job.<p>Status states returned can be [Initialized, InProgress, Completed]",
        "operationId": "getDeleteWebcastsJobStatus",
        "x-sdk-method-name": "getDeleteEventsStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "jobId returned in <a href=/reference/deleteevents>Delete Webcasts By Custom Field or Date Range</a> endpoint",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteWebcastsJobStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/presentation/{eventId}": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Upload Webcast Presentation File",
        "description": "Upload a presentation file for a webcast.",
        "operationId": "uploadpresentationfile-1",
        "x-sdk-method-name": "uploadPresentationFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to upload presentation file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "PresentationFile"
                ],
                "properties": {
                  "PresentationFile": {
                    "type": "string",
                    "description": "Presentation file. Accepted file types include .ppt, .pptx. <p>Please provide Content-Type header for the uploaded files.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/presentation": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Presentation File",
        "description": "Get the current presentation file for a webcast.",
        "operationId": "downloadPresentationFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to get the current presentation file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Webcast Presentation File",
        "description": "Delete the current presentation file for a webcast.",
        "operationId": "deletePresentationFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to delete the current presentation file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/background-image/{eventId}": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Upload Webcast Background Image",
        "description": "Upload background image file for a webcast. Note that when you upload a background image Rev always scales it to fit the various screen sizes. When a background image is returned in a subsequent call, the available scale sizes available are also returned.",
        "operationId": "uploadBackgroundFile",
        "x-sdk-method-name": "uploadBackgroundImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to upload image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ImageFile"
                ],
                "properties": {
                  "ImageFile": {
                    "type": "string",
                    "description": "Background image file. View <a href=/docs/supported-file-types>Supported File Types</a> in Technical Requirements guide for accepted image types.<p>Please provide Content-Type header for the uploaded files.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/background-image": {
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Webcast Background Image",
        "description": "Delete the current background image for a webcast.",
        "operationId": "deleteBackgroundImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the webcast to delete the background image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/webcast-producer-bgimage/{eventId}": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Upload Producer Webcast Layout Background Image",
        "description": "Upload an image file to use as a background in a Producer webcast layout.",
        "operationId": "uploadProducerWebcastBackgroundFile",
        "x-sdk-method-name": "uploadProducerWebcastBackgroundImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the Producer webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ImageFile"
                ],
                "properties": {
                  "ImageFile": {
                    "type": "string",
                    "description": "Background image file. Accepted image files are png, jpeg, and jpg.",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "415": {
            "description": "Unsupported media type",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/webcast-producer-bgimage": {
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Producer Webcast Layout Background Image",
        "description": "Delete a background image from a Producer webcast layout.",
        "operationId": "deleteProducerBackgroundImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the Producer webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageIds",
            "in": "query",
            "description": "If imageIds are not provided, then <em>all</em> layout background images for that Producer webcast are deleted.</br></br>To delete specific images, provide comma-separated imageIds. Use [Get Webcast Details](ref:getevent) to obtain imageIds from the <strong>producerBgImages</strong> object.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/questions": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Q&A Report",
        "description": "Get questions and answers report of a specified webcast.",
        "operationId": "getEventQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get Q&A report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/eventQuestion"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Add Webcast Question",
        "description": "Adds a question to a webcast.",
        "operationId": "putEventQuestion",
        "x-sdk-method-name": "addEventQuestion",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to add a question",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Question to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addEventQuestionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addEventQuestionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "question"
      }
    },
    "/api/v2/scheduled-events/{eventId}/questions/{questionId}/answer": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Add Webcast Answer",
        "description": "Add answer to a webcast question.",
        "operationId": "putEventQuestionAnswer",
        "x-sdk-method-name": "addEventAnswer",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "questionId",
            "in": "path",
            "description": "Id of the question to add answer to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Question to add.Valid values for CloseReason parameter are Declined/FollowUp/Answered/RepliedDirectly",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addEventAnswerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "answer"
      }
    },
    "/api/v2/scheduled-events/{eventId}/poll-results": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Poll Report",
        "description": "Get poll(s) report for a specified webcast.",
        "operationId": "getEventPolls",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get poll report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventPoll"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/comments": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Comments Log",
        "description": "Get comments log for a specified webcast.",
        "operationId": "getEventComments",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of comments to return. The default is 10000 if not specified. Can use with scrollId on return. Example: If totalComments > Count/Size, then provide the scrollId returned from the first request to get the next set of comments. (e.g. scrollId=n)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/eventComment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid scroll id error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/comments/{commentId}/hide": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Hide Webcast Comment",
        "description": "Hide specific comment for a specified webcast.",
        "operationId": "hideWebcastComment",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Id of the comment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {}
          },
          "400": {
            "description": "Invalid event or comment or event not in progress",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
	  "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Unhide Webcast Comment",
        "description": "Unhide specific comment for a specified webcast.",
        "operationId": "unhideWebcastComment",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Id of the comment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {}
          },
          "400": {
            "description": "Invalid event or comment or event not in progress",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/reactions": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast User Reactions Summary Report",
        "description": "Get user reactions to a specified webcast event.",
        "operationId": "getEventReactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the event to get Reactions report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reactionsSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/users/{userId}/mute": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Mute Webcast Attendee",
        "description": "Mute attendee for a specified webcast.",
        "operationId": "muteWebcastAttendee",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {}
          },
          "400": {
            "description": "Invalid event or user or event not in progress",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
	  "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Unmute Webcast Attendee",
        "description": "Unmute attendee for a specified webcast.",
        "operationId": "unmuteWebcastAttendee",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {}
          },
          "400": {
            "description": "Invalid event or user or event not in progress",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/status": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Status",
        "description": "Get current webcast status for a given webcast.",
        "operationId": "getEventStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/playback-url": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Playback URLs",
        "description": "Get a list of all playback urls for a given webcast.",
        "operationId": "getPlaybackUrl",
        "x-sdk-method-name": "getEventPlaybackUrls",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "Device user agent. This is used for determining the stream to deliver",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.0.0 Safari/537.36"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get urls",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP addresses of user/client with comma separated values (Example: <code>127.0.0.0</code>, <code>10.0.10.124</code>). This is used for <a href=/docs/manage-and-add-zones>Zoning rules</a> in determining the streams to return.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackUrlsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/start": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Start Webcast",
        "description": "Starts a webcast. <p>If attempts to start an event that uses live subtitles when the account has no viewing hours. Returns 401 unauthorized error with response message, 'This event requires viewing hours. Please disable subtitles or contact your Rev Admin.'</p>",
        "operationId": "startEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to start",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preProduction",
            "in": "query",
            "description": "Default=false. If true, a Pre-Production webcast is started.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/startWebcastRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "sbmlRequest"
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "End Webcast",
        "description": "Ends a webcast.",
        "operationId": "endEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to end",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preProduction",
            "in": "query",
            "description": "Default=false. If true, a Pre-Production webcast is ended.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "gracefulEnd",
            "in": "query",
            "description": "Default=false. If true, webcast is ended after a delay of 15s. This is currently only available to Partner accounts.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/broadcast": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Start Broadcasting Webcast",
        "description": "Start broadcasting a webcast.",
        "operationId": "broadcastEvent",
        "x-sdk-method-name": "startBroadcasting",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to start broadcasting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Stop Broadcasting Webcast",
        "description": "Stop broadcasting a webcast.",
        "operationId": "pauseBroadcastEvent",
        "x-sdk-method-name": "stopBroadcasting",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to stop broadcasting",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gracefulEnd",
            "in": "query",
            "description": "Default=false. If true, webcast broadast is stopped after a delay of 15s. This is currently only available to Partner accounts.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/record": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Start Webcast Recording",
        "description": "Start recording a webcast. <strong>Important:</strong> If <code>disableAutoRecording=false</code> in <a href=/reference/createevent>Create Webcast</a> and/or <a href=/reference/editevent>Update Webcast</a>, you cannot use this endpoint.  An error message is generated if you attempt to do so.",
        "operationId": "startRecordingEvent",
        "x-sdk-method-name": "startRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to start recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Stop Webcast Recording",
        "description": "Stop recording a webcast. <strong>Important:</strong> If <code>disableAutoRecording=false</code> in <a href=/reference/createevent>Create Webcast</a> and/or <a href=/reference/editevent>Update Webcast</a>, you cannot use this endpoint.  An error message is generated if you attempt to do so.",
        "operationId": "stopRecordingEvent",
        "x-sdk-method-name": "stopRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to stop recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/linked-video": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Update Webcast Video Link",
        "description": "This endpoint updates a video that was previously linked to from a webcast.",
        "operationId": "updateLinkedVideo",
        "x-sdk-method-name": "editVideoLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to update video link",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Linked video settings to update for event.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eventLinkedVideo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "eventLinkedVideo"
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Webcast Video Link",
        "description": "This endpoint deletes a video link from a Webcast.",
        "operationId": "deleteLinkedVideo",
        "x-sdk-method-name": "deleteVideoLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to delete the current linked video file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/post-event-report": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Attendees Report",
        "description": "Get attendees for a completed webcast. You may specify Pre-Production versus Main Event.",
        "operationId": "getPostEventSessions",
        "x-sdk-method-name": "getEventAttendees",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get attendee report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postEventSessionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postEventSessionsBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/report": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "deprecated": true,
        "summary": "Get Webcast Attendees Report (Deprecated)",
        "description": "This is a deprecated endpoint.  Use <a href=/reference/getposteventsessions>Get Webcast Attendees Report</a> instead.",
        "operationId": "getEventReport",
        "x-sdk-ignore": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get the attendee report",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventSessionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/real-time/attendees": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Attendees Realtime",
        "description": "Retrieves real-time attendees of a running webcast.",
        "operationId": "getRealtimeAttendeesSearchRequest",
        "x-sdk-method-name": "getEventAttendeesRealtime",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the currently running webcast to get attendees",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains the details to search the real-time attendees of a webcast.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/searchRealtimeAttendeesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchRealtimeAttendeesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/registrations": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "x-sdk-tags": [
          "Guest Registration"
        ],
        "summary": "Add Guest Registration",
        "description": "Register one or more attendees/guest users for an upcoming Public webcast. Make sure you first enable Public webcast pre-registration before adding registrations.",
        "operationId": "createGuestWebcastUser",
        "x-sdk-method-name": "createEventGuestUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the upcoming public webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Guest user to pre-register to the Public webcast",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/guestUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/guestUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Webcasts"
        ],
        "x-sdk-tags": [
          "Guest Registration"
        ],
        "summary": "Get All Registrations for a Webcast",
        "description": "Retrieve a list of <em>all</em> registrations for a specific Public webcast (with optional pagination).",
        "operationId": "getGuestUsers",
        "x-sdk-method-name": "getEventGuestUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the upcoming Public webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "If provided, query results are sorted based on field (name, email). Default is set to name.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "email"
              ],
              "default": "name"
            }
          },
          {
            "$ref": "#/components/parameters/sortDirection"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size. Default is 10.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/guestUsersList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/presenter-resend-email": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Resend Email to External Presenter",
        "description": "Resend email to external presenters for Producer type webcast.",
        "operationId": "resendExternalPresenterEmail",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email of the external presenter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/embedded-content/links": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Embedded Engagements for a Webcast",
        "description": "Retrieves a list of <em>all</em> embedded engagement links for a specific webcast.</br></br>Also specifies if the engagements are activated.",
        "operationId": "getWebcastEmbeddedContentLinks",
        "x-sdk-method-name": "getEmbeddedContentLinks",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/embeddedContentLinksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/embedded-content/link": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Embed Webcast Engagement",
        "description": "This API allows you to embed content or URLs from third-party sites of your choice so that they function in a Rev webcast.",
        "operationId": "createEmbeddedContentLink",
        "x-sdk-method-name": "createEmbeddedContentLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast that will contain the embed",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Embedded content link",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/embeddedContentLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/embeddedContentLink"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/embedded-content/links/{id}/status": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Set Embedded Engagement Status",
        "description": "Activates or deactivates an embedded engagement link for Webcast. Activating a link makes it visible to attendees.</br></br>Multiple embeds can be activated but only one at a time is activated each time the API is run. Additionally, the webcast must be in-progress for an engagement to be activated.",
        "operationId": "setEmbeddedContentLinkStatus",
        "x-sdk-method-name": "setEmbeddedContentLinkStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Embedded content link id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Embedded content link status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setEnabledRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/embedded-content/links/{id}": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Update Embedded Engagement for a Webcast",
        "description": "Updates a previously created Embedded Webcast Engagement for a Webcast. You must specify both the webcast and the engagement Ids.",
        "operationId": "updateEmbeddedContentLink",
        "x-sdk-method-name": "editEmbeddedContentLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast that has the embed",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Embedded content link id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Embedded content link",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/embeddedContentLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/embeddedContentLink"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete an Embedded Engagement for a Webcast",
        "description": "Delete an Embedded Engagement for a Webcast.",
        "operationId": "deleteWebcastEmbeddedContentLink",
        "x-sdk-method-name": "deleteEmbeddedContentLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast that contains the engagement",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Embedded content link id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/push-content/links": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "deprecated": true,
        "summary": "Get Push Links for a Webcast (Deprecated)",
        "description": "This is a deprecated endpoint. Use <a href=/reference/getwebcastbanners>Get Banners for a Webcast</a> instead.",
        "operationId": "getWebcastPushContentLinks",
        "x-sdk-method-name": "getPushContentLinks",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pushContentLinksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/push-content/link": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "deprecated": true,
        "summary": "Add Push Links to a Webcast (Deprecated)",
        "description": "This is a deprecated endpoint. Use <a href=/reference/createbanner>Add Banners to a Webcast</a> instead.",
        "operationId": "createPushContentLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to add push links to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "push content link",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pushContentLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pushContentLink"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/push-content/link/{id}/status": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "deprecated": true,
        "summary": "Set Push Link Status (Deprecated)",
        "description": "This is a deprecated endpoint. Use <a href=/reference/setbannerstatus>Set Banner Status</a> instead.",
        "operationId": "setPushContentLinkStatus",
        "x-sdk-method-name": "setPushContentLinkStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Push content link id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Push content link status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setEnabledRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/push-content/link/{id}": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "deprecated": true,
        "summary": "Update Push Links for a Webcast (Deprecated)",
        "description": "This is a deprecated endpoint. Use <a href=/reference/updatebanner>Update Banner for a Webcast</a> instead.",
        "operationId": "updatePushContentLink",
        "x-sdk-method-name": "editPushContentLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast that has the push content enabled.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "push content link id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "push content link",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pushContentLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pushContentLink"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "deprecated": true,
        "summary": "Delete a Push Link for a Webcast (Deprecated)",
        "description": "This is a deprecated endpoint. Use <a href=/reference/deletewebcastbanner>Delete a Banner for a Webcast</a> instead.",
        "operationId": "deleteWebcastPushContentLink",
        "x-sdk-method-name": "deletePushContentLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast that contains the push content.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "push content link id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/banners": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Banners for a Webcast",
        "description": "Retrieves a list of <em>all</em> banners for a specific webcast.",
        "operationId": "getWebcastBanners",
        "x-sdk-method-name": "getWebcastBanners",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bannersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/banner": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Add Banners to a Webcast",
        "description": "This API allows you to add banners. Banners can be shown in a Rev webcast player at end of webcast or during a webcast in progress.",
        "operationId": "createBanner",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to add push links to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "banner",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bannerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/banner"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/banner/{id}/status": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Set Banner Status",
        "description": "Activates or deactivates a banner for a Webcast. Activating a banner makes it visible to attendees. Only Manual type links can be activated/deactivated. </br></br>Multiple banners can be active but only one at a time is activated/deactivated each time the API is run. Additionally, the webcast must be in-progress for a banner to be activated/deacivated.",
        "operationId": "setBannerStatus",
        "x-sdk-method-name": "setBannerStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Banner id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Banner status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setEnabledRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/banner/{id}": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Update Banner for a Webcast",
        "description": "Updates previously created banner for a Webcast. You must specify both the webcast and the banner Id.",
        "operationId": "updateBanner",
        "x-sdk-method-name": "editWebcastBanner",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast that has the push content enabled.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "banner id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "banner",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bannerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/banner"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete a Banner for a Webcast",
        "description": "Deletes previously created banner for a Webcast. You must specify both the webcast and the link Id.",
        "operationId": "deleteWebcastBanner",
        "x-sdk-method-name": "deleteWebcastBanner",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast that contains the banners.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "banner id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/registrations/{registrationId}": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "x-sdk-tags": [
          "Guest Registration"
        ],
        "summary": "Get Guest Registration",
        "description": "Retrieve details of a specific guest user Public webcast registration.",
        "operationId": "getGuestUser",
        "x-sdk-method-name": "getEventGuestUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the Public webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registrationId",
            "in": "path",
            "description": "Id of guest user's registration to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/guestUserDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Webcasts"
        ],
        "x-sdk-tags": [
          "Guest Registration"
        ],
        "summary": "Update Guest Registration",
        "description": "Edits a specific Public webcast guest user's registration.",
        "operationId": "editGuestUser",
        "x-sdk-method-name": "editEventGuestUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the Public webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registrationId",
            "in": "path",
            "description": "Id of guest user's registration to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update guest user registration details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editGuestUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Webcasts"
        ],
        "x-sdk-tags": [
          "Guest Registration"
        ],
        "summary": "Patch Guest Registration",
        "description": "Partially edits specific guest user registration details of a Public webcast. You do not need to provide the fields that you are not changing. Please refer to http://jsonpatch.com/ for the format of the request body.<p>Patch operations on User details editable fields [Name, RegistrationFieldsAnswers].</p>",
        "operationId": "patchGuestUser",
        "x-sdk-method-name": "patchEventGuestUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the Public webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registrationId",
            "in": "path",
            "description": "Id of guest user's registration to patch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "x-sdk-tags": [
          "Guest Registration"
        ],
        "summary": "Delete Guest Registration",
        "description": "Deletes a specific guest user registration for a Public webcast.",
        "operationId": "deleteGuestUser",
        "x-sdk-method-name": "deleteEventGuestUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the Public webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registrationId",
            "in": "path",
            "description": "Id of guest user's registration to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users": {
      "post": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Add User",
        "description": "Add a new user and assign roles and groups as needed.",
        "operationId": "createUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "User to add to the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "user"
      }
    },
    "/api/v2/users/{userId}": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Get User By ID",
        "description": "Get user details for a given user account Id.",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to get details. You can pass me (/api/v2/users/me) as the userId to get the details of current logged in user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Delete a user account.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Patch User",
        "description": "Partially edits the details of a user. You do not need to provide the user fields that are not changing.<p><strong>Note:</strong> If the account is an LDAP user, only Roles, Groups, and Preferred Language may be updated.</p>",
        "operationId": "editUserDetails",
        "x-sdk-method-name": "patchUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Indicates the context of the value provided in the request path ':userId'. If a value of 'username' or 'email' is provided, the user is retrieved using the 'Username' or 'Email' property instead of User ID.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "username",
                "email"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "User details to update. Please refer to http://jsonpatch.com/ for the format of the request body.<p>Patch operations on User details editable fields [Email, FirstName, LastName, Title, Phone, Language, ItemStatus, RoleIds, GroupIds]</p><p>Operations supported: add,remove,copy,replace,test,move.</p>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "409": {
            "description": "Conflict error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/users/{username}": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Get User by Username",
        "description": "Get user details for a given user account Username.",
        "operationId": "getUserByUsername",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "username",
            "in": "path",
            "description": "Username of user account to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Indicates the context of the value provided in the request path ':username'. If a value of 'username' is provided, the user is retrieved using the 'Username' property.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "username"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/{email}": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Get User by Email",
        "description": "Get user details for a given user account Email Address.",
        "operationId": "getUserByEmailAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "email",
            "in": "path",
            "description": "Email address of user account to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Indicates the context of the value provided in the request path ':email'. If a value of 'email' is provided, the user is retrieved using the 'Email' property.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userDetailsList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/profile-image/{userId}": {
      "post": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Upload User Profile Image",
        "description": "Upload a profile image for a given user. Only account admins can upload user profile image.",
        "operationId": "uploadProfileImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of user to upload profile image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ImageFile"
                ],
                "properties": {
                  "ImageFile": {
                    "type": "string",
                    "description": "Thumbnail image file. Accepted image types are listed in <a href=/docs/supported-file-types>Supported File Types</a>.<p>Please provide Content-Type header for the uploaded files.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Resource Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/{userId}/profile-image": {
      "delete": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Delete User Profile Image",
        "description": "Delete a profile image for a given user.",
        "operationId": "deleteProfileImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of user to delete profile image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/groups": {
      "post": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Groups"
        ],
        "summary": "Add Group",
        "description": "Add a new group and assign users and roles as needed.",
        "operationId": "createGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "group"
      },
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Groups"
        ],
        "summary": "Get Groups",
        "description": "Get all groups. It supports pagination.",
        "operationId": "getGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number - use 0 or leave blank to get the first page of results, 1 to get the second page, etc.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/groups/{groupId}": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Groups"
        ],
        "summary": "Get Group Details By ID",
        "description": "Return group id, group name and group roles for a given group id.",
        "operationId": "getGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group to get details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Groups"
        ],
        "summary": "Update Group",
        "description": "Edits a group.",
        "operationId": "editGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of group to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groupRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "group"
      },
      "delete": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Groups"
        ],
        "summary": "Delete Group",
        "description": "Delete a group.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of group to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Groups"
        ],
        "summary": "Patch Group",
        "description": "Partially edits the details of a group. You do not need to provide the fields that you are not changing. For <strong>LDAP groups</strong>, only roles can be updated. For Rev system groups, <em>both</em> users and roles can be updated.<p>Please refer to http://jsonpatch.com/ for the format of the request body.</p><p><strong>Examples:</strong></p><p>To add users: [{ 'op': 'add', 'path': '/UserIds/-', 'value': '13443c6c-e2cc-49e2-b4b2-ec3ebad97fb1' }]</p><p>To add roles: [{ 'op': 'add', 'path': '/RoleIds/-', 'value': 'b14f6a56-254d-43ee-950b-145811ebfc8c' }]</p><p>To remove users: [{ 'op': 'remove', 'path': '/UserIds', 'value': 'b14f6a56-254d-43ee-950b-145811ebfc8c' }]</p><p>To remove roles: [{ 'op': 'remove', 'path': '/RoleIds', 'value': 'b14f6a56-254d-43ee-950b-145811ebfc8c' }]</p>",
        "operationId": "patchGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group to patch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Group details  to update. Please refer to http://jsonpatch.com/ for the format of the request body. <p>Operations supported: add,remove,copy,replace,test,move.</p>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "409": {
            "description": "Conflict error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/search/groups/{groupId}/users": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Groups"
        ],
        "summary": "Get Users in a Group",
        "description": "Returns the userIds for a given group.",
        "operationId": "getGroupMembership",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group to get users",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupMembership"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/search/access-entity": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users",
          "Groups"
        ],
        "summary": "Search Users,Groups and Channels",
        "description": "Searches the specified access entity (user/group/channel) in Rev for a specified query string. If no entity is specified, then both are searched.",
        "operationId": "searchAccessEntity",
        "x-sdk-method-name": "search",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of access entity to search (user/group/channel). One or more may be provided. If no type is provided, all entities are included.",
            "schema": {
              "$ref": "#/components/schemas/accessEntityType"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search string. If no search string is provided, treated as a blank search. Example: If the group parameter is specified with no search string, the first 1000 groups are returned (count parameter default).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of access entities to get. (By default count is 1000)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchAccessEntitiesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/search/access-entity/assignable": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users",
          "Groups",
          "Channels"
        ],
        "summary": "Search assignable Users, Groups and Channels",
        "description": "Searches the specified access entity (user/group/channel) in Rev for a specified query string that the current user is able to assign. If no entity is specified, then all types are searched.",
        "operationId": "searchAccessEntityAssignable",
        "x-sdk-method-name": "searchAssignable",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of access entity to search (user/group/channel). One or more may be provided. If no type is provided, all entities are included.",
            "schema": {
              "$ref": "#/components/schemas/accessEntityType"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search string. If no search string is provided, treated as a blank search. Example: If the group parameter is specified with no search string, the first 1000 groups are returned (count parameter default).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of access entities to get. (By default count is 1000)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchAccessEntitiesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/login-report": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Get Users By Login Date",
        "description": "Get a list of users and their last login date. Users who have never logged in are not be returned.",
        "operationId": "loginReport",
        "x-sdk-method-name": "getLoginReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "If provided, query results are sorted based on field.",
            "schema": {
              "type": "string",
              "enum": [
                "LastLogin",
                "Username"
              ]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order for sorting the result, asc or desc.",
            "schema": {
              "$ref": "#/components/schemas/sortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userLoginReportResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/profile-image/{key}": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Get User Profile Image",
        "description": "Downloads a user profile image.",
        "operationId": "getUserProfileImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "key",
            "in": "path",
            "description": "File key of the user profile image to download. Here <strong>key</strong> is image id along with extension.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/users/subscribe": {
      "post": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Subscribe to a Channel or Category",
        "description": "Subscribe to specific channel or category.",
        "operationId": "subscribe",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/unsubscribe": {
      "post": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Unsubscribe from a Channel or Category",
        "description": "Unsubscribe from specific channel or category.",
        "operationId": "unsubscribe",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/subscriptions": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Get Subscriptions",
        "description": "Returns the channel and category subscriptions for the user making the API call.",
        "operationId": "subscriptions",
        "x-sdk-method-name": "getSubscriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscriptionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/notifications": {
      "put": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Update Notifications",
        "description": "Marks a specific notification as read. If notification Id is not provided, then <em>all</em> notifications are marked as read.",
        "operationId": "notifications",
        "x-sdk-method-name": "setNotificationStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "notificationId",
            "in": "query",
            "description": "If notificationId not provided, then <em>all</em> notifications for the user are marked as read.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "x-sdk-tags": [
          "Users"
        ],
        "summary": "Get Notifications",
        "description": "Returns notifications for the user making the API call.",
        "operationId": "getNotifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "unread",
            "in": "query",
            "description": "When false (default), all notifications are returned. If true , only unread notifications are returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get Channels",
        "description": "Get list of all channels. Includes the channel members and specifies the type of member they are (user/group) along with their channel role.",
        "operationId": "getChannels",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of channels to return per page. Default=10.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero based index of the page. This means page number starts at 0 and has first set of 10 channels while page 1 contains next set of 10 channels and so forth.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/channelsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Create Channel",
        "description": "Add a new channel and assign channel members and roles as needed.",
        "operationId": "createChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "users/groups, as channel members, to add to Channel. Includes a flag to indicate if a member is acting as a Channel administrator.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/channelRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createChannelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "channel"
      }
    },
    "/api/v2/channels/{channelId}": {
      "put": {
        "tags": [
          "Channels"
        ],
        "summary": "Update Channel",
        "description": "Edit a channel.",
        "operationId": "editChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "Id of channel to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/channelRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "channel"
      },
      "delete": {
        "tags": [
          "Channels"
        ],
        "summary": "Delete Channel",
        "description": "Delete a channel.",
        "operationId": "deleteChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "Id of channel to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Channels"
        ],
        "summary": "Patch Channel",
        "description": "Partially edits the members and details of a channel. You do not need to provide the fields that you are not changing.<p>Please refer to http://jsonpatch.com/ for the format of the request body.</p><strong>Examples:</strong><p>To add members: [{'op': 'add',  'path': '/Members/-', 'value': {'id': '0e2a1bfc-0a36-4ee1e-ac1e-3647b256537d','type': 'Group','roleTypes': ['Member','Contributor']}} ]</p><p>To remove members : [{ 'op': 'remove',  'path': '/Members',  'value': '63a76eb9-fa62-46e0-bdb5-c8ad34aec086' }]</p><p>To update channel name : [{ 'op': 'replace', 'path': '/Name', 'value': 'New Name' }]</p><p>To update channel default sort order : [{ 'op': 'replace', 'path': '/DefaultSortOrder', 'value': 'title' }]</p>",
        "operationId": "patchChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "Id of the channel to patch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Channels  details  to update. Please refer to http://jsonpatch.com/ for the format of the request body. <p>Operations supported: add,remove,copy,replace,test,move.</p>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "409": {
            "description": "Conflict error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/search/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get Channels For User",
        "description": "Returns only the channels and video count for the user making the API call based on their access control.",
        "operationId": "getUserChannels",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/userChannelItem"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/channels/thumbnails/{key}": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get Channel Logo",
        "description": "Download channel logo.",
        "operationId": "downloadThumbnail",
        "x-sdk-method-name": "downloadChannelLogo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "key",
            "in": "path",
            "description": "File key of the channel logo to download.<p>This is the <b>logoKey</b> property that is returned via the <a href=/reference/getUserChannels>Get Channels For User</a> or <a href=/reference/getChannel>Get Channels</a> endpoints.</p>",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/channels/headerImage/{key}": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get Channel Header Image",
        "description": "Download channel header image.",
        "operationId": "downloadHeaderImage",
        "x-sdk-method-name": "downloadChannelHeaderImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "key",
            "in": "path",
            "description": "File key of the channel header image to download.<p>This is the <b>headerKey</b> property that is returned via the <a href=/reference/getuserchannels>Get Channels For User</a> or <a href=/reference/getchannels>Get Channels</a> endpoints.</p>",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/uploads/channel-logo/{channelId}": {
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Upload Channel Logo Image",
        "description": "Upload logo image file for a channel.",
        "operationId": "uploadChannelLogoFile",
        "x-sdk-method-name": "uploadChannelLogoImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "Id of the channel to upload image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ImageFile"
                ],
                "properties": {
                  "ImageFile": {
                    "type": "string",
                    "description": "Channel image file. View <a href=/docs/supported-file-types>Supported File Types</a> in Technical Requirements guide for accepted image types.<p>Please provide Content-Type header for the uploaded files.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/channel-header/{channelId}": {
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Upload Channel Header Image",
        "description": "Upload header image file for a channel.",
        "operationId": "uploadChannelHeaderFile",
        "x-sdk-method-name": "uploadChannelHeadermage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "Id of the channel to upload image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ImageFile"
                ],
                "properties": {
                  "ImageFile": {
                    "type": "string",
                    "description": "Channel image file. View <a href=/docs/supported-file-types>Supported File Types</a> in Technical Requirements guide for accepted image types.<p>Please provide Content-Type header for the uploaded files.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/categories": {
      "get": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Categories"
        ],
        "summary": "Get Categories",
        "description": "Get list of all categories based on query parameters. If no query paramter is passed, all categories are returned.",
        "operationId": "getCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "parentCategoryId",
            "in": "query",
            "description": "All child categories of given parentCategoryId are returned. To return top level categories only, set parentCategoryId as null or do not send parentCategoryId in the request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAllDescendants",
            "in": "query",
            "description": "If false, then return categories only at one level. If true or not provided, then return all the nested categories.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categoriesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Categories"
        ],
        "summary": "Add Category",
        "description": "Add a new category.",
        "operationId": "createCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Category to add to the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCategoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createCategoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "category"
      }
    },
    "/api/v2/categories/{categoryId}": {
      "put": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Categories"
        ],
        "summary": "Update Category",
        "description": "Edit a category.",
        "operationId": "editCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id of the category to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Category to edit in the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "category"
      },
      "get": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Categories"
        ],
        "summary": "Get Category By ID",
        "description": "Get a specified category by category Id.",
        "operationId": "getCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id of the category to get details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categoryDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Categories"
        ],
        "summary": "Delete Category",
        "description": "Delete a category.",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id of category to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not found error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/user/categories": {
      "get": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Categories"
        ],
        "summary": "Get Categories For User",
        "description": "Returns a list of all categories that a user can see based on video permissions inside a category or subcategory.</br></br>If the <strong>parentCategoryId</strong> query paramter is not passed, only categories at the root level are returned.</br></br>If <strong>parentCategoryId</strong> <em>is</em> passed, the child categories for the parentCategoryId are also returned.",
        "operationId": "getCategoriesForUser",
        "x-sdk-method-name": "getUserCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "parentCategoryId",
            "in": "query",
            "description": "If passed, all child categories of given parentCategoryId are returned.</br></br>To return top level categories only, set parentCategoryId as null or do not send parentCategoryId in the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userCategoriesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/roles": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Roles",
        "description": "Get list of all roles.",
        "operationId": "getRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/userRoleEntity"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/video-fields": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Custom Fields",
        "description": "Get list of all custom fields.",
        "operationId": "customMetadata",
        "x-sdk-method-name": "getCustomFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customFieldsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/presentation-profiles": {
      "get": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Devices"
        ],
        "summary": "Get Presentation Profiles",
        "description": "Get list of all presentation profiles.",
        "operationId": "getPresentationProfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/presentationProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/zones": {
      "get": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Devices"
        ],
        "summary": "Get Zones",
        "description": "Get list of all zones.",
        "operationId": "getZones",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/zonesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Devices"
        ],
        "summary": "Add Zone",
        "description": "Add a new zone.",
        "operationId": "createZone",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "The details of the zone to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zoneRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createZoneResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/zones/{zoneId}": {
      "put": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Devices"
        ],
        "summary": "Update Zone",
        "description": "Edit a zone.",
        "operationId": "editZone",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "zoneId",
            "in": "path",
            "description": "Id of zone to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the zone to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zoneRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Devices"
        ],
        "summary": "Delete Zone",
        "description": "Delete a zone.",
        "operationId": "deleteZone",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "zoneId",
            "in": "path",
            "description": "Id of zone to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/zonedevices": {
      "get": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Devices"
        ],
        "summary": "Get Zone Devices",
        "description": "Returns a list of all devices that can be assigned to any zone.",
        "operationId": "getZoneDevices",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/zoneDevicesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/accounts/branding-settings": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Branding Settings",
        "description": "Get the branding and style settings for a Rev entity.",
        "operationId": "getBrandingSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/brandingSettingsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/accounts/webcast-registration-fields": {
      "get": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Guest Registration"
        ],
        "summary": "Get Webcast Registration Fields",
        "description": "Get a list of all webcast registration fields defined for Public webcasts.",
        "operationId": "getWebcastRegistrationFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registrationFieldResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Guest Registration"
        ],
        "summary": "Add Webcast Registration Fields",
        "description": "Create webcast registration fields that can be used in Public webcasts. Used as a means to capture attendee details beyond name and email address when hosting Public events. <p>Use Ids returned in this endpoint in the <a href=/reference/createevent>Create Webcast</a> API to use a custom field.</p>",
        "operationId": "createWebcastRegistrationField",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "This contains the details required to create a webcast registration field",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registrationField"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "webcastRegistrationField"
      }
    },
    "/api/v2/accounts/webcast-registration-fields/{fieldId}": {
      "put": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Guest Registration"
        ],
        "summary": "Update Webcast Registration Field",
        "description": "Edit webcast registration field used in Public webcasts.",
        "operationId": "editWebcastRegistrationField",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "Id of the field to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains the details required to modify a webcast registration field",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registrationField"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Guest Registration"
        ],
        "summary": "Delete Webcast Registration Field",
        "description": "Delete a webcast registration field.",
        "operationId": "deleteWebcastRegistrationField",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "Id of the field to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/jwt-encryption-keys": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get JWT Encryption Keys for Account",
        "description": "Get all JWT encryption keys for an account. This API is only available for partner accounts.",
        "operationId": "getJwtEncryptionKeys",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jwtEncryptionKeysResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not found error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/jwt-public-keys/{kid}": {
      "delete": {
        "tags": [
          "Administration"
        ],
        "summary": "Delete JWT Public Key",
        "description": "Deletes a JWT public key if it is no longer valid or has been rotated out. This API is only available for partner accounts.",
        "operationId": "deleteJwtPublicKey",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "kid",
            "in": "path",
            "description": "Key Id of the key to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not found error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/analytics/accounts/iq-credits-usage": {
      "get": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "RevIQ"
        ],
        "summary": "Get Rev IQ Credits Usage",
        "description": "Returns the Rev IQ credits usage. Data for both video and live events is collected. Rev IQ credits are used for transcription, translation, user tagging, audio generation, and metadata generation.",
        "operationId": "getAccountIqCreditsUsage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter date for those recorded credits that happened on or after the WHEN field.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter date for those recorded credits that happened on or before the WHEN field.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/revIqCreditsUsageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/maintenance-schedule": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Maintenance Schedule",
        "description": "This endpoint returns Rev’s scheduled maintenance windows (by date/time) for the current year. Maintenance dates vary for the different Rev environments and need to be maintained by environment region (US, EU and AU).",
        "operationId": "maintenance-schedule",
        "x-sdk-method-name": "getMaintenanceSchedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/maintenanceScheduleResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/system-health": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get System Health",
        "description": "This endpoint returns the status of Rev as shown on the Rev System Health page. The response should be a 200 OK unless there is a problem which is then displayed as a 5xx error.",
        "operationId": "system-health",
        "x-sdk-method-name": "getSystemHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "503": {
            "description": "Service unavailable",
            "content": {}
          }
        }
      }
    },
    "/api/v2/user-location": {
      "get": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Devices"
        ],
        "summary": "Get User Location Service",
        "description": "This endpoint returns whether the User Location Service (ULS) is enabled. If enabled, it returns the user location urls.",
        "operationId": "user-location",
        "x-sdk-method-name": "getUserLocationService",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userLocationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/expiration-rules": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Expiration Rules",
        "description": "Returns an array of all expiration rules.",
        "operationId": "expiration-rules",
        "x-sdk-method-name": "getExpirationRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/accountExpiryRules"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/assignable-categories": {
      "get": {
        "tags": [
          "Administration"
        ],
        "x-sdk-tags": [
          "Categories"
        ],
        "summary": "Get Assignable Categories",
        "description": "Returns a list of categories that the user can assign in VOD settings.",
        "operationId": "assignable-categories",
        "x-sdk-method-name": "getAssignableCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignableCategoriesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/devices/dmes": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get DME Devices",
        "description": "Get a list of all DME devices and their status.",
        "operationId": "getDmeDevices",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dmeDevicesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Add DME Device",
        "description": "Adds a new DME device.",
        "operationId": "createDmeDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "DME device to add to the system.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dmeDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createDmeDeviceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "dmeDevice"
      }
    },
    "/api/v2/devices/dmes/{deviceId}": {
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Delete DME Device",
        "description": "Deletes a DME device.",
        "operationId": "deleteDmeDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Id of DME device to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Reboot DME Device",
        "description": "Reboots a specific DME device. Returns successful response when the reboot action is added to queue.",
        "operationId": "rebootDmeDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Id of DME device to reboot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/devices/dmes/{deviceId}/health-status": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get DME Health Status",
        "description": "This endpoint retrieves the last reported, complete health status of a DME. Each DME communicates a health status based on a frequency determined by Rev. Currently, this is every 60 seconds. Customers implementing longitudinal comparisons should periodically call this endpoint.",
        "operationId": "getDmeHealthStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Id of DME device to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dmeHealthStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/userAccess": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit of User Access for Account",
        "description": "Get audit details for all of account's user access.",
        "operationId": "getUserAccessAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/userAccess/{userId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit of User Access for User",
        "description": "Get user access audit details of a given user.",
        "operationId": "getUserAccessAuditDetailsByUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/users": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for All Users",
        "description": "Get audit details of all users.",
        "operationId": "getUsersAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/users/{userId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a User",
        "description": "Get audit details for a given user.",
        "operationId": "getUserAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/groups": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for All Groups",
        "description": "Get audit details of all groups.",
        "operationId": "getGroupsAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/groups/{groupId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a Group",
        "description": "Get audit details of a given group.",
        "operationId": "getGroupAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/devices": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for All Devices",
        "description": "Get audit details of all devices.",
        "operationId": "getDevicesAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/devices/{deviceId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a Device",
        "description": "Get audit details of a given device.",
        "operationId": "getDeviceAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Device Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/videos": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for All Videos",
        "description": "Get audit details of all videos.",
        "operationId": "getVideosAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/videos/{videoId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a Video",
        "description": "Get audit details of a given video",
        "operationId": "getVideoAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Video Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/scheduledEvents": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for All Webcasts",
        "description": "Get audit details of all webcasts.",
        "operationId": "getEventsAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/scheduledEvents/{eventId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a Webcast",
        "description": "Get audit details of a given webcast.",
        "operationId": "getEventAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Event Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/principals/{principalId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a Principal",
        "description": "Get audit details of a given principal.",
        "operationId": "getPrincipalAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "$ref": "#/components/parameters/auditAccountId"
          },
          {
            "name": "principalId",
            "in": "path",
            "description": "Principal Id to get audit deatils for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/auditFromDate"
          },
          {
            "$ref": "#/components/parameters/auditToDate"
          },
          {
            "$ref": "#/components/parameters/auditNextContinuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            },
            "headers": {
              "totalRecords": {
                "$ref": "#/components/headers/totalRecords"
              },
              "nextFromDate": {
                "$ref": "#/components/headers/nextFromDate"
              },
              "nextContinuationToken": {
                "$ref": "#/components/headers/nextContinuationToken"
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "authorizationParam": {
        "name": "Authorization",
        "in": "header",
        "description": "Use the access token received from the response of the login or oauth request as the authorization header value, prefixed by 'VBrick '",
        "required": true,
        "schema": {
          "type": "string",
          "example": "VBrick Lgoz53OebqK8d_35nI..."
        }
      },
      "sortDirection": {
        "name": "sortDirection",
        "in": "query",
        "description": "If provided, query results are sorted on ascending or descending order (asc, desc).",
        "schema": {
          "$ref": "#/components/schemas/sortDirection"
        }
      },
      "videoSearchSortField": {
        "name": "sortField",
        "description": "If provided, query results are sorted based on field(duration, laswViewed, ownerName, title, uploaderName, viewCount, whenUploaded, _score). Default is set to the account default sort field.",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/videoSearchSortField"
        }
      },
      "auditAccountId": {
        "name": "accountId",
        "in": "path",
        "description": "Account Id to get audit details",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "auditFromDate": {
        "name": "fromDate",
        "in": "query",
        "description": "Valid start date",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "auditToDate": {
        "name": "toDate",
        "in": "query",
        "description": "Valid end date greater than the specified fromDate (start date)",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "auditNextContinuationToken": {
        "name": "nextContinuationToken",
        "in": "query",
        "description": "Id from previous request to get next set of records",
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "nextContinuationToken": {
        "schema": {
          "type": "string"
        },
        "description": "scrollID to be used in subsequent requests to get next set of records. Will be empty if no more results"
      },
      "nextFromDate": {
        "schema": {
          "format": "date-time",
          "type": "string"
        },
        "description": "fromDate value to use in subsequent request to get next set of records. Use in conjunction with nextContinuationToken"
      },
      "totalRecords": {
        "schema": {
          "type": "integer"
        },
        "description": "Total number of records in specified time range"
      }
    },
    "schemas": {
      "badRequestResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Rev Error name."
          },
          "detail": {
            "type": "string",
            "description": "Descriptive message of error reason."
          }
        }
      },
      "jwtErrorResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Error name.",
            "enum": [
              "InvalidJwtToken",
              "TokenExpiredError",
              "JsonWebTokenError",
              "NotBeforeError"
            ]
          },
          "message": {
            "type": "string",
            "description": "Descriptive message of error reason."
          }
        }
      },
      "serverErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Rev Error name."
          },
          "detail": {
            "type": "string",
            "description": "Descriptive message of error reason."
          }
        }
      },
      "sortDirection": {
        "type": "string",
        "description": "How data is sorted in the response. Supported Values: 'asc', 'desc'. Default is 'asc'",
        "default": "asc",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "videoActiveStatus": {
        "type": "string",
        "enum": [
          "Active",
          "Inactive"
        ]
      },
      "videoAccessControl": {
        "type": "string",
        "description": "This sets access control for the video. This is an enum and can have the following values: <code>Public/AllUsers/Private</code>. <p>A value of <strong>AllUsers</strong> is equal to all internal/authenticated users. A value of <strong>Private</strong> allows access to those Users, Groups, and Channels <em>explicitly</em> identified.</p><p> Be aware that you can assign multiple Users, Groups, and Channels in the <strong>accessControlEntites</strong> parameter in addition to the <strong>AllUser</strong> or <strong>Public</strong> settings. If no value is set, the default is <strong>Private</strong>.</p> <p>In the case of an incorrect value, the call is rejected with an HTTP 400 error.</p><p><strong>Note:</strong> If <strong>Channels</strong> is set at the videoAccessControl, it is translated to <strong>Private</strong> and a Channel <em>must</em> be specified in the accessControlEntities. If a Channel is included in the accessControlEntities, then the canEdit parameter is ignored.</p>",
        "enum": [
          "Public",
          "AllUsers",
          "Private"
        ]
      },
      "videoStatus": {
        "type": "string",
        "enum": [
          "Ready",
          "Processing",
          "ProcessingFailed",
          "ReadyButProcessingFailed",
          "NotUploaded",
          "Uploading",
          "UploadingFinished",
          "UploadFailed",
          "Ingesting",
          "IngestingNotified",
          "DownloadFailed",
          "Connecting",
          "ConnectingFailed",
          "WaitingForStream",
          "RecordingStream",
          "StreamingFailed",
          "StartRecording",
          "RecordingInitializing",
          "Recording",
          "StopRecording",
          "RecordingFinished",
          "RecordingFailed",
          "ViewingHoursNotAvailable"
        ]
      },
      "videoApprovalStatus": {
        "type": "string",
        "enum": [
          "Approved",
          "RequiresApproval",
          "PendingApproval",
          "Rejected"
        ]
      },
      "videoThumbnailConfiguration": {
        "type": "object",
        "properties": {
          "thumbnailCfg": {
            "type": "object",
            "description": "Thumbnail sheet configuration.",
            "properties": {
              "horizontalTiles": {
                "description": "Total number of horizontal tiles making up the thumbsheet.",
                "type": "integer"
              },
              "verticalTiles": {
                "description": "Total number of vertical tiles making up the thumbsheet.",
                "type": "integer"
              },
              "spf": {
                "description": "Seconds per frame.",
                "type": "number"
              },
              "totalThumbnails": {
                "description": "Total number of thumbnails contained in the sheet.",
                "type": "integer"
              },
              "sheetWidth": {
                "description": "Thumbnail sheet width in pixels.",
                "type": "integer"
              },
              "sheetHeight": {
                "description": "Thumbnail sheet height in pixels.",
                "type": "integer"
              },
              "thumbnailSheetsUri": {
                "description": "Uri to thumbnail sheet instance.",
                "type": "string"
              },
              "numSheets": {
                "description": "Number of thumbnail sheets.",
                "type": "integer"
              }
            }
          }
        }
      },
      "videoSummaryStats": {
        "type": "object",
        "properties": {
          "totalViews": {
            "type": "integer"
          },
          "totalSessions": {
            "type": "integer"
          },
          "totalTime": {
            "type": "string",
            "description": "Total viewing time in timespan format (e.g. <code>00:00:00</code>)"
          },
          "averageTime": {
            "type": "string",
            "description": "Average viewing time in timespan format (e.g. <code>00:00:00</code>)"
          },
          "completionRate": {
            "type": "number",
            "description": "CompletionRate is in percentage"
          },
          "totalUniqueViews": {
            "type": "integer"
          },
          "deviceCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deviceAndBrowserCounts"
            }
          },
          "totalViewsByDay": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoSummaryTotalviewsByDay"
            }
          },
          "browserCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deviceAndBrowserCounts"
            }
          }
        }
      },
      "deviceAndBrowserCounts": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          }
        }
      },
      "videoSummaryTotalviewsByDay": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "format": "date"
          },
          "value": {
            "type": "integer"
          }
        }
      },
      "publicVideoListResponse": {
        "type": "object",
        "properties": {
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/publicVideoListItem"
            }
          }
        },
        "x-sdk-single-key": "videos"
      },
      "publicVideoListItem": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "thumbnailUrl": {
            "type": "string"
          }
        }
      },
      "videoChaptersResponse": {
        "type": "object",
        "properties": {
          "chapters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoChapter"
            }
          }
        },
        "x-sdk-single-key": "chapters"
      },
      "videoChapter": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "description": "Chapter's start time using a timespan format (e.g. <code>00:00:00</code>). The value is unique and cannot be the same as other start times."
          },
          "imageUrl": {
            "type": "string"
          }
        }
      },
      "videoDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "thumbnailKey": {
            "type": "string",
            "nullable": true
          },
          "thumbnailUrl": {
            "type": "string"
          },
          "linkedUrl": {
            "$ref": "#/components/schemas/linkedUrlMetadata"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/videoApprovalStatus"
          },
          "enableRatings": {
            "type": "boolean"
          },
          "enableDownloads": {
            "type": "boolean"
          },
          "enableComments": {
            "type": "boolean"
          },
          "enableExternalApplicationAccess": {
            "type": "boolean"
          },
          "enableExternalViewersAccess": {
            "type": "boolean"
          },
          "password": {
            "type": "string",
            "nullable": true,
            "description": "This is a shared password for public guests. This field exists only in the response if the user has EDIT permission to the video."
          },
          "status": {
            "$ref": "#/components/schemas/videoStatus"
          },
          "canEdit": {
            "type": "boolean"
          },
          "videoAccessControl": {
            "$ref": "#/components/schemas/videoAccessControl"
          },
          "accessControlEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/accessControlEntity"
            }
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customFieldResponse"
            }
          },
          "expirationDate": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "expirationAction": {
            "type": "string",
            "nullable": true,
            "description": "This sets action when video expires. This is an enum and can have the following values: Delete/Inactivate.",
            "enum": [
              "Delete",
              "Inactivate"
            ]
          },
          "uploadedBy": {
            "type": "string"
          },
          "whenUploaded": {
            "type": "string"
          },
          "lastViewed": {
            "type": "string"
          },
          "htmlDescription": {
            "type": "string"
          },
          "publishDate": {
            "type": "string",
            "nullable": true,
            "format": "date"
          },
          "categoryPaths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categoryPathsItem"
            }
          },
          "sourceType": {
            "type": "string"
          },
          "is360": {
            "type": "boolean"
          },
          "unlisted": {
            "type": "boolean"
          },
          "totalViews": {
            "type": "integer"
          },
          "overallProgress": {
            "type": "number",
            "format": "float"
          },
          "isProcessing": {
            "type": "boolean"
          },
          "userTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoUserTag"
            }
          },
          "upLoader": {
            "description": "Video uploader.",
            "$ref": "#/components/schemas/userAccessEntityResponse"
          },
          "owner": {
            "description": "Video owner.",
            "$ref": "#/components/schemas/userAccessEntityResponse"
          },
          "hasAudioOnly": {
            "type": "boolean"
          },
          "hasDualStreams": {
            "type": "boolean"
          },
          "isConvertedToSwitched": {
            "type": "boolean"
          },
          "avgRating": {
            "type": "number",
            "format": "float"
          },
          "ratingsCount": {
            "type": "integer"
          },
          "commentsCount": {
            "type": "integer"
          },
          "whenModified": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "string",
            "nullable": true
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/audioTrack"
            }
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoInstance"
            }
          },
          "videoConference": {
            "type": "object",
            "nullable": true,
            "properties": {
              "whenRecordingStarted": {
                "type": "string",
                "format": "date-time"
              },
              "sipAddress": {
                "type": "string"
              },
              "sipPin": {
                "type": "string",
                "nullable": true
              },
              "bitrateKbps": {
                "type": "integer"
              },
              "microsoftTeamsMeetingUrl": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "expiration": {
            "$ref": "#/components/schemas/videoDetailsExpiration"
          },
          "closedCaptionsEnabled": {
            "type": "boolean"
          },
          "approval": {
            "$ref": "#/components/schemas/videoDetailsApprovalInfo"
          },
          "transcodeFailed": {
            "type": "boolean"
          },
          "source": {
            "type": "string"
          },
          "chapters": {
            "$ref": "#/components/schemas/videoDetailsChaptersInfo"
          },
          "viewerIdEnabled": {
            "type": "boolean"
          },
          "enableAutoShowChapterImages": {
            "type": "boolean"
          },
          "sensitiveContent": {
            "type": "boolean",
            "description": "This will prevent sensitive content from being indexed in Elastic Search."
          }
        }
      },
      "audioTrack": {
        "type": "object",
        "properties": {
          "track": {
            "type": "integer"
          },
          "isDefault": {
            "description": "Sets the audio track as the default track. If status is `updating`, either languageId or isDefault should be different from the existing setting.",
            "type": "boolean"
          },
          "languageId": {
            "description": "<a href=/docs/supported-languages#vod-voice-generation-language-support-for-rev-iq>Supported Language</a> code. When status is `adding`, languageId is required.<p>If status is `updating`, either languageId or isDefault should be different from the existing setting.</p>",
            "type": "string"
          },
          "languageName": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/audioTrackStatus"
          }
        }
      },
      "apiAudioTrack": {
        "type": "object",
        "properties": {
          "track": {
            "type": "integer"
          },
          "languageId": {
            "description": "<a href=/docs/supported-languages#vod-voice-generation-language-support-for-rev-iq>Supported Language</a> code. When status is `adding`, languageId is required.<p>If status is `updating`, either languageId or isDefault should be different from the existing setting.</p>",
            "type": "string"
          },
          "isDefault": {
            "description": "Sets the audio track as the default track. If status is `updating`, either languageId or isDefault should be different from the existing setting.",
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/audioTrackStatus"
          }
        }
      },
      "videoInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "title": "videoInstanceStatus",
            "enum": [
              "Initialized",
              "Transcoding",
              "Transcoded",
              "TranscodingFailed",
              "Storing",
              "Stored",
              "StoringFailed"
            ]
          },
          "isOriginalInstance": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "videoKey": {
            "type": "string"
          },
          "progress": {
            "type": "number",
            "format": "float"
          },
          "size": {
            "type": "integer"
          },
          "preset": {
            "$ref": "#/components/schemas/videoInstancePreset"
          }
        }
      },
      "videoInstancePreset": {
        "type": "object",
        "properties": {
          "container": {
            "type": "string"
          }
        }
      },
      "videoDetailsExpiration": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "ruleId": {
            "type": "string"
          },
          "expiryRuleType": {
            "type": "string"
          },
          "numberOfDays": {
            "type": "integer"
          },
          "deleteOnExpiration": {
            "type": "boolean"
          }
        }
      },
      "videoUserTag": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "videoDetailsChaptersInfo": {
        "type": "object",
        "properties": {
          "whenStarted": {
            "type": "string",
            "format": "date-time"
          },
          "chapterUri": {
            "type": "string"
          },
          "chapterThumbnailUri": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "NotCopied",
              "Copying",
              "Ready",
              "Error"
            ]
          },
          "chapters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoDetailsChapter"
            }
          }
        }
      },
      "videoDetailsChapter": {
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "extension": {
            "type": "string"
          },
          "isUploadedImage": {
            "type": "boolean"
          }
        }
      },
      "videoDetailsApprovalInfo": {
        "type": "object",
        "properties": {
          "whenSubmittedForApproval": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/videoApprovalStatus"
          },
          "approvalProcessId": {
            "type": "string"
          },
          "approvalProcessName": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoDetailApprovalStep"
            }
          }
        }
      },
      "videoDetailApprovalStep": {
        "type": "object",
        "properties": {
          "stepId": {
            "type": "string"
          },
          "stepName": {
            "type": "string"
          },
          "approverName": {
            "type": "string"
          },
          "approverId": {
            "type": "string"
          },
          "whenRequested": {
            "type": "string",
            "format": "date-time"
          },
          "whenResponded": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/videoApprovalStatus"
          }
        }
      },
      "editVideoRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The video title"
          },
          "description": {
            "type": "string",
            "description": "The video description"
          },
          "linkedUrl": {
            "$ref": "#/components/schemas/linkedUrlMetadata"
          },
          "categories": {
            "description": "List of category IDs. If you use categoryIds and they do not exist/are incorrect, the request is rejected. The request is also rejected if you do not have contribute rights to a restricted category and you attempt to add/edit or otherwise modify it.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "Assign the video to multiple tag GUIDs if desired",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Default=false. The video status.",
            "default": false
          },
          "expirationDate": {
            "type": "string",
            "description": "Date field to prompt expirationAction. Format must be: <code>YYYY-MM-DD</code>.",
            "format": "date"
          },
          "expirationAction": {
            "type": "string",
            "description": "This sets action when video expires. This is an enum and can have the following values: Delete/Inactivate."
          },
          "publishDate": {
            "type": "string",
            "description": "By default, the publishDate is set to the current date the video is set to Active. You can also set the publishDate to a date in the future to make the video Active. If the video is already Active, the publishDate can be set to a date in the past. Format must be <code>YYYY-MM-DD</code> to avoid generating an error.",
            "format": "date"
          },
          "enableRatings": {
            "type": "boolean",
            "description": "Default=false. Allows video to be rated.",
            "default": false
          },
          "enableDownloads": {
            "type": "boolean",
            "description": "Default=false. Allows video to be downloaded.",
            "default": false
          },
          "enableComments": {
            "type": "boolean",
            "description": "Default=false. Allows comments on the video.",
            "default": false
          },
          "enableExternalApplicationAccess": {
            "type": "boolean",
            "description": "Default=false. This enables or disables the ability to allow external application access for a video.",
            "default": false
          },
          "enableExternalViewersAccess": {
            "type": "boolean",
            "description": "Default=false. This enables or disables the ability to allow external url access for a video.",
            "default": false
          },
          "videoAccessControl": {
            "$ref": "#/components/schemas/videoAccessControl"
          },
          "audioTracks": {
            "type": "array",
            "description": "Audio tracks to change. All existing audio tracks are required.",
            "items": {
              "$ref": "#/components/schemas/apiAudioTrack"
            }
          },
          "accessControlEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/accessControlEntity"
            }
          },
          "password": {
            "type": "string",
            "description": "Used if the videoAccessControl is set to Public."
          },
          "customFields": {
            "type": "array",
            "description": "Custom Fields to change. Custom Fields marked as required MUST be included in the array. Other custom fields are optional - supplied values will overwrite existing values",
            "items": {
              "$ref": "#/components/schemas/customFieldRequest"
            }
          },
          "unlisted": {
            "type": "boolean",
            "description": "Default=false. Specifies if the video is unlisted.  If unlisted, it is not visible or searchable in the Rev UI by other users.",
            "default": false
          },
          "userTags": {
            "type": "array",
            "description": "An array of user ids that are tagged in the video. The account must be licensed and enabled for Facial Recognition. If the user does not exist, a 500 error is returned.",
            "items": {
              "type": "string"
            }
          },
          "owner": {
            "description": "By default, video owner is the user uploader unless otherwise assigned. The video owner automatically has view and edit rights and can include the Media Viewer role. <p>If a video owner is assigned, the uploader does <em>not</em> retain view/edit rights unless granted in video access controls.</p>",
            "$ref": "#/components/schemas/userAccessEntityRequest"
          },
          "viewerIdEnabled": {
            "type": "boolean",
            "description": "Default=false. Displays viewer information over the video for playback on the web.",
            "default": false
          },
          "enableAutoShowChapterImages": {
            "type": "boolean",
            "description": "When chapter images exist, the video playback can be enabled to show or hide the images by default."
          },
          "sensitiveContent": {
            "type": "boolean",
            "description": "This will prevent sensitive content from being indexed in Elastic Search."
          }
        }
      },
      "addExternalAccessRequest": {
        "required": [
          "emails"
        ],
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "description": "Emails to add external access for",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string",
            "description": "Optional message default=''",
            "nullable": true,
            "default": ""
          },
          "noEmail": {
            "type": "boolean",
            "description": "Disable sending email to each address notifying them of external access. default=false",
            "nullable": true,
            "default": false
          }
        }
      },
      "searchExternalAccessResponseEntity": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "email address this token is associated with"
          },
          "whenAdded": {
            "type": "string",
            "description": "When this token was added"
          },
          "status": {
            "type": "string",
            "description": "Current status of the token.",
            "enum": [
              "Active",
              "Revoked",
              "Expired"
            ]
          },
          "grantor": {
            "type": "string",
            "description": "Username of user that generated this token"
          },
          "validUntil": {
            "type": "string",
            "description": "the date until this token expires"
          },
          "link": {
            "type": "string",
            "description": "link to access the resource this token is associated with"
          },
          "message": {
            "type": "string",
            "description": "optional message assigned when the token was created"
          }
        }
      },
      "searchExternalAccessResponse": {
        "required": [
          "emails"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/searchExternalAccessResponseEntity"
            }
          },
          "scrollId": {
            "type": "string",
            "description": "Returned after first page of results, token to use to continue paginating through results."
          },
          "total": {
            "type": "integer",
            "description": "Maximum number of results to return per page. Default = 50"
          }
        }
      },
      "removeExternalAccessRequest": {
        "required": [
          "emails"
        ],
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "description": "Emails to remove external access for.",
            "items": {
              "type": "string"
            },
            "nullable": false
          }
        }
      },
      "renewExternalAccessRequest": {
        "required": [
          "emails"
        ],
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "description": "Emails to renew external access for.",
            "items": {
              "type": "string"
            }
          },
          "noEmail": {
            "type": "boolean",
            "description": "Disable sending email to each address notifying them of external access. default=false",
            "nullable": true,
            "default": false
          }
        }
      },
      "renewExternalAccessResponse": {
        "type": "object",
        "properties": {
          "invalidEmails": {
            "type": "array",
            "description": "Email that external access could not be renewed for.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "revokeExternalAccessRequest": {
        "required": [
          "emails"
        ],
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "description": "Emails to revoke external access for.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "videoCommentsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The video ID",
            "type": "string"
          },
          "title": {
            "description": "The video title",
            "type": "string"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoCommentDetail"
            }
          }
        },
        "x-sdk-single-key": "comments"
      },
      "videoCommentDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "isRemoved": {
            "type": "boolean"
          },
          "deletedBy": {
            "type": "string"
          },
          "deletedWhen": {
            "type": "string",
            "format": "date-time"
          },
          "childComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoChildComment"
            }
          }
        }
      },
      "videoChildComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "isRemoved": {
            "type": "boolean"
          },
          "deletedBy": {
            "type": "string"
          },
          "deletedWhen": {
            "type": "string",
            "format": "date-time"
          },
          "childComments": {
            "type": "array",
            "description": "This array will always be empty for comments that have a parent",
            "maxItems": 0,
            "items": {
              "type": "object",
              "properties": {},
              "nullable": true
            }
          }
        }
      },
      "videoViewReportEntry": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "dateViewed": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          },
          "zone": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "playBackUrl": {
            "type": "string"
          },
          "browser": {
            "type": "string"
          },
          "userDeviceType": {
            "type": "string"
          },
          "viewingTime": {
            "type": "string"
          },
          "publicCDNTime": {
            "type": "string"
          },
          "eCDNTime": {
            "type": "string"
          },
          "viewingStartTime": {
            "type": "string"
          },
          "viewingEndTime": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "userIdPayload": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Account user Id"
          }
        }
      },
      "userRequest": {
        "required": [
          "email",
          "lastName",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "Used to login to Rev. Not case sensitive but must be unique."
          },
          "firstName": {
            "type": "string",
            "description": "First name. Not required."
          },
          "lastName": {
            "type": "string",
            "description": "Last name. Required."
          },
          "email": {
            "type": "string",
            "description": "Must be a vaild email format. Required."
          },
          "title": {
            "type": "string",
            "description": "Allows assignment of a title to the user"
          },
          "phoneNumber": {
            "type": "string"
          },
          "language": {
            "type": "string",
            "description": "Preferred language. Two digit language code. For example, en for English. View <a href=/docs/supported-languages>Supported Languages</a> for codes."
          },
          "groupIds": {
            "type": "array",
            "description": "Group Ids to assign the user to",
            "items": {
              "type": "string"
            }
          },
          "roleIds": {
            "type": "array",
            "description": "Role Ids to assign the user to. Default=Media Viewer.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "createUserResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "created user Id"
          }
        }
      },
      "loginApiKeyResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "extendSessionTimeoutResponse": {
        "type": "object",
        "properties": {
          "expiration": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "loginApiKeyRequest": {
        "required": [
          "apiKey",
          "secret"
        ],
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "Configured in the Rev client"
          },
          "secret": {
            "type": "string",
            "description": "Configured in the Rev client"
          }
        }
      },
      "loginUserRequest": {
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of account trying to login"
          },
          "password": {
            "type": "string",
            "description": "Password of account trying to login"
          }
        }
      },
      "loginUserResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/loginApiKeyResponse"
          },
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "language": {
                "type": "string"
              }
            }
          }
        ]
      },
      "guestUserRequest": {
        "required": [
          "name",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of guest user. Required."
          },
          "email": {
            "type": "string",
            "description": "Must be a vaild email format. Required and must be unique. Email is used for validation and cannot be updated. Should match with provided registrationId user mail."
          },
          "registrationFieldsAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/registrationFieldAnswer"
            }
          }
        }
      },
      "guestUserResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/guestUser"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Guest user token that can be used on the webcast link to the public event to automatically log the public user into the event."
              },
              "eventId": {
                "type": "string",
                "description": "EventId of the webcast for which guest user registered."
              }
            }
          }
        ]
      },
      "guestUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of guest user."
          },
          "email": {
            "type": "string",
            "description": "EmailId of the guestUser."
          },
          "registrationId": {
            "type": "string",
            "description": "RegistrationId. Id of the registered guest user."
          },
          "registrationFieldsAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/registrationFieldAnswer"
            }
          }
        }
      },
      "guestUserDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/guestUser"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Guest user token that can be used on the webcast link to the public event to automatically log the public user into the event."
              },
              "whenCreated": {
                "type": "string",
                "format": "date-time"
              },
              "whenModified": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "guestUsersList": {
        "type": "object",
        "properties": {
          "scrollId": {
            "type": "string",
            "description": "ScrollId Used for retrieving next set of guestusers."
          },
          "guestUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/guestUser"
            }
          }
        }
      },
      "editGuestUserRequest": {
        "required": [
          "name",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of guest user. Required."
          },
          "email": {
            "type": "string",
            "description": "Must be a vaild email format. Required and must be unique. Email is used for validation and cannot be updated. Should match with provided registrationId user mail."
          },
          "registrationFieldsAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/registrationFieldAnswer"
            }
          }
        }
      },
      "userSubscriptionRequest": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of channel or category"
          },
          "type": {
            "type": "string",
            "description": "Type of resource to subscribe or unsubscribe to, either channel or category.",
            "enum": [
              "Channel",
              "Category"
            ]
          }
        }
      },
      "userDetailsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/userDetails"
        }
      },
      "userDetails": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "userType": {
            "type": "string",
            "enum": [
              "System",
              "LDAP",
              "Sso",
              "SCIM"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Suspended",
              "Unlicensed",
              "AwaitingConfirmation",
              "AwaitingPasswordReset",
              "AwaitingSecurityQuestionReset",
              "LockedOut",
              "Active"
            ]
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/entityItem"
            }
          },
          "groups": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/entityItem"
            }
          },
          "channels": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/entityItem"
            }
          },
          "profileImageUri": {
            "type": "string",
            "nullable": true
          },
          "canUpload": {
            "type": "boolean",
            "description": "DEPRECATED",
            "deprecated": true
          },
          "canCreateEvents": {
            "type": "boolean",
            "description": "DEPRECATED",
            "deprecated": true
          },
          "permissions": {
            "type": "object",
            "nullable": false,
            "properties": {
              "canUpload": {
                "type": "boolean"
              },
              "canCreateEvents": {
                "type": "boolean"
              },
              "canCreatePublicWebcasts": {
                "type": "boolean"
              },
              "canCreateAllUsersWebcasts": {
                "type": "boolean"
              },
              "canCreatePublicVods": {
                "type": "boolean"
              },
              "canCreateAllUsersVods": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "entityItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "groupRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Required. Unique name of Group."
          },
          "userIds": {
            "description": "User Ids to add to Group",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleIds": {
            "description": "Role Ids to add to Group",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "createGroupResponse": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          }
        }
      },
      "groupListResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/groupListItem"
        }
      },
      "groupListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group Id"
          },
          "name": {
            "type": "string",
            "description": "Group Name"
          },
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "groupDetails": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "Name of the Group."
          },
          "groupId": {
            "type": "string",
            "description": "Id of the Group"
          },
          "roles": {
            "type": "array",
            "nullable": false,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Role Id."
                },
                "name": {
                  "type": "string",
                  "description": "Role name."
                }
              }
            }
          }
        }
      },
      "groupMembership": {
        "type": "object",
        "properties": {
          "totalUsers": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "aiGeneratedMetadataFieldsRequest": {
        "type": "object",
        "properties": {
          "metadataGenerationFields": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "description",
                "title",
                "tags",
                "chapters",
                "all"
              ]
            }
          }
        }
      },
      "aiMetadataGenerationStatus": {
        "type": "object",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/aiGeneratedFieldStatus"
          }
        }
      },
      "aiGeneratedFieldStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "NotStarted",
              "InProgress",
              "Success",
              "Failed"
            ]
          }
        }
      },
      "videoRatingRequest": {
        "required": [
          "rating"
        ],
        "type": "object",
        "properties": {
          "rating": {
            "type": "string",
            "description": "Numerical rating. Numbers 1 to 5. Must be a whole number, no decimals."
          }
        }
      },
      "videoPresentationStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Initialized",
              "InProgress",
              "Completed",
              "Error"
            ]
          },
          "details": {
            "type": "string",
            "description": "Status description"
          }
        }
      },
      "videoProcessingStatus": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/videoStatus"
          },
          "isProcessing": {
            "type": "boolean"
          },
          "overallProgress": {
            "type": "number",
            "format": "float"
          },
          "isActive": {
            "type": "boolean"
          },
          "uploadedBy": {
            "type": "string"
          },
          "whenUploaded": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "audioTrackStatus": {
        "type": "string",
        "enum": [
          "Ready",
          "Pending",
          "Processing",
          "Adding",
          "Updating",
          "Deleting",
          "AddingFailed"
        ]
      },
      "transcriptionStatus": {
        "type": "string",
        "enum": [
          "NotStarted",
          "Preparing",
          "InProgress",
          "Success",
          "Failed"
        ]
      },
      "transcriptionRequest": {
        "type": "object",
        "properties": {
          "audioTrack": {
            "type": "integer",
            "description": "The audio track to transcribe. If the video has multiple audio tracks, you can specify which one to transcribe. Default is null, which means the default audio track is transcribed."
          },
          "language": {
            "type": "string",
            "description": "View the latest <a href=/docs/supported-languages>Supported Languages</a> in Rev technical requirements.",
            "enum": [
              "en",
              "en-gb",
              "fr",
              "de",
              "pt-br",
              "es",
              "zh-cmn-hans",
              "en-au",
              "hi",
              "nl",
              "it"
            ]
          }
        }
      },
      "transcriptionResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "transcriptionId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/transcriptionStatus"
          },
          "language": {
            "type": "string"
          },
          "transcriptionService": {
            "type": "string",
            "description": "Type of transcription service to use by Rev for the video transcription.",
            "enum": [
              "Manual",
              "Vbrick"
            ]
          }
        }
      },
      "transcriptionStatusResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "transcriptionId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/transcriptionStatus"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "translationRequest": {
        "type": "object",
        "description": "</br><p>View the latest <a href=/docs/supported-languages>Supported Languages</a> in Rev technical requirements for sourceLanguage and targetLanguages.</p>",
        "properties": {
          "sourceLanguage": {
            "type": "string",
            "enum": [
              "en",
              "en-gb",
              "fr",
              "de",
              "pt-br",
              "es",
              "zh-cmn-hans"
            ]
          },
          "targetLanguages": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "zh-tw",
                "zh",
                "da",
                "en",
                "fi",
                "fr",
                "fr-ca",
                "de",
                "el",
                "id",
                "it",
                "ja",
                "ko",
                "no",
                "pl",
                "pt",
                "ru",
                "es",
                "sv",
                "th",
                "tr"
              ]
            }
          }
        }
      },
      "translationResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "sourceLanguage": {
            "type": "string"
          },
          "targetLanguages": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "translationTargetLanguageItem",
              "properties": {
                "language": {
                  "type": "string"
                },
                "transcriptionId": {
                  "type": "string"
                },
                "status": {
                  "$ref": "#/components/schemas/transcriptionStatus"
                }
              }
            }
          }
        }
      },
      "translationStatusResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/transcriptionStatus"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "transcriptionFilesResponse": {
        "type": "object",
        "properties": {
          "transcriptionFiles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "locale": {
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "downloadUrl": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-sdk-single-key": "transcriptionFiles"
      },
      "supplementalFilesResponse": {
        "type": "object",
        "properties": {
          "supplementalFiles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "fileId": {
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "downloadUrl": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-sdk-single-key": "supplementalFiles"
      },
      "videoMigrationRequest": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "The uploader is set to this user"
          },
          "owner": {
            "description": "The video ownership is set to this user. Only the owner.userId is used for lookup",
            "$ref": "#/components/schemas/userAccessEntityRequest"
          },
          "uploadedBy": {
            "type": "string",
            "description": "Taken from the userName that uploaded the video"
          },
          "whenUploaded": {
            "type": "string",
            "description": "Upload date is set to this value. Example: <code>2019-02-26 15:53:12</code>",
            "format": "date-time"
          },
          "publishDate": {
            "type": "string",
            "description": "By default, the publishDate is set to the current date the video is set to Active status. You can also set the publishDate to a date in the future to make the video Active at that time. If the video is already Active, the publishDate can be set to a date in the past. <p>Note: Format must be YYYY-MM-DD to avoid generating an error.</p>",
            "format": "date"
          },
          "legacyViewCount": {
            "type": "integer",
            "description": "Retain the total views count from an outside system as an optional param."
          },
          "sensitiveContent": {
            "type": "boolean",
            "description": "This will prevent sensitive content from being indexed in Elastic Search."
          }
        }
      },
      "videoEmbedSummary": {
        "type": "object",
        "properties": {
          "video": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "categories": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/category"
                }
              },
              "description": {
                "type": "string"
              },
              "htmlDescription": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "thumbnailUrl": {
                "type": "string"
              },
              "playbackUrl": {
                "type": "string"
              }
            }
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "fullPath": {
            "type": "string"
          },
          "restricted": {
            "type": "boolean"
          }
        }
      },
      "userCategory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/category"
          },
          {
            "type": "object",
            "properties": {
              "videoCount": {
                "type": "integer"
              },
              "canEdit": {
                "type": "boolean"
              },
              "canAssign": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "videoChaptersMetadata": {
        "type": "object",
        "properties": {
          "chapters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoChaptersMetadataItem"
            }
          }
        }
      },
      "videoChaptersMetadataItem": {
        "type": "object",
        "required": [
          "title",
          "time"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Chapter title"
          },
          "time": {
            "type": "string",
            "description": "Chapter's start time using a timespan format (e.g. <code>00:00:00</code>). The value is unique and cannot be the same as other start times."
          },
          "imageFile": {
            "type": "string",
            "description": "Chapter image filename. This value is unique, and should match the filename of the image file payload. <p>Please provide Content-Type header for the uploaded image file.</p>"
          }
        }
      },
      "userAccessEntityResponse": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        }
      },
      "userAccessEntityRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Rev UserId identifies the user the media is attached to. If the Id does not exist in Rev, the request is rejected."
          },
          "username": {
            "type": "string",
            "description": "Rev Username identifies the user the media is attached to. If the Username does not exist in Rev, the request is rejected."
          },
          "email": {
            "type": "string",
            "description": "Rev Email identifies the user the media is attached to. If the Email does not exist in Rev, the request is rejected."
          }
        }
      },
      "videoMetadata": {
        "type": "object",
        "required": [
          "uploader"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Video title. If not specified, API uses uploaded filename as the title."
          },
          "description": {
            "type": "string",
            "description": "Description is set to null if not specified"
          },
          "uploader": {
            "type": "string",
            "description": "Rev username identifies the user the video is attached to. If not specified, or the username does not exist in Rev, the upload is rejected."
          },
          "owner": {
            "description": "By default, video owner is the user uploader unless otherwise assigned. The video owner automatically has view and edit rights and can include the Media Viewer role. <p>If a video owner is assigned, the uploader does <em>not</em> retain view/edit rights unless granted in video access controls.</p>",
            "$ref": "#/components/schemas/userAccessEntityRequest"
          },
          "categories": {
            "description": "An array of category names attached to the video. If no categories are specified, or the category does not exist in Rev, no categories are attached. The request is also rejected if you do not have contribute rights to a restricted category and you attempt to add/edit or otherwise modify it. <p>This array is provided through the video metadata file and obtained through the <a href=/reference/getcategories>Get Categories</a> endpoint.</p><p>You should only use categories OR categoryIds but not both.</p>",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categoryIds": {
            "type": "array",
            "description": "An array of category Ids attached to the video. If the category does not exist in Rev, the upload fails. The request is also rejected if you do not have contribute rights to a restricted category and you attempt to add/edit or otherwise modify it. <p>This array is provided through the video metadata file and obtained through the <a href=/reference/getcategories>Get Categories</a> endpoint.</p><p>You should only use categories OR categoryIds but not both.</p>",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "An array of strings tagged to the video",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Default=false. Status of the video after it is uploaded."
          },
          "enableRatings": {
            "type": "boolean",
            "description": "Default=true. This enables or disables ratings for the uploaded video."
          },
          "enableDownloads": {
            "type": "boolean",
            "description": "Default=false. This enables or disables downloading of the video from Rev."
          },
          "enableComments": {
            "type": "boolean",
            "description": "Default=true. This enables or disables ability to comment on uploaded video."
          },
          "enableExternalApplicationAccess": {
            "type": "boolean",
            "description": "Default=false. This enables or disables the ability to allow external application access for a video."
          },
          "enableExternalViewersAccess": {
            "type": "boolean",
            "description": "Default=false. This enables or disables the ability to allow external url access for a video."
          },
          "videoAccessControl": {
            "$ref": "#/components/schemas/videoAccessControl"
          },
          "accessControlEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/accessControlEntity"
            }
          },
          "password": {
            "type": "string",
            "description": "A password for Public Video Access Control. Use this field when the videoAccessControl is set to Public only. Otherwise, this field is ignored."
          },
          "customFields": {
            "type": "array",
            "description": "An array of customFields attached to a video/webcast. If the customField does not exist in Rev or invalid values found for picklist, the upload fails. If values are not provided for a picklist and/or text field, they are not set for the video but the upload proceeds. The <a href=/reference/custommetadata>Get Custom Fields</a> endpoint retrieves a list of custom fields.<p>Note: If custom field is marked required in Rev, it <em>must</em> be provided in API call, otherwise it is optional. If it is required and not provided, the upload is rejected. Picklist types must be valid.</p>",
            "items": {
              "$ref": "#/components/schemas/customFieldRequest"
            }
          },
          "sourceType": {
            "type": "string",
            "description": "Specifies where the video originated. Possible values are 'REV', 'WEBEX', 'API', 'VIDEO CONFERENCE', 'WebexLiveStream', 'LiveEnrichment'"
          },
          "doNotTranscode": {
            "type": "boolean",
            "description": "Default=false. This enables the video to bypass transcoding."
          },
          "is360": {
            "type": "boolean",
            "description": "Default=false. This enables the 360 video flag."
          },
          "unlisted": {
            "type": "boolean",
            "description": "Default=false. This enables the unlisted video flag."
          },
          "publishDate": {
            "type": "string",
            "description": "Date the video is published. If IsActive is set to true and PublishDate is not specified, a default value is set (i.e. Today's date). This should be specified based on the date in the the timezone of the current account."
          },
          "userTags": {
            "type": "array",
            "description": "An array of user Ids tagged in the video",
            "items": {
              "type": "string"
            }
          },
          "viewerIdEnabled": {
            "type": "boolean",
            "description": "Default=false. Displays viewer information over the video for playback on the web.",
            "default": false
          },
          "videoId": {
            "type": "string",
            "description": "Required when uploading in multiple chunks. The videoId is returned in the first chunked upload call, and should be included here for each subsequent request"
          },
          "legacyViewCount": {
            "type": "integer",
            "description": "Retain the total views count from an outside system as an optional param."
          },
          "postUploadActions": {
            "type": "object",
            "description": "Transcribe the video once the upload is complete.",
            "properties": {
              "transcribeLanguageId": {
                "description": "Language code. View <a href=/docs/supported-languages>Supported Languages</a> for source languages in Technical Requirements.",
                "type": "string"
              },
              "metadataGenerationFields": {
                "description": "Creates AI-generated metadata for a given video based on the type specified. You must specify the field type you want to generate (description/title/tags/chapters). </br></br>This feature requires English transcription and must also be enabled for your Rev account.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "sensitiveContent": {
            "type": "boolean",
            "description": "This will prevent sensitive content from being indexed in Elastic Search.",
            "default": false
          }
        }
      },
      "videoUploadResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "statusUri": {
            "type": "string"
          }
        }
      },
      "dmeHealthStatus": {
        "type": "object",
        "properties": {
          "bootTime": {
            "type": "string",
            "format": "date-time"
          },
          "systemTime": {
            "type": "string",
            "format": "date-time"
          },
          "systemVersion": {
            "type": "string"
          },
          "fullVersion": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "natAddress": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "overallHealth": {
            "$ref": "#/components/schemas/healthEnum"
          },
          "cpuUsagePercent": {
            "type": "number",
            "format": "float"
          },
          "cpuUsageHealth": {
            "$ref": "#/components/schemas/healthEnum"
          },
          "rtmpServerVersion": {
            "type": "string"
          },
          "rtspCpuUsagePercent": {
            "type": "number",
            "format": "float"
          },
          "rtmpCpuUsagePercent": {
            "type": "number",
            "format": "float"
          },
          "mpsConnectionCount": {
            "type": "integer"
          },
          "mpsThroughputBitsPerSec": {
            "type": "number",
            "format": "float"
          },
          "mpsThroughputPercent": {
            "type": "number",
            "format": "float"
          },
          "throughputPercent": {
            "type": "number",
            "format": "float"
          },
          "throughputHealth": {
            "$ref": "#/components/schemas/healthEnum"
          },
          "multiProtocolIncomingConnectionsCount": {
            "type": "integer"
          },
          "multiProtocolOutgoingConnectionsCount": {
            "type": "integer"
          },
          "mpsMulticastStreamCount": {
            "type": "integer"
          },
          "multiProtocolMaxCount": {
            "type": "integer"
          },
          "rtpIncomingConnectionsCount": {
            "type": "integer"
          },
          "rtpOutgoingConnectionsCount": {
            "type": "integer"
          },
          "rtpMulticastConnectionsCount": {
            "type": "integer"
          },
          "rtpConnectionsMaxCount": {
            "type": "integer"
          },
          "iScsiEnabled": {
            "type": "boolean"
          },
          "diskContentTotal": {
            "type": "integer"
          },
          "diskContentUsed": {
            "type": "integer"
          },
          "diskContentHealth": {
            "$ref": "#/components/schemas/healthEnum"
          },
          "diskSystemTotal": {
            "type": "integer"
          },
          "diskSystemUsed": {
            "type": "integer"
          },
          "diskSystemHealth": {
            "$ref": "#/components/schemas/healthEnum"
          },
          "physicalMemoryTotal": {
            "type": "integer"
          },
          "physicalMemoryUsed": {
            "type": "integer"
          },
          "swapMemoryUsed": {
            "type": "integer"
          },
          "swapMemoryTotal": {
            "type": "integer"
          },
          "memoryHealth": {
            "$ref": "#/components/schemas/healthEnum"
          },
          "meshPeerTotalCount": {
            "type": "integer"
          },
          "meshPeerReachableCount": {
            "type": "integer"
          },
          "meshHealth": {
            "$ref": "#/components/schemas/healthEnum"
          },
          "transratingActiveCount": {
            "type": "integer"
          },
          "transratingMaxCount": {
            "type": "integer"
          },
          "recordings": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "dmeHealthStatusActiveRecording",
              "properties": {
                "id": {
                  "type": "string"
                },
                "streamName": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "duration": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "sslMediaTransfer": {
            "type": "string"
          },
          "stbConnectorEnabled": {
            "type": "boolean"
          },
          "httpThroughputBitsPerSec": {
            "type": "number",
            "format": "float"
          },
          "httpConnectionCount": {
            "type": "integer"
          },
          "throughputPhysicalBits": {
            "type": "integer"
          },
          "meshStatistics": {
            "type": "object",
            "title": "dmeHealthStatusMesh",
            "properties": {
              "clientHttpRequests": {
                "type": "integer"
              },
              "clientHttpHits": {
                "type": "number",
                "format": "float"
              },
              "clientHttpErrors": {
                "type": "integer"
              },
              "clientHttpKbitsIn": {
                "type": "number",
                "format": "float"
              },
              "clientHttpKbitsOut": {
                "type": "number",
                "format": "float"
              },
              "clientHttpAllMedianSvcTime": {
                "type": "number",
                "format": "float"
              },
              "clientHttpMissMedianSvcTime": {
                "type": "number",
                "format": "float"
              },
              "serverAllRequests": {
                "type": "integer"
              },
              "serverAllErrors": {
                "type": "integer"
              },
              "serverAllKbitsIn": {
                "type": "number",
                "format": "float"
              },
              "serverAllKbitsOut": {
                "type": "number",
                "format": "float"
              },
              "serverHttpRequests": {
                "type": "integer"
              },
              "serverHttpErrors": {
                "type": "integer"
              },
              "serverHttpKbitsIn": {
                "type": "number",
                "format": "float"
              },
              "serverHttpKbitsOut": {
                "type": "number",
                "format": "float"
              },
              "cpuTime": {
                "type": "number",
                "format": "float"
              },
              "hitsPercentageAllRequests": {
                "type": "number",
                "format": "float"
              },
              "hitsPercentageBitsSent": {
                "type": "number",
                "format": "float"
              },
              "memoryHitsPercentageHitRequests": {
                "type": "number",
                "format": "float"
              },
              "diskHitsPercentageHitRequests": {
                "type": "number",
                "format": "float"
              },
              "storageSwapSize": {
                "type": "number"
              },
              "storageSwapPercentageUsed": {
                "type": "number",
                "format": "float"
              },
              "storageMemSize": {
                "type": "number"
              },
              "storageMemPercentageUsed": {
                "type": "number",
                "format": "float"
              },
              "cacheMissesRatio": {
                "type": "number",
                "format": "float"
              },
              "cacheHits": {
                "type": "integer"
              },
              "squidCpuUsage": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "lockdownStatus": {
            "type": "string",
            "enum": [
              "Disabled",
              "Unsupported",
              "Locking",
              "Enabled",
              "Unlocking",
              "Error"
            ]
          },
          "lockdownStatusDetail": {
            "type": "string"
          },
          "hlsDistributions": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "dmeHealthStatusHlsDistribution",
              "properties": {
                "streamId": {
                  "type": "string"
                },
                "streamName": {
                  "type": "string"
                },
                "mediaId": {
                  "type": "string"
                },
                "mediaName": {
                  "type": "string"
                },
                "mediaSource": {
                  "type": "string"
                },
                "mediaSourceType": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "statusDetail": {
                  "type": "string"
                },
                "sourceUrl": {
                  "type": "string"
                },
                "playlistsReceived": {
                  "type": "integer"
                },
                "segmentsReceived": {
                  "type": "integer"
                },
                "eventPlaylistReceived": {
                  "type": "integer"
                },
                "eventSegmentsReceived": {
                  "type": "integer"
                },
                "eventPlaylistFetchErrors": {
                  "type": "integer"
                },
                "eventSegmentFetchErrors": {
                  "type": "integer"
                },
                "streamReconnects": {
                  "type": "integer"
                },
                "enableMulticast": {
                  "type": "boolean"
                },
                "enableReflection": {
                  "type": "boolean"
                },
                "automaticMulticast": {
                  "type": "string",
                  "enum": [
                    "HighBitrate",
                    "LowBitrate"
                  ]
                },
                "eventStarted": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "serviceStatus": {
            "type": "object",
            "title": "dmeHealthStatusServices",
            "properties": {
              "servicesHealth": {
                "type": "string"
              },
              "services": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "dmeHealthStatusActiveService",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "active": {
                      "type": "string"
                    },
                    "state": {
                      "type": "string"
                    },
                    "stateStartTime": {
                      "type": "string"
                    },
                    "memory": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "numWorkers": {
            "type": "integer"
          },
          "workers": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "dmeHealthStatusWorker",
              "properties": {
                "workerNum": {
                  "type": "integer"
                },
                "numRequests": {
                  "type": "integer"
                },
                "hitsPercentage": {
                  "type": "number",
                  "format": "float"
                },
                "restarts": {
                  "type": "integer"
                }
              }
            }
          },
          "streamStatus": {
            "type": "object",
            "title": "dmeHealthStatusStreams",
            "properties": {
              "mpsStreams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "dmeHealthStatusActiveMps",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "packetsDropped": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "packetsOk": {
                      "type": "integer"
                    },
                    "uptime": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string"
                    },
                    "farIp": {
                      "type": "string"
                    },
                    "farPort": {
                      "type": "integer"
                    },
                    "nearPort": {
                      "type": "integer"
                    }
                  }
                }
              },
              "hlsStreams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "dmeHealthStatusActiveHls",
                  "properties": {
                    "masterStatus": {
                      "type": "string"
                    },
                    "cdn": {
                      "type": "object",
                      "title": "dmeHealthStatusActiveHlsCdn",
                      "properties": {
                        "isActive": {
                          "type": "integer"
                        },
                        "pushUrl": {
                          "type": "string"
                        }
                      }
                    },
                    "subStreams": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "dmeHealthStatusActiveHlsSub",
                        "properties": {
                          "url": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "masterUrl": {
                      "type": "string"
                    },
                    "groupName": {
                      "type": "string"
                    },
                    "isMasterSub": {
                      "type": "integer"
                    }
                  }
                }
              },
              "passthroughStreams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "dmePassthrough",
                  "properties": {
                    "reflectionData": {
                      "type": "object",
                      "title": "dmePassthroughReflectionData",
                      "properties": {
                        "playbackUrlPaths": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "dmePassthroughReflectionPlayback",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "eventConfig": {
                      "type": "object",
                      "title": "dmePassthroughEventConfig",
                      "properties": {
                        "duration": {
                          "type": "number",
                          "format": "float"
                        },
                        "mediaId": {
                          "type": "string"
                        },
                        "mediaSourceType": {
                          "type": "string"
                        },
                        "enableReflection": {
                          "type": "boolean"
                        },
                        "mediaName": {
                          "type": "string"
                        },
                        "autoMulticastConfig": {
                          "type": "object",
                          "title": "dmePassthroughAutoMcast",
                          "properties": {
                            "packetSize": {
                              "type": "integer"
                            },
                            "address": {
                              "type": "string"
                            },
                            "port": {
                              "type": "integer"
                            },
                            "rendition": {
                              "type": "string"
                            }
                          }
                        },
                        "enableMulticast": {
                          "type": "boolean"
                        },
                        "sourceUrl": {
                          "type": "string"
                        },
                        "streamName": {
                          "type": "string"
                        },
                        "streamId": {
                          "type": "string"
                        },
                        "mediaSource": {
                          "type": "string"
                        }
                      }
                    },
                    "multicastPushData": {
                      "type": "object",
                      "title": "dmePassthroughMcastPush",
                      "properties": {
                        "rates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "dmePassthroughMcastPushRate",
                            "properties": {
                              "bitrate": {
                                "type": "integer"
                              },
                              "segmentsSent": {
                                "type": "integer"
                              },
                              "state": {
                                "type": "string"
                              },
                              "playlistsSent": {
                                "type": "integer"
                              },
                              "playbackUrl": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string"
                    },
                    "originData": {
                      "type": "object",
                      "title": "dmePassthroughOrigin",
                      "properties": {
                        "sourceUrls": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "dmePassthroughOriginSource",
                            "properties": {
                              "url": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "currentStatus": {
                          "type": "object",
                          "title": "dmePassthroughOriginState",
                          "properties": {
                            "stateStartTime": {
                              "type": "number",
                              "format": "float"
                            },
                            "stateElapsedTime": {
                              "type": "number",
                              "format": "float"
                            },
                            "state": {
                              "type": "string"
                            },
                            "eventElapsedTime": {
                              "type": "number",
                              "format": "float"
                            },
                            "statsEventTotal": {
                              "$ref": "#/components/schemas/dmePassthroughOriginStats"
                            },
                            "statsWindowed": {
                              "$ref": "#/components/schemas/dmePassthroughOriginStats"
                            },
                            "eventStartTime": {
                              "type": "number",
                              "format": "float"
                            },
                            "statsStateTotal": {
                              "$ref": "#/components/schemas/dmePassthroughOriginStats"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "enrichedStreams": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/dmeHealthStatusEnrichedStream"
                }
              }
            }
          },
          "rawPhysicalBitCounts": {
            "type": "object",
            "properties": {
              "eth0RxBits": {
                "type": "integer"
              },
              "eth1RxBits": {
                "type": "integer"
              },
              "eth2RxBits": {
                "type": "integer"
              },
              "eth3RxBits": {
                "type": "integer"
              },
              "eth0TxBits": {
                "type": "integer"
              },
              "eth1TxBits": {
                "type": "integer"
              },
              "eth2TxBits": {
                "type": "integer"
              },
              "eth3TxBits": {
                "type": "integer"
              },
              "rxTotalBits": {
                "type": "integer"
              },
              "txTotalBits": {
                "type": "integer"
              },
              "totalBits": {
                "type": "integer"
              }
            }
          },
          "failedRevActions": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "dmeHealthStatusRevAction",
              "properties": {
                "name": {
                  "type": "string"
                },
                "time": {
                  "type": "string"
                }
              }
            }
          },
          "localAccounts": {
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled"
            ]
          },
          "overallHealthDetails": {
            "type": "string"
          }
        }
      },
      "dmePassthroughOriginStats": {
        "type": "object",
        "properties": {
          "segmentsFailed": {
            "type": "integer"
          },
          "playlistsFailed": {
            "type": "integer"
          },
          "playlistsReceived": {
            "type": "integer"
          },
          "segmentsReceived": {
            "type": "integer"
          }
        }
      },
      "dmeHealthStatusEnrichedStream": {
        "type": "object",
        "properties": {
          "typeNumeric": {
            "type": "integer"
          },
          "stateStartTime": {
            "type": "number",
            "format": "float"
          },
          "inputStream": {
            "type": "string"
          },
          "totalPktsTx": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "totalEventTime": {
            "type": "number",
            "format": "float"
          },
          "mediaId": {
            "type": "string"
          },
          "mediaName": {
            "type": "string"
          },
          "packetsOk": {
            "type": "integer"
          },
          "totalPktsDropped": {
            "type": "integer"
          },
          "enrichmentType": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "reconnectAttempts": {
            "type": "integer"
          },
          "typeVerbose": {
            "type": "string"
          },
          "packetsDropped": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "duration": {
            "type": "number",
            "format": "float"
          },
          "timeInCurrentState": {
            "type": "number",
            "format": "float"
          },
          "enrichmentRequestId": {
            "type": "string"
          },
          "connectionHistory": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "dmeHealthStatusEnrichedStreamHistory",
              "properties": {
                "packetsDropped": {
                  "type": "integer"
                },
                "packetsTx": {
                  "type": "integer"
                },
                "connectionStartTime": {
                  "type": "number",
                  "format": "float"
                },
                "connectionEndTime": {
                  "type": "number",
                  "format": "float"
                }
              }
            }
          }
        }
      },
      "healthEnum": {
        "type": "string",
        "enum": [
          "Uninitialized",
          "Normal",
          "Caution",
          "Alert"
        ]
      },
      "dmeDevicesResponse": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dmeDevice"
            }
          }
        },
        "x-sdk-single-key": "devices"
      },
      "dmeDevice": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "macAddress": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "prepositionContent": {
            "type": "boolean"
          },
          "isVideoStorageDevice": {
            "type": "boolean"
          },
          "dMEStatus": {
            "$ref": "#/components/schemas/dmeHealthStatus"
          }
        }
      },
      "dmeDeviceRequest": {
        "type": "object",
        "required": [
          "name",
          "macAddress"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "DME device name"
          },
          "macAddress": {
            "type": "string",
            "description": "MAC address for the DME. Must be unique to the Rev account."
          },
          "isActive": {
            "type": "boolean",
            "description": "Default=false. Specifies if the DME is currently active.",
            "default": false
          },
          "prepositionContent": {
            "type": "boolean",
            "description": "Default=false. Specifies if the DME should preposition content.",
            "default": false
          },
          "isVideoStorageDevice": {
            "type": "boolean",
            "description": "Default=false. Specifies the DME as a storage device.",
            "default": false
          },
          "manualVideoStreams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dmeVideoStream"
            }
          },
          "videoStreamGroupsToAdd": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dmeVideoStreamGroup"
            }
          }
        }
      },
      "encodingType": {
        "type": "string",
        "description": "Encoding type of the stream.",
        "enum": [
          "H264",
          "HLS",
          "HDS",
          "H264TS",
          "MPEG4",
          "MPEG2",
          "Flash",
          "RTP"
        ]
      },
      "dmeVideoStream": {
        "type": "object",
        "description": "Used to manually add video streams to the DME.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Descriptive name for the stream"
          },
          "url": {
            "type": "string",
            "description": "URL of the stream"
          },
          "encodingType": {
            "$ref": "#/components/schemas/encodingType"
          },
          "isMulticast": {
            "type": "boolean",
            "description": "Specifies if the stream is a multicast stream"
          }
        }
      },
      "dmeVideoStreamGroup": {
        "type": "object",
        "description": "Used to add an HLS stream, required for mobile devices.  This is not added by default.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Stream name"
          },
          "hasHls": {
            "type": "boolean",
            "description": "Specify if an HLS stream is created"
          }
        }
      },
      "createDmeDeviceResponse": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string"
          }
        }
      },
      "categoriesResponse": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/category"
            }
          }
        }
      },
      "userCategoriesResponse": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userCategory"
            }
          }
        }
      },
      "eventDetails": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "Plain-text description for your webcast that displays as part of the Webcast Landing page before the event starts and as part of the Event Details section after broadcasting begins. The description also becomes part of the invitation text to attendees."
          },
          "htmlDescription": {
            "type": "string",
            "description": "Rich-text (basic HTML markup) description for your webcast that displays as part of the Webcast Landing page before the event starts and as part of the Event Details section after broadcasting begins."
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "presentationProfileId": {
            "type": "string",
            "description": "GUID for the presentation profile. Only included when Presentation Profile selected as a videoSourceType.",
            "nullable": true
          },
          "eventAdminIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "primaryHostId": {
            "type": "string",
            "nullable": true
          },
          "automatedWebcast": {
            "type": "boolean",
            "description": "Default=false. If enabled event to begin broadcasting at the appointed start time on its own without an Event Host to start it. Only applicable when videoSourceType is Presentation Profile"
          },
          "closedCaptionsEnabled": {
            "type": "boolean",
            "description": "Default=false. Specifies if embedded closed captions are passed through from HLS video stream. Only applicable when Presentation Profile used as a video source."
          },
          "pollsEnabled": {
            "type": "boolean"
          },
          "userPollsResponse": {
            "type": "string",
            "description": "If set to LogAll then individual attendee's responses are recorded and included in the post-event Poll report.",
            "enum": [
              "Anonymous",
              "LogAll"
            ]
          },
          "chatEnabled": {
            "type": "boolean"
          },
          "questionOption": {
            "$ref": "#/components/schemas/eventQuestionOption"
          },
          "questionAndAnswerEnabled": {
            "type": "boolean",
            "description": "Default=false, Select to enable Q&A feature in the webcast",
            "default": false
          },
          "userIds": {
            "type": "array",
            "description": "Ids for users on the access control list. Only used with Private events.",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "description": "Ids for groups on the access control list. Only used with Private events.",
            "items": {
              "type": "string"
            }
          },
          "moderatorIds": {
            "type": "array",
            "description": "Ids for users that will serve as webcast moderators.",
            "items": {
              "type": "string"
            }
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "accessControl": {
            "$ref": "#/components/schemas/eventAccessControl"
          },
          "eventUrl": {
            "type": "string"
          },
          "icsFileUrl": {
            "type": "string"
          },
          "vcSipAddress": {
            "type": "string",
            "description": "SIP address if recording a video conference as the source. Only required if the video source type is SipAddress or Pexip.",
            "nullable": true
          },
          "vcMicrosoftTeamsMeetingUrl": {
            "type": "string",
            "description": "If this is an MS Teams event then the URL to the MS Teams meeting."
          },
          "videoSourceType": {
            "$ref": "#/components/schemas/eventSourceType"
          },
          "rtmp": {
            "$ref": "#/components/schemas/eventRtmpInfo"
          },
          "secondaryRtmp": {
            "$ref": "#/components/schemas/eventRtmpInfo"
          },
          "secondarySourceEnabled": {
            "type": "boolean",
            "description": "Default=false. If enabled, the event will have a secondary RTMP source for redundancy. This is only applicable when videoSourceType is Rtmp."
          },
          "webcastType": {
            "$ref": "#/components/schemas/webcastType"
          },
          "webexTeam": {
            "$ref": "#/components/schemas/eventWebexTeamInfo"
          },
          "zoom": {
            "$ref": "#/components/schemas/eventZoomInfo"
          },
          "backgroundImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scaledImage"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/category"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unlisted": {
            "type": "boolean"
          },
          "estimatedAttendees": {
            "type": "integer"
          },
          "lobbyTimeMinutes": {
            "type": "integer"
          },
          "webcastPreProduction": {
            "$ref": "#/components/schemas/eventPreProduction"
          },
          "shortcutName": {
            "type": "string",
            "nullable": true
          },
          "shortcutNameUrl": {
            "type": "string",
            "nullable": true
          },
          "linkedVideoId": {
            "type": "string",
            "nullable": true
          },
          "autoAssociateVod": {
            "type": "boolean"
          },
          "redirectVod": {
            "type": "boolean"
          },
          "recordingUploaderUserId": {
            "type": "string"
          },
          "presentationFileDownloadAllowed": {
            "type": "boolean"
          },
          "registrationFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/registrationFieldDetails"
            }
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customFieldResponse"
            }
          },
          "liveSubtitles": {
            "$ref": "#/components/schemas/liveSubtitles"
          },
          "autoplay": {
            "type": "boolean",
            "description": "Default=false. Determines how a broadcasting Webcast behaves when a viewer joins. Enabled, it plays immediately and is muted. Disabled, there is a button to start the Webcast and it is not muted."
          },
          "disableAutoRecording": {
            "type": "boolean",
            "description": "Default=false. If false, the webcast is automatically recorded. <p>Note: When false, attempted use of the <a href=/reference/startrecordingevent>Start Webcast Recording</a> endpoint generates an error."
          },
          "hideShareUrl": {
            "type": "boolean"
          },
          "enableCustomBranding": {
            "type": "boolean"
          },
          "vodId": {
            "type": "string",
            "description": "Video Id of source video when 'Vod' selected as a videoSourceType."
          },
          "presenterId": {
            "type": "string",
            "description": "Internal user Id. Only used when 'WebrtcSinglePresenter' selected as a videoSourceType.",
            "nullable": true
          },
          "presenterIds": {
            "type": "array",
            "description": "Internal user Ids. Only used when 'Producer' selected as a videoSourceType.",
            "items": {
              "type": "string"
            }
          },
          "brandingSettings": {
            "title": "eventDetailsBranding",
            "allOf": [
              {
                "$ref": "#/components/schemas/eventBrandingColors"
              },
              {
                "type": "object",
                "properties": {
                  "logos": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/scaledImage"
                    }
                  }
                }
              }
            ]
          },
          "emailToPreRegistrants": {
            "type": "boolean"
          },
          "attendeeJoinMethod": {
            "$ref": "#/components/schemas/attendeeJoinMethod"
          },
          "embeddedContent": {
            "type": "object",
            "title": "eventDetailsEmbeddedContent",
            "properties": {
              "isEnabled": {
                "type": "boolean"
              },
              "contentLinks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/embeddedContentLink"
                }
              }
            }
          },
          "bannerDetails": {
            "type": "object",
            "title": "eventDetailsBanners",
            "properties": {
              "isEnabled": {
                "type": "boolean"
              },
              "banners": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/banner"
                }
              }
            }
          },
          "viewerIdEnabled": {
            "type": "boolean"
          },
          "externalPresenters": {
            "type": "array",
            "description": "Only used when 'Producer' selected as a videoSourceType.",
            "items": {
              "$ref": "#/components/schemas/eventExternalPresenter"
            }
          },
          "producerBgImages": {
            "type": "array",
            "description": "This is available only for producer webcasts.",
            "items": {
              "$ref": "#/components/schemas/producerBgImage"
            },
            "nullable": true
          },
          "reactionsSettings": {
            "$ref": "#/components/schemas/reactionsSettings"
          },
          "isFeatured": {
            "type": "boolean",
            "description": "If enabled by admins on the Branding page, Featured Events display on the Home page carousel to viewers with permission. Featured Events are not displayed once the event has ended."
          },
          "preRollVideoId": {
            "type": "string",
            "description": "Video Id of the Bumper video for the event."
          },
          "postRollVideoId": {
            "type": "string",
            "description": "Video Id of the Trailer video for the event."
          }
        }
      },
      "eventAccessControl": {
        "type": "string",
        "description": "access control for the webcast. This is an enum and can have the following values: Public/TrustedPublic/AllUsers/Private.<p>Note: This parameter is strictly controlled by <a href=/docs/roles-and-permissions>Roles and Permissions</a>. TrustedPublic is only applicable for Partners and WebexEvents type webcasts.</p>",
        "enum": [
          "Public",
          "TrustedPublic",
          "AllUsers",
          "Private"
        ]
      },
      "eventSourceType": {
        "type": "string",
        "description": "This is an enum and can have the following values: <code>PresentationProfile, SipAddress, WebexTeam, WebexLiveStream, Zoom, MicrosoftTeams, Rtmp, Vod, WebrtcSinglePresenter, Pexip, Producer</code></br></br> Note that WebrtcSinglePresenter represents <i>Webcam and Screenshare</i> source in rev UI.  This field is required to create/edit WebexLiveStream event.",
        "enum": [
          "PresentationProfile",
          "SipAddress",
          "WebexTeam",
          "WebexLiveStream",
          "Zoom",
          "MicrosoftTeams",
          "Rtmp",
          "Vod",
          "WebrtcSinglePresenter",
          "Pexip",
          "Producer"
        ]
      },
      "startWebcastRequest": {
        "type": "object",
        "properties": {
          "sbmlRequest": {
            "type": "string",
            "description": "Required for Webcasts with WebexLiveStream as a video source. This is the base64encoded string of the SBML json."
          }
        }
      },
      "embeddedContentLinksResponse": {
        "type": "object",
        "properties": {
          "contentLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/embeddedContentLink"
            }
          }
        }
      },
      "embeddedContentLink": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "isEnabled": {
                "type": "boolean"
              },
              "resourceUri": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/embeddedContentLinkRequest"
          }
        ]
      },
      "embeddedContentLinkRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name that appears to attendees and that appears on the flyout tab during the webcast."
          },
          "code": {
            "type": "string",
            "description": "The third-party URL or embed code. Look for this on the application or website that you will be embedding. This can usually be found in its Admin or Settings section."
          },
          "icon": {
            "type": "string",
            "description": "Icon that is assigned to the flyout tab and is clicked to open. Accepted values: ballot, barchart, group-2, group-3, person-check, person-record, person-wave, poll-chart, psychology, send, smile-face, vote-box",
            "enum": [
              "ballot",
              "barchart",
              "group-2",
              "group-3",
              "person-check",
              "person-record",
              "person-wave",
              "poll-chart",
              "psychology",
              "send",
              "smile-face",
              "vote-box"
            ]
          }
        }
      },
      "embeddedContentLinkDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/embeddedContentLink"
          },
          {
            "type": "object",
            "properties": {
              "resourceUri": {
                "type": "string"
              }
            }
          }
        ]
      },
      "setEnabledRequest": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean"
          }
        }
      },
      "pushContentLinksResponse": {
        "type": "object",
        "properties": {
          "contentLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pushContentLink"
            }
          }
        }
      },
      "pushContentLink": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/pushContentLinkRequest"
          }
        ]
      },
      "pushContentLinkRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provides a description of the link for the attendee."
          },
          "link": {
            "type": "string",
            "description": "The link/URL that opens when clicked."
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Only manual type push content links are enabled/disabled. At end links appear when the webcast ends."
          },
          "pushMethod": {
            "type": "string",
            "enum": [
              "Manual",
              "AtEnd"
            ]
          }
        }
      },
      "bannersResponse": {
        "type": "object",
        "properties": {
          "banners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/banner"
            }
          }
        }
      },
      "banner": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/bannerRequest"
          }
        ]
      },
      "bannerRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provides a description of the banner for the attendee."
          },
          "message": {
            "type": "string",
            "description": "The message that displays in the banner."
          },
          "link": {
            "type": "string",
            "description": "The link/URL that opens when clicked in the banner."
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Only manual type banners are enabled/disabled. At end banners appear when the webcast ends."
          },
          "pushMethod": {
            "type": "string",
            "enum": [
              "Manual",
              "AtEnd"
            ]
          }
        }
      },
      "eventQuestion": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "string"
          },
          "whenAsked": {
            "type": "string",
            "format": "date-time"
          },
          "question": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "repliedUserName": {
            "type": "string"
          },
          "askedBy": {
            "type": "string"
          },
          "repliedBy": {
            "type": "string"
          },
          "whenReplied": {
            "type": "string",
            "format": "date-time"
          },
          "lastAction": {
            "type": "string"
          },
          "reply": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          }
        }
      },
      "eventPoll": {
        "type": "object",
        "properties": {
          "polls": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "question": {
                  "type": "string"
                },
                "totalResponses": {
                  "type": "integer"
                },
                "totalNoResponses": {
                  "type": "integer"
                },
                "allowMultipleAnswers": {
                  "type": "boolean"
                },
                "whenPollCreated": {
                  "type": "string",
                  "format": "date-time"
                },
                "pollAnswers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "answer": {
                        "type": "string"
                      },
                      "votes": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "eventComment": {
        "type": "object",
        "properties": {
          "commentId": {
                    "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "comment": {
            "type": "string"
          },
          "htmlComment": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          }
        }
      },
      "eventStatus": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Scheduled",
              "Starting",
              "InProgress",
              "Broadcasting",
              "Deleted",
              "Recording",
              "RecordingStarting",
              "RecordingStopping",
              "VideoSourceStarting",
              "WaitingForStream",
              "Completed"
            ]
          },
          "slideUrl": {
            "type": "string",
            "nullable": true
          },
          "isPreProduction": {
            "type": "boolean"
          },
          "sbmlResponse": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "liveSubtitles": {
        "type": "object",
        "description": "For enabling live subtitles on the webcast. Enabling subtitles requires Rev IQ license hours and the Rev IQ User role.",
        "properties": {
          "sourceLanguage": {
            "type": "string",
            "description": "Language code. View <a href=/docs/supported-languages>Supported Languages</a> for source languages in Technical Requirements."
          },
          "translationLanguages": {
            "type": "array",
            "description": "Language code. View <a href=/docs/supported-languages>Supported Languages</a> for translation languages in Technical Requirements.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "patchRequest": {
        "type": "array",
        "description": "Refer to http://jsonpatch.com/ for the format of the request body.",
        "items": {
          "$ref": "#/components/schemas/patchOperation"
        }
      },
      "patchOperation": {
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "description": "Operations supported: [add, remove, copy, replace, test, move]"
          },
          "path": {
            "type": "string",
            "description": "Example: <code>path: /FirstName</code>"
          },
          "value": {
            "type": "string",
            "description": "Example: <code>value: Jason</code>"
          }
        }
      },
      "playbackUrlsResponse": {
        "type": "object",
        "properties": {
          "playbackResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/playback"
            }
          },
          "jwtToken": {
            "type": "string",
            "description": "This token is used for sending analytics data and is valid for 24 hours only."
          }
        }
      },
      "playback": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "qValue": {
            "type": "integer"
          },
          "player": {
            "type": "string",
            "enum": [
              "Native",
              "Vbrick",
              "NativeIos",
              "NativeAndriod",
              "NativeMfStb"
            ]
          },
          "url": {
            "type": "string"
          },
          "zoneId": {
            "type": "string"
          },
          "zoneName": {
            "type": "string"
          },
          "slideDelaySeconds": {
            "type": "integer"
          },
          "videoFormat": {
            "type": "string"
          },
          "videoInstanceId": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "revConnectInfo": {
            "type": "string"
          },
          "isEnriched": {
            "type": "boolean"
          }
        }
      },
      "eventRequest": {
        "type": "object",
        "required": [
          "title",
          "startDate",
          "endDate",
          "accessControl",
          "eventAdminIds"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Webcast title"
          },
          "description": {
            "type": "string",
            "description": "Extended description for your webcast that displays as part of the Webcast Landing page before the event starts and as part of the Event Details section after broadcasting begins. The description also becomes part of the invitation text to attendees."
          },
          "startDate": {
            "type": "string",
            "description": "Must match this format: <code>YYYY-DD-MMT00:00:00Z</code>",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "Must match this format: <code>YYYY-DD-MMT00:00:00Z</code>",
            "format": "date-time"
          },
          "presentationProfileId": {
            "type": "string",
            "description": "GUID for the presentation profile. Only required when Presentation Profile selected as a videoSourceType."
          },
          "eventAdminIds": {
            "type": "array",
            "description": "Array of user Ids for the Webcast admins. If no Ids are passed, eventAdminEmails are checked.",
            "items": {
              "type": "string"
            }
          },
          "eventAdminEmails": {
            "type": "array",
            "description": "DEPRECATED",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "eventAdmins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/hostAccessEntity"
            }
          },
          "automatedWebcast": {
            "type": "boolean",
            "description": "Default=false. Enable if Presentation Profile used as a video source and if you want the event to begin broadcasting at the appointed start time on its own without an Event Host to start it.",
            "default": false
          },
          "closedCaptionsEnabled": {
            "type": "boolean",
            "description": "Default=false. Specifies if embedded closed captions in HLS video stream are enabled when Presentation Profile used as a video source. This is separate from the live subtitles (RevIQ) feature",
            "default": false
          },
          "pollsEnabled": {
            "type": "boolean",
            "description": "Default=false. Select to enable polls in the webcast.",
            "default": false
          },
          "userPollsResponse": {
            "type": "string",
            "description": "If set to LogAll then individual attendee's responses are recorded and included in the post-event Poll report.",
            "enum": [
              "Anonymous",
              "LogAll"
            ]
          },
          "chatEnabled": {
            "type": "boolean",
            "description": "Default=true. Select to enable chat in the webcast.",
            "default": true
          },
          "questionAndAnswerEnabled": {
            "type": "boolean",
            "description": "Default=false, Select to enable Q&A feature in the webcast",
            "default": false
          },
          "userIds": {
            "type": "array",
            "description": "Ids for users on the access control list. Only used with Private events.",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "description": "Ids for groups on the access control list. Only used with Private events.",
            "items": {
              "type": "string"
            }
          },
          "moderatorIds": {
            "type": "array",
            "description": "Ids for users that will serve as webcast moderators.",
            "items": {
              "type": "string"
            }
          },
          "moderators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userAccessEntity"
            }
          },
          "password": {
            "type": "string",
            "description": "Used only if isPublic is set to true."
          },
          "accessControl": {
            "$ref": "#/components/schemas/eventAccessControl"
          },
          "vcSipAddress": {
            "type": "string",
            "description": "SIP address if recording a video conference as the source. Only required if the video source type is SipAddress or Pexip."
          },
          "vcMicrosoftTeamsMeetingUrl": {
            "type": "string",
            "description": "If this is an MS Teams event then the URL to the MS Teams meeting."
          },
          "videoSourceType": {
            "$ref": "#/components/schemas/eventSourceType"
          },
          "isSecureRtmp": {
            "type": "boolean",
            "description": "Default=true, Specifies if the RTMP based webcast should use RTMPS or RTMP. True will set to RTMPS and false will set to RTMP.",
            "default": true
          },
          "secondarySourceEnabled": {
            "type": "boolean",
            "description": "Default=false, Specifies if the secondary RTMP source is enabled. This is only applicable when videoSourceType is Rtmp.",
            "default": false
          },
          "webcastType": {
            "$ref": "#/components/schemas/webcastType"
          },
          "webexTeam": {
            "$ref": "#/components/schemas/eventWebexTeamInfo"
          },
          "zoom": {
            "$ref": "#/components/schemas/eventZoomInfo"
          },
          "questionOption": {
            "$ref": "#/components/schemas/eventQuestionOption"
          },
          "presentationFileDownloadAllowed": {
            "type": "boolean",
            "description": "Default=false. Specifies if a presentation attached to the webcast is downloadable",
            "default": false
          },
          "categories": {
            "type": "array",
            "description": "Array of categoryIds to assign the event to. If you use categoryIds and they do not exist/are incorrect, the request is rejected. The request is also rejected if you do not have contribute rights to a restricted/secure category and you attempt to add/edit or otherwise modify it.",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "Array of tag Ids to assign the event to. Can assign to multiple tags.",
            "items": {
              "type": "string"
            }
          },
          "unlisted": {
            "type": "boolean",
            "description": "Default=false. Specifies if the webcast is unlisted. If it is unlisted, prevents it from being displayed to all Media Contributors, Media Viewers, and Event Hosts that did not create the Webcast. Further, resulting videos recorded are not visible or searchable in the Rev UI.",
            "default": false
          },
          "estimatedAttendees": {
            "type": "integer",
            "description": "Number between 0 and 1000000. Allows you to estimate the number of people that will attend so technical resources can be adjusted as needed."
          },
          "lobbyTimeMinutes": {
            "type": "integer",
            "description": "May not exceed 120. Period of time before a Webcast starts when attendees are permitted to join the event."
          },
          "preProduction": {
            "$ref": "#/components/schemas/eventPreProduction"
          },
          "shortcutName": {
            "type": "string",
            "description": "Creates a custom event-friendly URL for a Webcast that makes it easier to remember for attendees. May be reused for multiple events as long as they do not conflict in date and time.<p>This Url is returned in the parameter shortcutNameUrl when the <a href=/reference/getevent>Get Webcast Details</a> endpoint is untilized."
          },
          "linkedVideoId": {
            "type": "string",
            "description": "Use to set the Id of a video that is linked/associated to a Webcast that has finished recording."
          },
          "autoAssociateVod": {
            "type": "boolean",
            "description": "Default=true. When true, the video in LinkedVideoId is automatically linked to a Webcast after it has concluded.",
            "default": true
          },
          "redirectVod": {
            "type": "boolean",
            "description": "Default=true. When true, users that access the Webcast are automatically redirected to the video set in LinkedVideoId. If false, they are directed the Webcast Landing page instead.",
            "default": true
          },
          "registrationFieldIds": {
            "type": "array",
            "description": "If accessControl is set to Public, you can add custom fields to the Webcast to collect more data from public attendees. Use Ids returned in the <a href=/reference/createwebcastregistrationfield>Add Webcast Registration Fields</a> endpoint to specify the fields to use.",
            "items": {
              "type": "string"
            }
          },
          "isCustomConsentEnabled": {
            "type": "boolean",
            "description": "Default=false. If accessControl is set to Public and 'EDIT PUBLIC REG. PAGE CONSENT VERBIAGE' is enabled on the account. When true, you can customize the consent verbiage for public attendees."
          },
          "consentVerbiage": {
            "type": "string",
            "description": "If isCustomConsentEnabled is true then you can customize the consent verbiage for public attendees."
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customFieldRequest"
            }
          },
          "liveSubtitles": {
            "$ref": "#/components/schemas/liveSubtitles"
          },
          "autoplay": {
            "type": "boolean",
            "description": "Default=false. Determines how a broadcasting Webcast behaves when a viewer joins. Enabled, it plays immediately and is muted. Disabled, there is a button to start the Webcast and it is not muted.",
            "default": false
          },
          "disableAutoRecording": {
            "type": "boolean",
            "description": "Default=false. If false, the webcast is automatically recorded. <p>Note: When false, attempted use of the <a href=/reference/startrecordingevent>Start Webcast Recording</a> endpoint generates an error.",
            "default": false
          },
          "hideShareUrl": {
            "type": "boolean",
            "description": "Default=false. When true, the Webcast URL is hidden on the Event Details page that is displayed to attendees while it is broadcasting.",
            "default": false
          },
          "recordingUploaderUserId": {
            "type": "string",
            "description": "Id of the user who is set as the uploader for the event recording."
          },
          "recordingUploaderUserEmail": {
            "type": "string",
            "description": "Used if recordingUploaderUserId is not provided. Email of the user who is set as the uploader for the event recording."
          },
          "emailToPreRegistrants": {
            "type": "boolean",
            "description": "Default=false. If true, registrants will automatically receive an email with the details they need to join the event.",
            "default": false
          },
          "vodId": {
            "type": "string",
            "description": "Video Id. Only required when 'Vod' selected as a videoSourceType. Video must be Hls."
          },
          "presenterId": {
            "type": "string",
            "description": "Internal user Id. Only required when 'WebrtcSinglePresenter' selected as a videoSourceType."
          },
          "attendeeJoinMethod": {
            "$ref": "#/components/schemas/attendeeJoinMethod"
          },
          "presenterIds": {
            "type": "array",
            "description": "Internal user Ids. Only required when 'Producer' selected as a videoSourceType.",
            "items": {
              "type": "string"
            }
          },
          "embeddedContent": {
            "type": "object",
            "title": "eventRequestEmbeddedContent",
            "properties": {
              "isEnabled": {
                "type": "boolean"
              },
              "contentLinks": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/embeddedContentLinkRequest"
                    },
                    {
                      "$ref": "#/components/schemas/embeddedContentLink"
                    }
                  ]
                }
              }
            }
          },
          "pushContent": {
            "deprecated": true,
            "type": "object",
            "title": "eventDetailsPushContent",
            "properties": {
              "isEnabled": {
                "type": "boolean"
              },
              "contentLinks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/pushContentLink"
                }
              }
            }
          },
          "bannerDetails": {
            "type": "object",
            "description": "Maximum allowed banners are five.",
            "title": "eventRequestBanners",
            "properties": {
              "isEnabled": {
                "type": "boolean"
              },
              "banners": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/banner"
                }
              }
            }
          },
          "viewerIdEnabled": {
            "type": "boolean",
            "description": "Default=false. Displays viewer information over the video for playback on the web.",
            "default": false
          },
          "externalPresenters": {
            "type": "array",
            "description": "Only required when 'Producer' selected as a videoSourceType.",
            "items": {
              "$ref": "#/components/schemas/eventExternalPresenter"
            }
          },
          "reactionsSettings": {
            "$ref": "#/components/schemas/reactionsSettings"
          },
          "isFeatured": {
            "type": "boolean",
            "description": "Default=false. If enabled by admins on the Branding page, Featured Events display on the Home page carousel to viewers with permission. Featured Events are not displayed once the event has ended."
          },
          "preRollVideoId": {
            "type": "string",
            "description": "Video Id of the Bumper video for the event."
          },
          "postRollVideoId": {
            "type": "string",
            "description": "Video Id of the Trailer video for the event."
          }
        }
      },
      "editEventRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/eventRequest"
          },
          {
            "properties": {
              "regenerateRtmpUrlAndKey": {
                "type": "boolean",
                "description": "Default=false, Specifies if the exiting RTMP based webcast URL and Key needs to be regenerated.",
                "default": false
              }
            }
          }
        ]
      },
      "userAccessEntity": {
        "type": "object",
        "description": "Array of users who are moderators. This is equivalent to Panelists in Webex.<p>Note: For Partners, auto creation of hosts/moderators occurs if user is not in Rev and new fields are used. This is only available for Account Admins. Email and lastName are required for user auto creation.</p>",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        }
      },
      "hostAccessEntity": {
        "type": "object",
        "description": "Array of users who are Webex Hosts and Co-hosts (In Vbrick, Event Admins).",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "isPrimary": {
            "type": "boolean",
            "description": "To be set to true for 1 eventAdmin in the list of eventAdmins when sending the request. The user (Webex Host) with isPrimary set to true is the Primary Host of the event and rest of the users are the co-hosts. Only one eventAdmin (Webex Host) in this list can be set to Primary."
          }
        }
      },
      "eventExternalPresenter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "producerBgImage": {
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "description": "Image Urls retrieved only for producer/presenters.",
            "items": {
              "$ref": "#/components/schemas/scaledImage"
            }
          }
        }
      },
      "createEventResponse": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          }
        }
      },
      "deleteEventsRequest": {
        "type": "object",
        "description": "At least <em>one</em> of the parameters should be specified in the request. If all of the search terms are not provided in the request, a Bad Request response is returned by Rev.  If both the startDate and endDate search terms are not provided, they are defaulted to set a range equal to one year (i.e. 365 days).",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Search parameter to use to match those events that are set to start on or after the date specified. Value should be less than or equal to endDate. If not specified, it assumes a value of endDate - 365 days."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Search parameter to use to match those events that are set to start on or before the date specified. Value should be greater than or equal to startDate. If not specified, it assumes a value of the current date."
          },
          "customFields": {
            "type": "array",
            "description": "List of custom fields to use when searching for events to delete. All of the fields provided are concatenated as AND in the search request. The value to the property 'Value' is required.",
            "items": {
              "$ref": "#/components/schemas/customFieldRequest"
            }
          }
        }
      },
      "deleteEventsResponse": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          },
          "statusUrl": {
            "type": "string"
          }
        }
      },
      "deleteWebcastsJobStatusResponse": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Initialized",
              "InProgress",
              "Completed"
            ]
          },
          "count": {
            "type": "integer"
          },
          "processedCount": {
            "type": "integer"
          },
          "failedCount": {
            "type": "integer"
          },
          "remainingCount": {
            "type": "integer"
          }
        }
      },
      "eventAccessControlEntitiesRequest": {
        "type": "object",
        "description": "Use to provide updates to Access Controls of Private Events.",
        "properties": {
          "userIds": {
            "type": "array",
            "description": "User Ids on the access control list",
            "items": {
              "type": "string"
            }
          },
          "usernames": {
            "type": "array",
            "description": "Usernames for users on the access control list",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "description": "Group Ids on the access control list",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "eventLinkedVideo": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string",
            "description": "Id of video to replace on webcast"
          },
          "redirectVod": {
            "type": "boolean",
            "description": "Default=true. Specify whether or not to redirect to the video automatically. If false, the user is taken to the Webcast Landing page instead.",
            "default": true
          }
        }
      },
      "accessControlEntitiesRequest": {
        "type": "object",
        "properties": {
          "accessControl": {
            "$ref": "#/components/schemas/videoAccessControl"
          },
          "accessControlEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/accessControlEntity"
            }
          },
          "password": {
            "type": "string",
            "description": "Only videos with Public access control can update the password with a value"
          }
        }
      },
      "videoEditRequest": {
        "type": "object",
        "properties": {
          "clips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoClip"
            }
          }
        }
      },
      "videoClip": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "Start time of the video clip in timespan format (e.g. <code>00:00:00.000</code>) with hours, minutes, seconds, and optional milliseconds. Minutes and seconds should be from 0-59, and milliseconds have three digits."
          },
          "end": {
            "type": "string",
            "description": "End time of the video clip in timespan format (e.g. <code>00:00:00.000</code>) with hours, minutes, seconds, and optional milliseconds. Minutes and seconds should be from 0-59, and milliseconds have three digits."
          },
          "videoId": {
            "type": "string",
            "description": "ID of the video within the system. The video must be accessible and editable to the account used for API authorization. If the video ID matches the video ID in the API call then leave blank or null, otherwise the video ID is required."
          }
        }
      },
      "videoTrimRequest": {
        "type": "object",
        "description": "DEPRECATED",
        "deprecated": true,
        "properties": {
          "removedSegments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoTrimRange"
            }
          }
        }
      },
      "videoTrimRange": {
        "type": "object",
        "description": "DEPRECATED",
        "deprecated": true,
        "properties": {
          "start": {
            "type": "string",
            "description": "Start time to trim video in timespan format (e.g. <code>00:00:00</code>). Minutes and seconds should be from 0-59."
          },
          "end": {
            "type": "string",
            "description": "End time to trim video in timespan format (e.g. <code>00:00:00</code>). Minutes and seconds should be from 0-59."
          }
        }
      },
      "videoTaggingStatus": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "userTagsStatus": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "WaitingForSubmission",
                  "Submitted",
                  "InProcess",
                  "Finished",
                  "Failed"
                ]
              },
              "errorCode": {
                "type": "string"
              },
              "errorMessage": {
                "type": "string"
              }
            }
          }
        }
      },
      "approvalTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of approval template"
          },
          "name": {
            "type": "string",
            "description": "Name of  approval template"
          }
        }
      },
      "videoPendingApprovalItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of video"
          },
          "title": {
            "type": "string",
            "description": "Title of video"
          },
          "htmlDescription": {
            "type": "string",
            "description": "Description of video"
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/videoApprovalStatus"
          },
          "approvalProcessName": {
            "type": "string",
            "description": "Approval process name"
          },
          "approvalProcessStepName": {
            "type": "string",
            "description": "Current approval process step name"
          },
          "approvalProcessStepNumber": {
            "type": "integer",
            "description": "Current approval process step number"
          },
          "approvalProcessStepsCount": {
            "type": "integer",
            "description": "Total number of steps in the approval process"
          }
        }
      },
      "videoApprovalRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for approving or rejecting the video"
          }
        }
      },
      "accessControlEntity": {
        "type": "object",
        "description": "This provides explicit rights to a <strong>User/Group/Channel</strong> along with editing rights <strong>(CanEdit)</strong> to a video. If any value is invalid, it is rejected while valid values are still associated with the video.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of access control entity to give access to"
          },
          "name": {
            "type": "string",
            "description": "Name of access control entity to give access to (used <em>only</em> if the id is not known)"
          },
          "type": {
            "type": "string",
            "enum": [
              "User",
              "Group",
              "Channel"
            ],
            "description": "Type of entity to be updated: <code>User/Group/Channel</code>"
          },
          "canEdit": {
            "type": "boolean",
            "description": "Specifies whether or not the entity is granted edit ability and should be true or false. (Include either id or name, both are not required)"
          }
        }
      },
      "categoryPolicyItem": {
        "type": "object",
        "description": "Used to add or update the users/groups that may manage restricted categories.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of access control entity to give access to"
          },
          "type": {
            "$ref": "#/components/schemas/memberEntityType"
          },
          "itemType": {
            "type": "string",
            "description": "Category role. Can be a <code>CategoryContributor</code> or <code>CategoryManager</code>. Only managers can edit the category itself, along with its content.",
            "enum": [
              "CategoryContributor",
              "CategoryManager"
            ]
          }
        }
      },
      "categoryPathsItem": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "Id of category"
          },
          "name": {
            "type": "string",
            "description": "Name of category"
          },
          "fullPath": {
            "type": "string",
            "description": "Full path with hierarchy"
          }
        }
      },
      "eventQuestionOption": {
        "type": "string",
        "description": "This is an enum and can have the following values: [IDENTIFIED, SELFSELECT, ANONYMOUS]",
        "enum": [
          "IDENTIFIED",
          "SELFSELECT",
          "ANONYMOUS"
        ]
      },
      "eventBrandingColors": {
        "type": "object",
        "properties": {
          "headerColor": {
            "type": "string",
            "description": "Event Primary Color"
          },
          "headerFontColor": {
            "type": "string",
            "description": "Event Header Text Color"
          },
          "primaryFontColor": {
            "type": "string",
            "description": "Event Text Color"
          },
          "accentColor": {
            "type": "string",
            "description": "Event Accent Color"
          },
          "accentFontColor": {
            "type": "string",
            "description": "Event Accent Font Color"
          },
          "primaryColor": {
            "type": "string",
            "description": "Event Header Background Color"
          }
        }
      },
      "eventList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of event"
          },
          "title": {
            "type": "string",
            "description": "Title of event"
          },
          "description": {
            "type": "string",
            "description": "Description of event"
          },
          "startDate": {
            "type": "string",
            "description": "Event Start Date",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "Event End Date",
            "format": "date-time"
          },
          "listingType": {
            "$ref": "#/components/schemas/eventAccessControl"
          },
          "eventUrl": {
            "type": "string",
            "description": "url of event"
          },
          "backgroundImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scaledImage"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/category"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unlisted": {
            "type": "boolean"
          },
          "estimatedAttendees": {
            "type": "integer"
          },
          "lobbyTimeMinutes": {
            "type": "integer"
          },
          "preProduction": {
            "$ref": "#/components/schemas/eventPreProduction"
          },
          "shortcutName": {
            "type": "string"
          },
          "videoSourceType": {
            "type": "string",
            "description": "This is an enum and can have the following values: <code>PresentationProfile, Rtmp, SipAddress, WebexTeam, WebexLiveStream, Zoom, Vod, Pexip, WebrtcSinglePresenter</code></br></br>Note that WebrtcSinglePresenter represents <i>Webcam and Screenshare</i> source in rev UI <p>This field is required to create/edit WebexLiveStream event.</p>"
          },
          "rtmp": {
            "$ref": "#/components/schemas/eventRtmpInfo"
          },
          "secondaryRtmp": {
            "$ref": "#/components/schemas/eventRtmpInfo"
          },
          "secondarySourceEnabled": {
            "type": "boolean",
            "description": "Default=false, Specifies if the secondary RTMP source is enabled. This is only applicable when videoSourceType is Rtmp.",
            "default": false
          },
          "webcastType": {
            "$ref": "#/components/schemas/webcastType"
          },
          "webexTeam": {
            "$ref": "#/components/schemas/eventWebexTeamInfo"
          },
          "zoom": {
            "$ref": "#/components/schemas/eventZoomInfo"
          },
          "vodId": {
            "type": "string"
          },
          "presenterId": {
            "type": "string"
          },
          "presenterIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attendeeJoinMethod": {
            "$ref": "#/components/schemas/attendeeJoinMethod"
          },
          "externalPresenters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eventExternalPresenter"
            }
          },
          "isFeatured": {
            "type": "boolean",
            "description": "If enabled by admins on the Branding page, Featured Events display on the Home page carousel to viewers with permission. Featured Events are not displayed once the event has ended."
          }
        }
      },
      "searchEventsRequest": {
        "type": "object",
        "description": "At least one of the parameters should be specified in the request. If all of the search terms are not provided in the request, a Bad Request response is returned by Rev.  If both the startDate and endDate search terms are not provided, they are defaulted to set a range equal to one year (i.e. 365 days).",
        "properties": {
          "scrollId": {
            "type": "string",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once."
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Search parameter to use to match those events that are set to start on or after the date specified. Value should be less than or equal to endDate. If not specified, it assumes a value of endDate - 365 days."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Search parameter to use to match those events that are set to start on or before the date specified. Value should be greater than or equal to startDate. If not specified, it assumes a value of the current date."
          },
          "sortField": {
            "type": "string",
            "description": "Name of the field in the event that will be used to sort the dataset in the response. Default is 'Title'"
          },
          "sortDirection": {
            "$ref": "#/components/schemas/sortDirection"
          },
          "size": {
            "type": "integer",
            "description": "Number of records in the dataset to return per search request. Default is 100, minimum is 50 and maximum is 500."
          },
          "customFields": {
            "type": "array",
            "description": "List of custom fields to use when searching for events. All of the fields provided are concatenated as AND in the search request. The value to the property 'Value' is required.",
            "items": {
              "$ref": "#/components/schemas/customFieldRequest"
            }
          },
          "isFeatured": {
            "type": "boolean",
            "description": "An optional search term boolean value (true or false) indicating whether to include or exclude events tagged as featured."
          }
        }
      },
      "searchEventsResponse": {
        "type": "object",
        "properties": {
          "scrollId": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Id of event"
                },
                "title": {
                  "type": "string",
                  "description": "Title of event"
                },
                "description": {
                  "type": "string",
                  "description": "Description of event"
                },
                "startDate": {
                  "type": "string",
                  "description": "Event Start Date",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "description": "Event End Date",
                  "format": "date-time"
                },
                "listingType": {
                  "$ref": "#/components/schemas/eventAccessControl"
                },
                "eventUrl": {
                  "type": "string",
                  "description": "url of event"
                },
                "backgroundImages": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/scaledImage"
                  }
                },
                "categories": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "unlisted": {
                  "type": "boolean"
                },
                "estimatedAttendees": {
                  "type": "integer"
                },
                "lobbyTimeMinutes": {
                  "type": "integer"
                },
                "preProduction": {
                  "$ref": "#/components/schemas/eventPreProduction"
                },
                "shortcutName": {
                  "type": "string"
                },
                "shortcutNameUrl": {
                  "type": "string"
                },
                "linkedVideoId": {
                  "type": "string"
                },
                "autoAssociateVod": {
                  "type": "boolean"
                },
                "redirectVod": {
                  "type": "boolean"
                },
                "customFields": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customFieldResponse"
                  }
                },
                "webcastType": {
                  "$ref": "#/components/schemas/webcastType"
                },
                "presenterId": {
                  "type": "string"
                },
                "presenterIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "attendeeJoinMethod": {
                  "$ref": "#/components/schemas/attendeeJoinMethod"
                },
                "externalPresenters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/eventExternalPresenter"
                  }
                },
                "reactionsSettings": {
                  "$ref": "#/components/schemas/reactionsSettings"
                }
              }
            }
          }
        }
      },
      "reactionsSettings": {
        "type": "object",
        "description": "Describes the configuration of Live Emoji Reactions for the event.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Default=false. When true, the Live Emoji Reactions feature is enabled for the event.",
            "default": false
          },
          "emojis": {
            "type": "array",
            "description": "List of emojis available for the event.  If omitted or left empty the emojis will default to the standard set.",
            "items": {
              "$ref": "#/components/schemas/emoji"
            }
          }
        }
      },
      "emoji": {
        "type": "object",
        "description": "Describes an emoji characacter.",
        "properties": {
          "character": {
            "type": "string",
            "description": "The unicode representation of the emoji character."
          },
          "name": {
            "type": "string",
            "description": "The name of the emoji."
          }
        }
      },
      "reactionsSummary": {
        "type": "object",
        "description": "Describes the Reactions Summary Report.",
        "properties": {
          "webcastDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the reaction was recorded."
          },
          "reaction": {
            "type": "string",
            "description": "The emoji character."
          },
          "unicode": {
            "type": "string",
            "description": "The unicode representation of the emoji character."
          },
          "count": {
            "type": "integer",
            "description": "The number of emojis sent."
          }
        }
      },
      "eventRtmpInfo": {
        "type": "object",
        "description": "Used if recording a rtmp stream as the video source.",
        "properties": {
          "url": {
            "type": "string",
            "description": "The RTMP push Url to use with the scheduled event."
          },
          "key": {
            "type": "string",
            "description": "The RTMP Stream key to secure the RTMP push Url."
          }
        }
      },
      "webcastType": {
        "type": "string",
        "description": "Scheduled event type used for integrations, default value is Rev.",
        "enum": [
          "Rev",
          "WebexEvents"
        ]
      },
      "eventWebexTeamInfo": {
        "type": "object",
        "description": "Used if recording a Webex Team meeting as the video source.",
        "properties": {
          "roomId": {
            "type": "string",
            "description": "Webex Team room Id, required."
          },
          "name": {
            "type": "string",
            "description": "Webex Team room name, optional."
          }
        }
      },
      "eventZoomInfo": {
        "type": "object",
        "description": "Used if recording a Zoom meeting as the video source.",
        "properties": {
          "meetingId": {
            "type": "string",
            "description": "Zoom meeting Id, required."
          },
          "meetingPassword": {
            "type": "string",
            "description": "Zoom meeting password, optional."
          }
        }
      },
      "eventPreProduction": {
        "type": "object",
        "description": "Use if creating a pre-production event to set designated pre-production attendees and duration.",
        "properties": {
          "duration": {
            "type": "string",
            "description": "Timespan in hours and minutes that the pre-production webcast occurs before the Main webcast begins (Example: <code>04:00:00</code>, <code>1.06:00:00</code>)"
          },
          "userIds": {
            "type": "array",
            "description": "User Ids of pre-production attendees",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "description": "Group Ids of pre-production attendees",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "scaledImage": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "scaleSize": {
            "type": "string",
            "enum": [
              "Original",
              "ExtraSmall",
              "Small",
              "Medium",
              "Large"
            ]
          }
        }
      },
      "eventSession": {
        "type": "object",
        "properties": {
          "userType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "browser": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "deviceAccessed": {
            "type": "string"
          },
          "streamAccessed": {
            "type": "string"
          },
          "sessionTime": {
            "type": "string"
          },
          "enteredDate": {
            "type": "string",
            "format": "date-time"
          },
          "exitedDate": {
            "type": "string",
            "format": "date-time"
          },
          "viewingTime": {
            "type": "string"
          }
        }
      },
      "eventSessionsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/eventSession"
        }
      },
      "attendeeType": {
        "type": "string",
        "enum": [
          "Host",
          "Moderator",
          "AccountAdmin",
          "Attendee"
        ]
      },
      "attendeeJoinMethod": {
        "description": "Attendee join method. Only required when 'accesscontrol' is Public. Default is 'Registration'. When set to 'Anonymous', no attendee specific details are collected or registered.",
        "type": "string",
        "nullable": true,
        "enum": [
          "Anonymous",
          "Registration"
        ]
      },
      "postEventSession": {
        "type": "object",
        "properties": {
          "userType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "browser": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "deviceAccessed": {
            "type": "string"
          },
          "streamAccessed": {
            "type": "string"
          },
          "sessionTime": {
            "type": "string"
          },
          "viewingTime": {
            "type": "string"
          },
          "publicCDNTime": {
            "type": "string"
          },
          "eCDNTime": {
            "type": "string"
          },
          "enteredDate": {
            "type": "string",
            "format": "date-time"
          },
          "exitedDate": {
            "type": "string",
            "format": "date-time"
          },
          "viewingStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "experiencedErrors": {
            "type": "integer"
          },
          "multicastErrors": {
            "type": "integer"
          },
          "bufferEvents": {
            "type": "integer"
          },
          "rebufferEvents": {
            "type": "integer"
          },
          "rebufferDuration": {
            "type": "integer"
          },
          "attendeeType": {
            "$ref": "#/components/schemas/attendeeType"
          },
          "polls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userPollResponses"
            }
          }
        }
      },
      "userPollResponses": {
        "properties": {
          "pollId": {
            "type": "string"
          },
          "question": {
            "type": "string"
          },
          "answers": {
            "type": "string"
          },
          "when": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "postEventSessionsResponse": {
        "type": "object",
        "properties": {
          "totalSessions": {
            "type": "integer"
          },
          "totalPublicCDNTime": {
            "type": "string"
          },
          "totalECDNTime": {
            "type": "string"
          },
          "hostCount": {
            "type": "integer"
          },
          "moderatorCount": {
            "type": "integer"
          },
          "attendeeCount": {
            "type": "integer",
            "description": "The sum of the count of attendee and account admin in user type."
          },
          "experiencedRebufferingPercentage": {
            "type": "integer",
            "description": "In percentage."
          },
          "averageExperiencedRebufferDuration": {
            "type": "integer"
          },
          "experiencedErrorsPerAttendees": {
            "type": "integer"
          },
          "multicastErrorsPerAttendees": {
            "type": "integer"
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/postEventSession"
            }
          },
          "scrollId": {
            "type": "string"
          }
        }
      },
      "postEventSessionsBadRequest": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalSessions": {
            "type": "integer"
          },
          "errorDescription": {
            "type": "string"
          }
        }
      },
      "searchRealtimeAttendeesRequest": {
        "type": "object",
        "properties": {
          "sortField": {
            "type": "string",
            "description": "Default=FullName. Field to sort results against",
            "default": "FullName",
            "enum": [
              "FullName",
              "Email",
              "ZoneName",
              "StreamType",
              "IpAddress",
              "Browser",
              "OsFamily",
              "StreamAccessed",
              "PlayerDevice",
              "OsName",
              "UserType",
              "Username",
              "AttendeeType"
            ]
          },
          "sortDirection": {
            "$ref": "#/components/schemas/sortDirection"
          },
          "count": {
            "type": "integer",
            "description": "Number of matching records to return in the response. Default is 50. Maximum is 500.",
            "default": 50
          },
          "scrollId": {
            "type": "string",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once."
          },
          "q": {
            "type": "string",
            "description": "Search query. When specified, searches the Search Fields for the specified string."
          },
          "searchField": {
            "type": "string",
            "description": "A comma-separated list of fields to include in search. <p>Supported fields: 'FullName', 'Email', 'ZoneName', 'StreamType', 'IpAddress', 'Browser', 'OsFamily', 'StreamAccessed', 'PlayerDevice', 'OsName', 'UserType', 'Username', 'AttendeeType'</p>"
          },
          "runNumber": {
            "type": "integer",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "default": 0
          },
          "status": {
            "type": "string",
            "description": "User session status. Supported values: 'All', 'Online', 'Offline'. Default is 'All'.",
            "enum": [
              "All",
              "Online",
              "Offline"
            ],
            "default": "All"
          },
          "attendeeDetails": {
            "type": "string",
            "enum": [
              "All",
              "Base",
              "Counts"
            ],
            "description": "The shape of data to return in the response. Supported values: 'Base', 'All' and 'Counts'. Default is 'Base'. 'Counts' returns total count for host (hostCount), moderator (moderatorCount), and attendees (attendeeCount). 'Base' returns just 'UserId', 'Username', 'Email', 'StartTime', 'SessionId', 'FullName'. The values for the total count are also included. 'All includes 'Base' details, metrics, session, system, and user details. The values for the total count are also included."
          }
        }
      },
      "searchRealtimeAttendeesResponse": {
        "type": "object",
        "properties": {
          "scrollId": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "hostCount": {
            "type": "integer"
          },
          "moderatorCount": {
            "type": "integer"
          },
          "attendeeCount": {
            "type": "integer",
            "description": "The sum of the count of attendee and account admin in user type."
          },
          "attendees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "UserId": {
                  "type": "string"
                },
                "Username": {
                  "type": "string"
                },
                "FullName": {
                  "type": "string"
                },
                "UserType": {
                  "type": "string"
                },
                "AttendeeType": {
                  "$ref": "#/components/schemas/attendeeType"
                },
                "Email": {
                  "type": "string"
                },
                "StartTime": {
                  "type": "string",
                  "format": "date-time"
                },
                "Status": {
                  "type": "string"
                },
                "ExperiencedErrors": {
                  "type": "integer"
                },
                "MulticastFailovers": {
                  "type": "integer"
                },
                "ExperiencedBufferingDuration": {
                  "type": "number",
                  "format": "float"
                },
                "ExperiencedBufferingCount": {
                  "type": "integer"
                },
                "AvgExperiencedBufferingDuration": {
                  "type": "number",
                  "format": "float"
                },
                "AvgBitrateKbps": {
                  "type": "number",
                  "format": "float"
                },
                "AvgBandwidthMbps": {
                  "type": "number",
                  "format": "float"
                },
                "ViewingStartTime": {
                  "type": "string",
                  "format": "date-time"
                },
                "ZoneId": {
                  "type": "string"
                },
                "ZoneName": {
                  "type": "string"
                },
                "IpAddress": {
                  "type": "string"
                },
                "StreamDevice": {
                  "type": "string"
                },
                "StreamAccessed": {
                  "type": "string"
                },
                "PlayerDevice": {
                  "type": "string"
                },
                "Browser": {
                  "type": "string"
                },
                "VideoPlayer": {
                  "type": "string"
                },
                "VideoFormat": {
                  "type": "string"
                },
                "UserAgent": {
                  "type": "string"
                },
                "OsName": {
                  "type": "string"
                },
                "OsFamily": {
                  "type": "string"
                },
                "DeviceId": {
                  "type": "string"
                },
                "RevConnect": {
                  "type": "boolean"
                },
                "StreamType": {
                  "type": "string"
                },
                "SessionId": {
                  "type": "string"
                },
                "ProfileImageUrl": {
                  "type": "string"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "description": "Indicates the state of the real-time aggregation of a webcast. Possible values: 'Active', 'Initiated'. Active = webcast is currently aggregating. Initiated = a request to start aggregating is processed.",
            "enum": [
              "Active",
              "Initiated"
            ]
          },
          "experiencedRebufferingPercentage": {
            "type": "integer",
            "description": "In percentage."
          },
          "averageExperiencedRebufferDuration": {
            "type": "integer"
          },
          "experiencedErrorsPerAttendees": {
            "type": "integer"
          },
          "multicastErrorsPerAttendees": {
            "type": "integer"
          }
        }
      },
      "presentationProfileResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/presentationProfile"
        }
      },
      "presentationProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/videoActiveStatus"
          },
          "videoSource": {
            "type": "string"
          },
          "destinations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "deviceId": {
                  "type": "string"
                },
                "deviceName": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "isActive": {
                  "type": "boolean"
                },
                "streams": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "commentRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The text of the comment"
          },
          "userName": {
            "type": "string",
            "description": "Username submitting the comment. This user must exist in Rev. Unless the user has been assigned the Account Admin role, this user must also match the authenticated user making the API call."
          }
        }
      },
      "videoCommentRequest": {
        "required": [
          "userName",
          "comment"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The text of the comment"
          },
          "userName": {
            "type": "string",
            "description": "Username of user submitting the comment. This user must exist in Rev. Only users with the Account Admin Role have the ability to specify a userName other than the currently authenticated user"
          },
          "commentId": {
            "type": "string",
            "description": "Target comment ID. Comments may be nested a single layer deep. If not specified or null then this comment will be added as a top-level comment. If commentId refers to a top-level comment then this comment will be added as a child. If commentId refers to a child comment then this comment will be added as a sibling instead of being further nested. This matches the behavior of Rev UI commenting",
            "nullable": true
          }
        }
      },
      "videoCommentResponse": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "string"
          }
        }
      },
      "userVideoCompletionStatus": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "videoId": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          },
          "whenCompleted": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "searchVideosResponse": {
        "type": "object",
        "properties": {
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/searchVideoItem"
            }
          },
          "totalVideos": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "searchDeletedVideosResponse": {
        "type": "object",
        "properties": {
          "deletedVideos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/searchDeletedVideoItem"
            }
          },
          "totalVideos": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "videoReportResponse": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoViewReportEntry"
            }
          },
          "total": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          }
        }
      },
      "searchDeletedVideoItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "when": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "searchVideoItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "htmlDescription": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "thumbnailUrl": {
            "type": "string"
          },
          "playbackUrl": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "viewCount": {
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/videoActiveStatus"
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/videoApprovalStatus"
          },
          "approvalProcessName": {
            "type": "string"
          },
          "approvalProcessStepName": {
            "type": "string"
          },
          "approvalProcessStepNumber": {
            "type": "integer"
          },
          "approvalProcessStepsCount": {
            "type": "integer"
          },
          "uploader": {
            "type": "string"
          },
          "uploadedBy": {
            "type": "string"
          },
          "whenUploaded": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "fullname": {
                "type": "string"
              },
              "profileImageUri": {
                "type": "string"
              }
            }
          },
          "lastViewed": {
            "type": "string",
            "format": "date-time"
          },
          "averageRating": {
            "type": "number",
            "format": "float"
          },
          "ratingsCount": {
            "type": "integer"
          },
          "speechResult": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/searchVideoSpeechResult"
            }
          },
          "unlisted": {
            "type": "boolean"
          },
          "hasHls": {
            "type": "boolean"
          },
          "hasAudioOnly": {
            "type": "boolean"
          },
          "hasDualStreams": {
            "type": "boolean"
          },
          "isConvertedToSwitched": {
            "type": "boolean"
          },
          "sourceType": {
            "type": "string"
          },
          "thumbnailSheets": {
            "type": "string"
          },
          "whenModified": {
            "type": "string",
            "format": "date-time"
          },
          "whenPublished": {
            "type": "string",
            "format": "date-time"
          },
          "commentCount": {
            "type": "integer"
          },
          "score": {
            "type": "number",
            "format": "float"
          },
          "canEdit": {
            "type": "boolean"
          },
          "hasTranscripts": {
            "type": "boolean"
          }
        }
      },
      "searchVideoSpeechResult": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "double"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "accessTokenRequest": {
        "type": "object",
        "properties": {
          "authCode": {
            "type": "string",
            "description": "Value of XXX for initial request and extend session"
          },
          "apiKey": {
            "type": "string",
            "description": "Configured in the Rev client"
          },
          "grantType": {
            "type": "string",
            "description": "The value should be set to <code>authorization_code</code> for the initial session request and set to <code>refresh_token</code> to extend an existing session"
          },
          "redirectUri": {
            "type": "string",
            "description": "URL of web page to load after Rev credentials have been entered by the user. This page is where the final authentication steps will be performed and from which all subsequent API calls may be made. This value must be URL encoded."
          },
          "refreshToken": {
            "type": "string",
            "description": "Not applicable for initial request and can be omitted. After the initial request this value must be present and the value returned from the initial call for session extension. This value may remain the same for a given session and can be used repeatedly in extend session requests as long as the session remains valid. Each extend session generates a new accessToken value therefore the full authorization string must be recalculated after each extend session request before using in subsequent API calls."
          }
        }
      },
      "accessTokenRequestOauth2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Value of authorization code received in the authorize call for initial access token"
          },
          "client_id": {
            "type": "string",
            "description": "Client_id (apikey) Configured in the Rev client"
          },
          "grant_type": {
            "type": "string",
            "description": "The value should be set to <code>authorization_code</code> for the initial session request and set to <code>refresh_token</code> to get new access token using refresh token"
          },
          "redirect_uri": {
            "type": "string",
            "description": "URL of web page to load after Rev credentials have been entered by the user. This page is where the final authentication steps will be performed and from which all subsequent API calls may be made. This value must be URL encoded."
          },
          "refresh_token": {
            "type": "string",
            "description": "Not required for initial request (grant_type=authorization_code) and can be omitted. Required to get a new access token using the refresh token (grant_type=refresh_token). This value may remain the same for a given session and can be used repeatedly in extend session requests as long as the session remains valid. Each extend session generates a new accessToken value therefore the full authorization string must be recalculated after each extend session request before using in subsequent API calls."
          },
          "code_verifier": {
            "type": "string",
            "description": "Applicable for initial request (grant_type=authorization_code). This is the original code_verifier that was signed and sent as the code_challenge in the authorize call. Rev will sign this using the same S256 algorithm and compare with the code_challenge received earlier to match. If it doesn't match, request for token will be denied."
          }
        }
      },
      "accessTokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "The Vbrick access token to identify user which will be used for API calls"
          },
          "refreshToken": {
            "type": "string",
            "description": "The refresh token that can be used to refresh an access_token when it expires."
          },
          "userId": {
            "type": "string",
            "description": "User Id."
          },
          "expiration": {
            "type": "string",
            "description": "Token expiration time",
            "format": "date-time"
          },
          "issuedBy": {
            "type": "string",
            "description": "The Token issuer, Vbrick here."
          },
          "username": {
            "type": "string",
            "description": "Username of the logged in user."
          },
          "firstName": {
            "type": "string",
            "description": "FirstName of the logged in user."
          },
          "lastName": {
            "type": "string",
            "description": "LastName of the logged in user."
          },
          "scope": {
            "type": "string",
            "description": "The scope of the token (user:full)."
          }
        }
      },
      "accessTokenResponseOauth2": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The Vbrick access token to identify user which will be used for API calls"
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token that can be used to refresh an access_token when it expires."
          },
          "userId": {
            "type": "string",
            "description": "User Id."
          },
          "expires_in": {
            "type": "string",
            "description": "Token expiration time in seconds"
          },
          "token_type": {
            "type": "string",
            "description": "The Token type (Bearer)."
          },
          "username": {
            "type": "string",
            "description": "Username of the logged in user."
          },
          "firstName": {
            "type": "string",
            "description": "FirstName of the logged in user."
          },
          "lastName": {
            "type": "string",
            "description": "LastName of the logged in user."
          },
          "scope": {
            "type": "string",
            "description": "The scope of the token (user:full)."
          }
        }
      },
      "loginJWTResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "The Vbrick access token to identify user which will be used for API calls"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "csrfToken": {
            "type": "string",
            "description": "The CSRF token used by the Rev"
          },
          "language": {
            "type": "string",
            "description": "The user language"
          }
        }
      },
      "authorizationServerResponse": {
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string",
            "description": "The authorization server's issuer identifier."
          },
          "authorization_endpoint": {
            "type": "string",
            "description": "URL of the authorization server's authorization endpoint."
          },
          "token_endpoint": {
            "type": "string",
            "description": "URL of the authorization server's token endpoint."
          },
          "scopes_supported": {
            "type": "array",
            "description": "JSON array containing a list of the OAuth 2.0 scope values that this authorization server supports.",
            "items": {
              "type": "string"
            }
          },
          "response_types_supported": {
            "type": "array",
            "description": "JSON array containing a list of the OAuth 2.0 response_type values that this authorization server supports.",
            "items": {
              "type": "string"
            }
          },
          "grant_types_supported": {
            "type": "array",
            "description": "JSON array containing a list of the OAuth 2.0 grant type values that this authorization server supports.",
            "items": {
              "type": "string"
            }
          },
          "code_challenge_methods_supported": {
            "type": "array",
            "description": "JSON array containing a list of Proof Key for Code Exchange (PKCE) code challenge methods supported by this authorization server.",
            "items": {
              "type": "string"
            }
          },
          "userinfo_endpoint": {
            "type": "string",
            "description": "URL of the authorization server's user info endpoint."
          }
        }
      },
      "userRoleEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "roleType": {
            "type": "string",
            "enum": [
              "AccountAdmin",
              "MediaAdmin",
              "EventAdmin",
              "EventHost",
              "InternalEventHost",
              "MediaContributor",
              "InternalMediaContributor",
              "MediaViewer",
              "TeamCreator",
              "CategoryCreator",
              "VodAnalyst",
              "EventAnalyst",
              "RevIqUser",
              "ChannelCreator",
              "MediaUploader",
              "InternalMediaUploader"
            ]
          }
        }
      },
      "searchUserItem": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "FirstName": {
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "type": "string"
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string"
          },
          "EntityType": {
            "$ref": "#/components/schemas/accessEntityType"
          },
          "ProfileImageUri": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "searchGroupItem": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "EntityType": {
            "$ref": "#/components/schemas/accessEntityType"
          }
        }
      },
      "searchChannelItem": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "EntityType": {
            "$ref": "#/components/schemas/accessEntityType"
          }
        }
      },
      "searchAccessEntityItem": {
        "oneOf": [
          { "$ref": "#/components/schemas/searchUserItem" },
          { "$ref": "#/components/schemas/searchGroupItem" },
          { "$ref": "#/components/schemas/searchChannelItem" }
        ],
        "discriminator": {
          "propertyName": "EntityType",
          "mapping": {
            "User": "#/components/schemas/searchUserItem",
            "Group": "#/components/schemas/searchGroupItem",
            "Channel": "#/components/schemas/searchChannelItem"
          }
        }
      },
      "supplementalFilesMetadata": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supplementFilesMetadataItem"
            }
          }
        }
      },
      "supplementFilesMetadataItem": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Data object of supplemental file details attached to the video. Multiple files can be assigned."
          }
        }
      },
      "transcriptionFilesMetadata": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/transcriptionFilesMetadataItem"
            }
          }
        }
      },
      "transcriptionFilesMetadataItem": {
        "type": "object",
        "description": "Transcription files metadata object. Field name is TranscriptionFiles. <p>Only .srt or .vtt files should be uploaded.</p><p>View <a href=/docs/supported-languages>Supported Languages</a> in the Technical Requirements guide for ongoing updates and supported language codes.",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Filename of attached file payload. Must end with .srt or .vtt file extension"
          },
          "language": {
            "type": "string",
            "description": "Must be a supported language code"
          }
        }
      },
      "searchAccessEntitiesResponse": {
        "type": "object",
        "properties": {
          "accessEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/searchAccessEntityItem"
            }
          },
          "totalEntities": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "userChannelItem": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "logoKey": {
            "type": "string"
          },
          "logoUri": {
            "type": "string"
          },
          "headerKey": {
            "type": "string"
          },
          "headerUri": {
            "type": "string"
          },
          "videoCount": {
            "type": "integer"
          },
          "canEdit": {
            "type": "boolean"
          },
          "canAssign": {
            "type": "boolean"
          },
          "defaultSortOrder": {
            "type": "string",
            "enum": [
              "whenUploaded",
              "recommended",
              "title",
              "viewCount"
            ],
            "default": "whenUploaded"
          }
        }
      },
      "customFieldsResponse": {
        "type": "array",
        "items": {
          "title": "customFieldDetails",
          "allOf": [
            {
              "$ref": "#/components/schemas/customField"
            },
            {
              "type": "object",
              "properties": {
                "enum": {
                  "type": "string",
                  "description": "Options of custom field to set in case of \"Select\" type.",
                  "nullable": true
                }
              }
            }
          ]
        }
      },
      "customField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the custom field in the system."
          },
          "name": {
            "type": "string",
            "description": "Name of the custom field in the system."
          },
          "fieldType": {
            "type": "string",
            "description": "Type of the custome field (Text/Select).",
            "enum": [
              "Text",
              "Select"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "Is custom field required in the system."
          },
          "displayedToUsers": {
            "type": "boolean",
            "description": "Is custom field dispalyed to user."
          }
        }
      },
      "customFieldRequest": {
        "type": "object",
        "description": "Video/Webcast custom field value. id and/or name must be included",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the custom field in the system"
          },
          "name": {
            "type": "string",
            "description": "Name of the custom field in rev. If id is not provided, custom field is looked up by name."
          },
          "value": {
            "type": "string",
            "description": "Value of the custom field"
          }
        }
      },
      "customFieldResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/customField"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the custom field in the system"
              }
            }
          }
        ]
      },
      "createCategoryResponse": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parentCategory": {
            "type": "object",
            "nullable": true,
            "properties": {
              "categoryId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "parentCategory": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "createCategoryRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of category to add"
          },
          "parentCategoryId": {
            "type": "string",
            "nullable": true,
            "description": "Id of parent category to add the category as a child category. If specified, the Id needs to exist in Rev."
          },
          "restricted": {
            "type": "boolean",
            "description": "Default=false. When true, the category is restricted and only the users/groups in categoryPolicyItems may add or edit content in the category or modify the category itself.",
            "default": false
          },
          "categoryPolicyItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categoryPolicyItem"
            }
          }
        }
      },
      "editCategory": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the category to edit"
          },
          "parentCategoryId": {
            "type": "string",
            "nullable": true,
            "description": "Id of parent category to add the category as a child category. If empty will move category to top level. If specified, the Id needs to exist in Rev.",
            "default": null
          },
          "restricted": {
            "type": "boolean",
            "description": "Default=false. When true, the category is restricted and only the users/groups in categoryPolicyItems may add or edit content in the category or modify the category itself.",
            "default": false
          },
          "categoryPolicyItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categoryPolicyItem"
            }
          }
        }
      },
      "categoryDetails": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "Id of category"
          },
          "name": {
            "type": "string",
            "description": "Name of the category"
          },
          "parentCategoryId": {
            "type": "string",
            "nullable": true,
            "description": "Id of parent category with this category as child"
          },
          "restricted": {
            "type": "boolean",
            "description": "Specifies if the category is restricted."
          },
          "categoryPolicyItems": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/categoryPolicyItem"
            }
          },
          "activeVideos": {
            "type": "integer",
            "description": "Number of active videos in the category"
          },
          "inActiveVideos": {
            "type": "integer",
            "description": "Number of inactive videos in the category"
          },
          "totalVideos": {
            "type": "integer",
            "description": "Total number of videos in the category"
          }
        }
      },
      "linkedUrlMetadata": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Url of the video to add to the system"
          },
          "encodingType": {
            "$ref": "#/components/schemas/encodingType"
          },
          "type": {
            "type": "string",
            "description": "Type of the video (Live/Vod)"
          },
          "isMulticast": {
            "type": "boolean"
          }
        }
      },
      "createLinkVideoMetadata": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the video being uploaded. If title is not specified, API uses linked filename as the title."
          },
          "description": {
            "type": "string",
            "description": "Description is set to null if not specified"
          },
          "uploader": {
            "type": "string",
            "description": "This is the Rev username that identifies the user the video is attached to. If not specified, or the username does not exist in Rev, the link is rejected."
          },
          "owner": {
            "description": "Rev User the video is attached to. If the User does not exist in Rev, the request is rejected.",
            "$ref": "#/components/schemas/userAccessEntityRequest"
          },
          "categories": {
            "type": "array",
            "description": "An array of category names that is attached to the video. If no categories are specified, or the category does not exist in Rev, it is not attached. This array is provided through the video metadata file and obtained through the <a href=/reference/getcategories>Get Categories</a> endpoint.<p>Note: You should only use category names OR categoryIds but <em>not</em> both.</p>",
            "items": {
              "type": "string"
            }
          },
          "categoryIds": {
            "type": "array",
            "description": "An array of category Ids that is attached to the video. If the category does not exist in Rev, the upload will fail. This array is provided through the video metadata file and obtained through the <a href=/reference/getcategories>Get Categories</a> endpoint.<p>Note: You should only use category names OR categoryIds but <em>not</em> both.</p>",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "An array of strings tagged to the video",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Default=false. Status of the video after it is uploaded.",
            "default": false
          },
          "enableRatings": {
            "type": "boolean",
            "description": "Default=true. This enables or disables ratings for the uploaded video.",
            "default": true
          },
          "enableDownloads": {
            "type": "boolean",
            "description": "Default=false. This enables or disables downloading of the video from Rev.",
            "default": false
          },
          "enableComments": {
            "type": "boolean",
            "description": "Default=true. This enables or disables comments for the uploaded video.",
            "default": true
          },
          "legacyViewCount": {
            "type": "integer",
            "description": "Retain the total views count from an outside system as an optional param."
          },
          "videoAccessControl": {
            "$ref": "#/components/schemas/videoAccessControl"
          },
          "password": {
            "type": "string",
            "description": "A password for Public Video Access Control. Use this field when the videoAccessControl is set to Public. If not, this field is ignored."
          },
          "accessControlEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/accessControlEntity"
            }
          },
          "customFields": {
            "type": "array",
            "description": "An array of customFields attached to a video/webcast. If the customField does not exist in Rev or invalid values found for picklist, the upload fails. If values are not provided for a picklist and/or text field, they are not set for the video but the upload proceeds. The <a href=/reference/custommetadata>Get Custom Fields</a> endpoint retrieves a list of custom fields.<p>Note: If custom field is marked required in Rev, it <em>must</em> be provided in API call, otherwise it is optional. If it is required and not provided, the upload is rejected. Picklist types must be valid.</p>",
            "items": {
              "$ref": "#/components/schemas/customFieldRequest"
            }
          },
          "linkedUrl": {
            "$ref": "#/components/schemas/linkedUrlMetadata"
          },
          "sensitiveContent": {
            "type": "boolean",
            "description": "This will prevent sensitive content from being indexed in Elastic Search.",
            "default": false
          }
        }
      },
      "videoOembedResponse": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer"
          },
          "width": {
            "type": "integer"
          },
          "html": {
            "type": "string"
          },
          "thumbnail_height": {
            "type": "integer"
          },
          "thumbnail_width": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "createChannelResponse": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          }
        }
      },
      "channelRoleType": {
        "type": "string",
        "enum": [
          "Admin",
          "Contributor",
          "Uploader",
          "Member"
        ]
      },
      "memberEntityType": {
        "type": "string",
        "description": "Type of entity (user/group)",
        "enum": [
          "User",
          "Group"
        ]
      },
      "channelsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/channelDetails"
        }
      },
      "channelDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "$ref": "#/components/schemas/memberEntityType"
                },
                "roleTypes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/channelRoleType"
                  }
                }
              }
            }
          },
          "logoKey": {
            "type": "string"
          },
          "logoUri": {
            "type": "string"
          },
          "headerKey": {
            "type": "string"
          },
          "headerUri": {
            "type": "string"
          },
          "defaultSortOrder": {
            "type": "string",
            "enum": [
              "whenUploaded",
              "recommended",
              "title",
              "viewCount"
            ],
            "default": "whenUploaded"
          }
        }
      },
      "startVcRecordingRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Name given to the video. Defaults to the SIP address if not provided."
          },
          "sipAddress": {
            "type": "string",
            "description": "SIP address for the video recording. Normally the conference room SIP address."
          },
          "sipPin": {
            "type": "string"
          },
          "audioOnly": {
            "type": "boolean",
            "description": "Record only the audio of the SIP call if it's true. It is false by default."
          }
        }
      },
      "stopScheduledRecordingRequest": {
        "type": "object",
        "required": [
          "scheduledRecordingId"
        ],
        "properties": {
          "scheduledRecordingId": {
            "type": "string",
            "description": "Recording Id that needs to be stopped or cancelled"
          }
        }
      },
      "startVCRecordingResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          }
        }
      },
      "stopVCRecordingRequest": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string",
            "description": "Id of video to stop recording"
          }
        }
      },
      "stopVCRecordingResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        }
      },
      "createZoneResponse": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string"
          }
        }
      },
      "zonesResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "defaultZone": {
            "$ref": "#/components/schemas/defaultZone"
          },
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zoneDetails"
            }
          }
        }
      },
      "zoneRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Zone name. Must be unique."
          },
          "parentZoneId": {
            "type": "string",
            "description": "Id of parent zone if creating a child zone"
          },
          "supportsMulticast": {
            "type": "boolean",
            "description": "Specify if the zone supports multicast streams"
          },
          "fallbackToSource": {
            "type": "boolean",
            "description": "Allow viewers, if distribution modalities fail, to fallback to Source (if available) for unicast playback."
          },
          "ipAddresses": {
            "type": "array",
            "description": "Individual Ip addresses added to the zone",
            "items": {
              "type": "string"
            }
          },
          "ipAddressRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ipAddressRange"
            }
          },
          "targetDevices": {
            "type": "array",
            "description": "List of target devices to link to the zone. For the Default Zone, this is optional. However, for Non-Default Zones, at least one target device must be specified.",
            "items": {
              "$ref": "#/components/schemas/zoneTargetDevice"
            }
          },
          "overrideAccountSlideDelay": {
            "type": "boolean",
            "description": "Specifies to override the account slide delay settings"
          },
          "slideDelaySeconds": {
            "type": "number",
            "format": "float",
            "description": "Slide delay in seconds"
          },
          "revConnectEnabled": {
            "type": "boolean",
            "description": "Designate the zone a Rev Connect zone"
          },
          "revConnectSetting": {
            "$ref": "#/components/schemas/zoneRevConnectSetting"
          },
          "zoneRendition": {
            "$ref": "#/components/schemas/zoneRendition"
          }
        }
      },
      "zoneDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "parentZoneId": {
            "type": "string"
          },
          "ipAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ipAddressRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ipAddressRange"
            }
          },
          "targetDevices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zoneTargetDevice"
            }
          },
          "childZones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/childZone"
            }
          },
          "supportsMulticast": {
            "type": "boolean"
          },
          "fallbackToSource": {
            "type": "boolean"
          },
          "slideDelay": {
            "$ref": "#/components/schemas/zoneSlideDelay"
          },
          "revConnectEnabled": {
            "type": "boolean"
          },
          "revConnectSetting": {
            "$ref": "#/components/schemas/zoneRevConnectSetting"
          },
          "zoneRendition": {
            "$ref": "#/components/schemas/zoneRendition"
          }
        }
      },
      "childZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "parentZoneId": {
            "type": "string"
          },
          "ipAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ipAddressRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ipAddressRange"
            }
          },
          "targetDevices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zoneTargetDevice"
            }
          },
          "childZones": {
            "type": "array",
            "description": "An array of childzone objects of arbitrary nested depth, excluded here to avoid circular references.",
            "items": {
              "type": "object",
              "properties": {},
              "nullable": true
            }
          },
          "supportsMulticast": {
            "type": "boolean"
          },
          "fallbackToSource": {
            "type": "boolean"
          },
          "slideDelay": {
            "$ref": "#/components/schemas/zoneSlideDelay"
          },
          "revConnectEnabled": {
            "type": "boolean"
          },
          "revConnectSetting": {
            "$ref": "#/components/schemas/zoneRevConnectSetting"
          },
          "zoneRendition": {
            "$ref": "#/components/schemas/zoneRendition"
          }
        }
      },
      "zoneRevConnectSetting": {
        "type": "object",
        "description": "When revConnectEnabled, add or edit a Rev Connect Zone.",
        "properties": {
          "disableFallback": {
            "type": "boolean",
            "description": "Disables fallback to a unicast stream (if available) which means the zone only supports multicast or Rev Connect."
          },
          "maxZoneMeshes": {
            "type": "integer",
            "description": "0; Defines the upper limit of what can be used within the zone based on licensing retrictions."
          },
          "groupPeersByZoneIPAddresses": {
            "type": "boolean"
          },
          "useUls": {
            "type": "boolean",
            "description": "Use ULS in Peer messaging."
          }
        }
      },
      "zoneRendition": {
        "type": "object",
        "description": "Rendition selection for Auto Unicast of Cloud Streams in zone.  All bitrates are seleced by default.  All bitrates must be selected if any zone device is a DME that has version lower than 3.28.",
        "properties": {
          "highBitrate": {
            "type": "boolean",
            "description": "High bitrate"
          },
          "midBitrate": {
            "type": "boolean",
            "description": "Mid bitrate"
          },
          "lowBitrate": {
            "type": "boolean",
            "description": "Low bitrate"
          }
        }
      },
      "defaultZone": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "targetDevices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zoneTargetDevice"
            }
          },
          "supportsMulticast": {
            "type": "boolean"
          },
          "fallbackToSource": {
            "type": "boolean"
          },
          "slideDelay": {
            "$ref": "#/components/schemas/zoneSlideDelay"
          },
          "zoneRendition": {
            "$ref": "#/components/schemas/zoneRendition"
          }
        }
      },
      "zoneDevicesResponse": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zoneDevices"
            }
          }
        },
        "x-sdk-single-key": "devices"
      },
      "zoneSlideDelay": {
        "type": "object",
        "properties": {
          "overrideAccount": {
            "type": "boolean"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "delaySeconds": {
            "type": "integer"
          }
        }
      },
      "ipAddressRange": {
        "type": "object",
        "description": "A range of IP addresses, formatted as START-END IP addresses or by CIDR.",
        "properties": {
          "start": {
            "type": "string",
            "description": "Starting IP address for the range. Leave blank if the range is represented by CIDR."
          },
          "end": {
            "type": "string",
            "description": "Ending IP address for the range. Leave blank if the range is represented by CIDR."
          },
          "cidr": {
            "type": "string",
            "description": "CIDR representation of the range. Leave blank if the range is represented by start/end."
          }
        }
      },
      "zoneTargetDevice": {
        "type": "object",
        "properties": {
          "deviceType": {
            "$ref": "#/components/schemas/zoneDeviceType"
          },
          "deviceId": {
            "type": "string",
            "description": "Device Id of target device"
          },
          "isActive": {
            "type": "boolean",
            "description": "Status of target device"
          },
          "liveOnly": {
            "type": "boolean",
            "description": "Specifies if no VOD videos retrieved if true"
          },
          "streams": {
            "type": "array",
            "description": "Rev stream names added to the zone from this device",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "zoneDeviceType": {
        "type": "string",
        "enum": [
          "Dme",
          "Akamai",
          "AkamaiLive",
          "Custom",
          "Encoder"
        ]
      },
      "deviceHealthStatus": {
        "type": "string",
        "enum": [
          "Uninitialized",
          "Initializing",
          "Healthy",
          "Warning",
          "Error",
          "Updating",
          "Normal",
          "Caution",
          "Alert"
        ]
      },
      "zoneDevices": {
        "type": "object",
        "properties": {
          "deviceType": {
            "$ref": "#/components/schemas/zoneDeviceType"
          },
          "id": {
            "type": "string"
          },
          "isVideoStorageDevice": {
            "type": "boolean"
          },
          "macAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "prepositionContent": {
            "type": "boolean"
          },
          "healthStatus": {
            "$ref": "#/components/schemas/deviceHealthStatus"
          },
          "videoStreams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "encodingType": {
                  "$ref": "#/components/schemas/encodingType"
                },
                "isMulticast": {
                  "type": "boolean"
                },
                "isVbrickMulticast": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "channelRequest": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Required. Name of the Channel, must be unique."
          },
          "description": {
            "type": "string",
            "description": "Description of Channel to create."
          },
          "members": {
            "description": "Users/groups to add as channel members. Includes a flag to indicate if a member is acting as a channel administrator.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/channelMember"
            }
          },
          "defaultSortOrder": {
            "type": "string",
            "enum": [
              "whenUploaded",
              "recommended",
              "title",
              "viewCount"
            ],
            "default": "whenUploaded"
          }
        }
      },
      "channelMember": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User or Group id"
          },
          "type": {
            "type": "string",
            "description": "Indicates if a channel member is a user or a group entity"
          },
          "roleTypes": {
            "type": "array",
            "description": "Indicates if a user or group is a Channel Administrator, Channel Contributor, or Channel Member.",
            "items": {
              "$ref": "#/components/schemas/channelRoleType"
            }
          }
        }
      },
      "playlistRequest": {
        "type": "object",
        "description": "Playlists can be either static or dynamic. Static playlists require videoIds, dynamic playlists require searchFilter.",
        "required": [
          "name",
          "playlistType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the playlist. Must be unique."
          },
          "playlistType": {
            "$ref": "#/components/schemas/playlistType"
          },
          "videoIds": {
            "description": "Ids of videos to add to playlist. At least one video is required for static playlists.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "searchFilter": {
            "description": "Playlist searchfilter is required for dynamic playlists",
            "$ref": "#/components/schemas/videoSearchRequest"
          }
        }
      },
      "createPlaylistResponse": {
        "type": "object",
        "properties": {
          "playlistId": {
            "type": "string"
          }
        }
      },
      "editPlaylistRequest": {
        "type": "object",
        "description": "Either playlistVideoDetails or searchFilter must be specified depending on the playlistType",
        "properties": {
          "playlistVideoDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/editPlaylistVideos"
            }
          },
          "searchFilter": {
            "$ref": "#/components/schemas/videoSearchRequest"
          }
        }
      },
      "editFeaturedPlaylistRequest": {
        "type": "object",
        "description": "PlaylistVideoDetails must be specified",
        "properties": {
          "playlistVideoDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/editPlaylistVideos"
            }
          }
        }
      },
      "editPlaylistVideos": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string",
            "description": "Video Ids to edit in the playlist"
          },
          "action": {
            "type": "string",
            "description": "Action to be taken - Add or Remove.",
            "enum": [
              "Add",
              "Remove"
            ]
          }
        }
      },
      "playlistVideoItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "ownerFullName": {
            "type": "string"
          },
          "ownerProfileImageUri": {
            "type": "string"
          }
        }
      },
      "playlist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "playlistType": {
            "$ref": "#/components/schemas/playlistType"
          },
          "playbackUrl": {
            "type": "string"
          },
          "videos": {
            "type": "array",
            "description": "A list of the videos in a static playlist.  Videos are not provided for dynamic playlists.",
            "items": {
              "$ref": "#/components/schemas/playlistVideoItem"
            }
          },
          "searchFilter": {
            "$ref": "#/components/schemas/videoSearchRequest"
          }
        }
      },
      "playlistType": {
        "type": "string",
        "enum": [
          "Static",
          "Dynamic"
        ]
      },
      "whenUploaded": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "videoSearchSortField": {
        "type": "string",
        "enum": [
          "duration",
          "lastViewed",
          "ownerName",
          "title",
          "uploaderName",
          "viewCount",
          "whenUploaded",
          "_score"
        ],
        "default": "title"
      },
      "videoSearchRequest": {
        "type": "object",
        "description": "Criteria for searching for videos.  This field is required when creating a dynamic playlist",
        "properties": {
          "sortField": {
            "$ref": "#/components/schemas/videoSearchSortField"
          },
          "sortDirection": {
            "$ref": "#/components/schemas/sortDirection"
          },
          "q": {
            "description": "Search string",
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromUploadDate": {
            "description": "Valid video upload date",
            "type": "string",
            "format": "date-time"
          },
          "toUploadDate": {
            "description": "Valid video upload date",
            "type": "string",
            "format": "date-time"
          },
          "ownerIds": {
            "description": "Owner GUIDs to get specific videos owned by these users. Example: <code>OwnerIds=[\"abc\", \"xyz\"]</code>",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uploaderIds": {
            "description": "Uploader GUIDs to get specific videos uploaded by these users. Example: <code>UploaderIds=[\"abc\", \"xyz\"]</code>",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userTags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "description": "Status of video (Active/Inactive)",
            "$ref": "#/components/schemas/videoActiveStatus"
          },
          "type": {
            "description": "Type of video (Live/Vod)",
            "type": "string",
            "enum": [
              "live",
              "vod"
            ]
          },
          "is360": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "description": "List of Category Ids to specify searching videos only in those categories.<p>Example: <code>Categories=a0e5cbf6-95cb-46e7-8600-4c07bc31f80b, b1f5cbf6-95cb-46e7-8600-4c07bc31g9pc.</code></p><p> Pass a blank entry to return uncategorized videos. Example: <code>Categories=</code></p>",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channels": {
            "description": "If channelIds are provided, videos in that particular channel are returned. User should have rights to the channel.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unlisted": {
            "description": "If provided, the query string fetches the unlisted setting of the video. This can be listed only, unlisted only, or to return all. Default setting fetches the listed only videos.",
            "type": "string",
            "enum": [
              "listed",
              "unlisted",
              "all"
            ]
          },
          "count": {
            "description": "Number of videos to get. (By default count is 50)",
            "type": "integer"
          },
          "scrollId": {
            "description": "If totalVideos > count, then provide the scrollId returned from the first request to get the next set of videos like (<code>scrollId=abc</code>)",
            "type": "string"
          }
        }
      },
      "playlistDetails": {
        "type": "object",
        "properties": {
          "playlistId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "playbackUrl": {
            "type": "string"
          },
          "playlistType": {
            "$ref": "#/components/schemas/playlistType"
          },
          "searchFilter": {
            "description": "Search filter applies to Dynamic playlists only",
            "$ref": "#/components/schemas/videoSearchRequest"
          },
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videoDetails"
            }
          },
          "totalVideos": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "accountFeaturedVideosAndPlaylists": {
        "type": "object",
        "properties": {
          "featuredPlaylist": {
            "type": "string"
          },
          "playbackUrl": {
            "type": "string"
          },
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/playlistVideoItem"
            }
          },
          "playlists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/playlist"
            }
          }
        }
      },
      "accountPlaylists": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/playlist"
        }
      },
      "userLoginReportResponse": {
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "userLoginReportItem",
              "properties": {
                "UserId": {
                  "type": "string"
                },
                "FullName": {
                  "type": "string"
                },
                "Username": {
                  "type": "string"
                },
                "LastLogin": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        },
        "x-single-key": "Users"
      },
      "brandingSettingsResponse": {
        "type": "object",
        "properties": {
          "general": {
            "type": "object",
            "title": "brandingSettingsGeneral",
            "properties": {
              "primaryColor": {
                "type": "string"
              },
              "primaryFontColor": {
                "type": "string"
              },
              "accentColor": {
                "type": "string"
              },
              "accentFontColor": {
                "type": "string"
              },
              "logoUri": {
                "type": "string"
              }
            }
          },
          "header": {
            "type": "object",
            "title": "brandingSettingsHeader",
            "properties": {
              "backgroundColor": {
                "type": "string"
              },
              "fontColor": {
                "type": "string"
              }
            }
          }
        }
      },
      "startScheduledRecordingRequest": {
        "required": [
          "presentationProfileId"
        ],
        "type": "object",
        "properties": {
          "presentationProfileId": {
            "type": "string"
          },
          "useAccountRecordingDevice": {
            "type": "boolean",
            "description": "Default: false.  <p>If false, a DME defined in the presentation profile is used as the recording device. If true, the account primary/secondary recording device is used.</p>",
            "default": false
          },
          "startDate": {
            "type": "string",
            "description": "Start date/time in UTC.  <p>Default: current date/time. If not specified, current time is used. Example: <code>2018-05-21T20:20:00Z</code></p>",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date/time in UTC. Default: 2 hours after the startDate.  <p>The default duration (2 hours) is a configurable system setting.  The max duration is 10 hours by default.  Example: <code>2018-05-21T20:20:00Z</code></p>",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "description": "The title of the recording.  <p>Default: the presentation profile name.</p>"
          }
        }
      },
      "startScheduledRecordingResponse": {
        "type": "object",
        "properties": {
          "scheduledRecordingId": {
            "type": "string"
          }
        }
      },
      "stopScheduledRecordingResponse": {
        "type": "object",
        "properties": {
          "recordingVideoId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Stopping",
              "Cancelled",
              "Stopped"
            ]
          }
        }
      },
      "scheduledRecordingStatusResponse": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Scheduled",
              "Starting",
              "Recording",
              "Stopping",
              "Stopped",
              "Cancelled",
              "Failed"
            ]
          }
        }
      },
      "auditResponse": {
        "description": "CSV file with the following fields: when, entityKey, messageKey, principal, entityId, currentState, previousState",
        "type": "string",
        "format": "binary",
        "example": "MessageKey,EntityKey,EntityId,When,Principal,Message,PreviousState,CurrentState\r\nNetwork:RecordLdapConnectorUserLogon,Network:UserAccess,00000000-0000-0000-0000-000000000000,yyyy-MM-ddThh:mm:ss.000Z,\"{\"\"Id\"\":\"\"00000000-0000-0000-0000-000000000000\"\"}\",\"{\"\"UserId\"\":\"\"00000000-0000-0000-0000-000000000000\"\",\"\"LogOnSuccessful\"\":true}\",\"{\"\"Status\"\":\"\"Active\"\",\"\"ItemStatus\"\":\"\"Active\"\"}\",\"{\"\"Status\"\":\"\"Active\"\",\"\"ItemStatus\"\":\"\"Active\"\"}\"\r\nMedia:SaveVideoSettings,Media:Video,00000000-0000-0000-0000-000000000000,yyyy-MM-ddThh:mm:ss.000Z,\"{\"\"Id\"\":\"\"00000000-0000-0000-0000-000000000000\"\"}\",\"{\"\"VideoId\"\":\"\"00000000-0000-0000-0000-000000000000\"\",\"\"Settings\"\":{\"\"Title\"\":\"\"<video title>\"\",\"\"Description\"\":\"\"<video description>\"\",\"\"AccessControl\"\":\"\"AllUsers\"\",\"\"OwnerUserId\"\":\"\"00000000-0000-0000-0000-000000000000\"\"}}\",\"{\"\"Title\"\":\"\"<title>\"\",\"\"AccessControl\"\":\"\"AllUsers\"\"}\",\"{\"\"Title\"\":\"\"<title>\"\",\"\"AccessControl\"\":\"\"AllUsers\"\"}\""
      },
      "revIqCreditsUsageResponse": {
        "type": "object",
        "properties": {
          "scrollId": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "sessions": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "revIqCreditsUsageItem",
              "properties": {
                "ResourceId": {
                  "type": "string",
                  "description": "Video or Webcast Id."
                },
                "ResourceType": {
                  "type": "string",
                  "description": "Indicates the type of resource the initiated the IQ credits. Possible value: Video or Webcast."
                },
                "Title": {
                  "type": "string",
                  "description": "Resource title."
                },
                "Duration": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Resource duration."
                },
                "Initiator": {
                  "title": "revIqCreditsUsageInitiator",
                  "description": "User who initiated the transaction.",
                  "type": "object",
                  "properties": {
                    "UserId": {
                      "type": "string"
                    },
                    "FirstName": {
                      "type": "string"
                    },
                    "LastName": {
                      "type": "string"
                    },
                    "FullName": {
                      "type": "string"
                    },
                    "Username": {
                      "type": "string"
                    }
                  }
                },
                "Creator": {
                  "title": "revIqCreditsUsageCreator",
                  "description": "User who created the resource. For webcasts, user who created it. For videos, user who uploaded it.",
                  "type": "object",
                  "properties": {
                    "UserId": {
                      "type": "string"
                    },
                    "FirstName": {
                      "type": "string"
                    },
                    "LastName": {
                      "type": "string"
                    },
                    "FullName": {
                      "type": "string"
                    },
                    "Username": {
                      "type": "string"
                    }
                  }
                },
                "Usage": {
                  "type": "string",
                  "description": "Type of transaction that initiated the IQ credits. Possible values include:",
                  "enum": [
                    "Transcription",
                    "Translation",
                    "UserTagging",
                    "MetadataGeneration",
                    "AudioGeneration"
                  ]
                },
                "Credits": {
                  "type": "number",
                  "format": "float",
                  "description": "Amount of IQ credit used."
                },
                "Languages": {
                  "type": "array",
                  "description": "Target languages used when the resource was transcribed or translated. Does not apply for UserTagging.",
                  "items": {
                    "type": "string"
                  }
                },
                "When": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time when the transaction occured."
                }
              }
            }
          }
        }
      },
      "registrationFieldResponse": {
        "type": "object",
        "properties": {
          "registrationFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/registrationFieldDetails"
            }
          }
        }
      },
      "registrationFieldDetails": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/registrationField"
          }
        ]
      },
      "registrationFieldAnswer": {
        "type": "object",
        "description": "RegistrationFields used in webcast endpoints. If the registrationFields does not exist in Rev or invalid values are found for picklists, an error is returned. If values are not provided for a picklist and/or text field, they are not set (the endpoint proceeds).<p>Note: If a webcast registration field  is marked required in Rev, it <em>must</em> be provided in API call, otherwise it is optional. If it is required and not provided, the call is rejected. Picklist types must be valid.</p>",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the registration field in Rev"
          },
          "name": {
            "type": "string",
            "description": "Name of the registration field in Rev"
          },
          "value": {
            "type": "string",
            "description": "Value of the registration field"
          }
        }
      },
      "registrationField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the custom registration field is displayed to users"
          },
          "fieldType": {
            "type": "string",
            "description": "Type of field. Can be <code>Text</code> or <code>Select</code>."
          },
          "required": {
            "type": "boolean",
            "description": "Default=false. Specifies whether the registrant is required to complete the field when registering for the event.",
            "default": false
          },
          "options": {
            "type": "array",
            "description": "Field values when FieldType=<code>picklist</code>.  Required if FieldType=<code>picklist</code>.",
            "items": {
              "type": "string"
            }
          },
          "includeInAllWebcasts": {
            "type": "boolean",
            "description": "Default=false. Specifies if the field is included in each public Webcast that is created.",
            "default": false
          }
        }
      },
      "addEventQuestionRequest": {
        "type": "object",
        "properties": {
          "questionText": {
            "type": "string",
            "description": "Question text to add"
          },
          "externalId": {
            "type": "string",
            "description": "External questionId if any are in external system. Default is blank."
          },
          "askedBy": {
            "$ref": "#/components/schemas/userEntity"
          },
          "isAnonymous": {
            "type": "boolean",
            "description": "Default=false. When true, question is set to anonymous.",
            "default": false
          },
          "whenAsked": {
            "type": "string",
            "description": "Timestamp when question is asked",
            "format": "date-time"
          }
        }
      },
      "addEventAnswerRequest": {
        "type": "object",
        "properties": {
          "answerText": {
            "type": "string",
            "description": "Answer text to add"
          },
          "closeReason": {
            "type": "string",
            "description": "The reason the question is closed. Values include [Declined, FollowUp, Answered, RepliedDirectly]",
            "enum": [
              "Declined",
              "FollowUp",
              "Answered",
              "RepliedDirectly"
            ]
          },
          "answeredBy": {
            "$ref": "#/components/schemas/userEntity"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Default=true. Specifies if the answer is Private or Public.",
            "default": true
          },
          "whenAnswered": {
            "type": "string",
            "description": "Timestamp when the question is answered",
            "format": "date-time"
          }
        }
      },
      "userEntity": {
        "type": "object",
        "description": "The user that asks/answers a question. Defaults to the authenticated API user. If specified, the user must have at least view permission on the Webcast (Attendee, Account Admin, Moderator, or Host).",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "addEventQuestionResponse": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "string"
          }
        }
      },
      "userPendingCompletionStatus": {
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "SessionId of user video watch."
          },
          "timeStamp": {
            "type": "string",
            "description": "Time in video when user paused watching."
          }
        }
      },
      "pausedVideoResponse": {
        "type": "object",
        "properties": {
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pausedVideoItem"
            }
          },
          "totalVideos": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "featureSettings": {
        "type": "object",
        "properties": {
          "commentsEnabled": {
            "type": "boolean"
          },
          "ratingsEnabled": {
            "type": "boolean"
          },
          "categoriesEnabled": {
            "type": "boolean"
          },
          "tagsEnabled": {
            "type": "boolean"
          },
          "publicVideosEnabled": {
            "type": "boolean"
          },
          "downloadsEnabled": {
            "type": "boolean"
          },
          "supplementalFilesEnabled": {
            "type": "boolean"
          },
          "unlistedEnabled": {
            "type": "boolean"
          },
          "revIQTranscriptionAndTranslationEnabled": {
            "type": "boolean"
          },
          "facialRecognitionEnabled": {
            "type": "boolean"
          },
          "legalHoldEnabled": {
            "type": "boolean"
          },
          "defaultSearchSort": {
            "type": "string"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customField"
            }
          },
          "expirationRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/expiryRules"
            }
          }
        }
      },
      "expiryRules": {
        "type": "object",
        "properties": {
          "ruleId": {
            "type": "string"
          },
          "ruleName": {
            "type": "string"
          },
          "numberOfDays": {
            "type": "integer"
          },
          "expiryRuleType": {
            "type": "string",
            "enum": [
              "None",
              "DaysAfterUpload",
              "DaysWithoutViews"
            ]
          },
          "deleteOnExpiration": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "pausedVideoItem": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "sessionId": {
                "type": "string",
                "description": "A unique ID that refers to the previous playback session"
              },
              "timeStamp": {
                "type": "string",
                "description": "The position in the video from which to resume watching. Format is hh:mm:ss (i.e. 00:01:00 for one minute into video)"
              }
            }
          },
          {
            "$ref": "#/components/schemas/searchVideoItem"
          }
        ]
      },
      "maintenanceScheduleResponse": {
        "type": "object",
        "properties": {
          "schedules": {
            "type": "array",
            "items": {
              "type": "array",
              "description": "List of maintenance windows",
              "items": {
                "$ref": "#/components/schemas/maintenanceWindow"
              }
            }
          }
        }
      },
      "maintenanceWindow": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the maintenance is to start."
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the maintenance is to end."
          }
        }
      },
      "jwtEncryptionKeysResponse": {
        "type": "object",
        "properties": {
          "encryptionKeys": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "jwtEncryptionKey",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Public key text"
                },
                "keyId": {
                  "type": "string",
                  "description": "Id of the key"
                },
                "validUntil": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date until key is valid. Only if the key is in rotation."
                }
              }
            }
          }
        }
      },
      "userLocationResponse": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "locationUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "accountExpiryRules": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/expiryRules"
          },
          {
            "properties": {
              "description": {
                "type": "string"
              }
            }
          }
        ]
      },
      "assignableCategoriesResponse": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "assignableCategory",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "fullPath": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "subscriptionsResponse": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "description": "Ids of user subscribed categories",
            "items": {
              "type": "string"
            }
          },
          "channels": {
            "type": "array",
            "description": "Ids of user subscribed channels",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "notificationsResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of notifications returned. Up to 100 may be returned."
          },
          "notifications": {
            "type": "array",
            "nullable": false,
            "items": {
              "type": "object",
              "properties": {
                "notificationId": {
                  "type": "string"
                },
                "notificationDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "notificationType": {
                  "type": "string"
                },
                "isRead": {
                  "type": "boolean"
                },
                "notificationText": {
                  "type": "string"
                },
                "notificationTargetUri": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "accessEntityType": {
        "type": "string",
        "description": "Type of entity (user/group/channel)",
        "enum": [
          "User",
          "Group",
          "Channel"
        ]
      },
      "webcastIsPublicResponse": {
        "type": "object",
        "properties": {
          "isPublic": {
            "type": "boolean"
          }
        }
      },
      "videoReportRequest": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "format": "date-time",
            "description": "If after date is used, only video views with a start date <em>after</em> the specified date are included in the response. If <em>both</em> dates are used, video views between the specified dates are returned. If <em>no</em> dates are specified, all video views are returned up to a maximum of 500 sessions per call."
          },
          "before": {
            "type": "string",
            "format": "date-time",
            "description": "If before date is used, only video views with a start date <em>before</em> the specified date are included in the response. If <em>both</em> dates are used, video views between the specified dates are returned. If <em>no</em> dates are specified, all video views are returned up to a maximum of 500 sessions per call."
          },
          "scrollId": {
            "type": "string",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once. Use the scrollId from previous call to get the next set of results."
          },
          "userId": {
            "type": "string",
            "description": "To get video session for a particular user, userId of the user can be speficied in the request."
          }
        }
      },
      "videosReportRequest": {
        "type": "object",
        "properties": {
          "videoIds": {
            "description": "Ids of videos to return data for. If no Ids are specified, data for all videos in the system are returned. Maximum video Ids can be passed are 50.",
            "type": "string"
          },
          "after": {
            "type": "string",
            "format": "date-time",
            "description": "If after date is used, only video views with a start date <em>after</em> the specified date (up to 31 days) are included in the response. If <em>both</em> dates are used, video views between the specified dates are returned, not exceeding 31 days. If <em>no</em> dates are specified, video views between the current date and 31 days in the past from the start date are returned."
          },
          "before": {
            "type": "string",
            "format": "date-time",
            "description": "If before date is used, only video views with a start date <em>before</em> the specified date (up to 31 days) are included in the response. If <em>both</em> dates are used, video views between the specified dates are returned, not exceeding 31 days. If <em>no</em> dates are specified, video views between the current date and 31 days in the past from the start date are returned."
          },
          "scrollId": {
            "type": "string",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once."
          }
        }
      }
    }
  }
}